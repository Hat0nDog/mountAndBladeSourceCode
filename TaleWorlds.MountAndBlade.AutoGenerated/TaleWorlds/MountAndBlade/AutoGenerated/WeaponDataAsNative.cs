// Decompiled with JetBrains decompiler
// Type: TaleWorlds.MountAndBlade.AutoGenerated.WeaponDataAsNative
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;

namespace TaleWorlds.MountAndBlade.AutoGenerated
{
  internal struct WeaponDataAsNative
  {
    internal UIntPtr WeaponMesh;
    internal UIntPtr HolsterMesh;
    internal UIntPtr HolsterMeshWithWeapon;
    internal UIntPtr FlyingMesh;
    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
    internal string Prefab;
    internal UIntPtr Body;
    internal UIntPtr CollisionBody;
    internal UIntPtr TableauMaterial;
    internal MatrixFrame WeaponFrame;
    internal int PhysicsMaterialIndex;
    internal int WeaponKind;
    internal StackArray.StackArray4Int ItemHolsterIndices;
    internal int Difficulty;
    internal float BaseWeight;
    internal float Inertia;
    internal short ReloadPhase;
    [MarshalAs(UnmanagedType.U1)]
    internal bool HasFlagAnimation;
    internal Vec3 AmmoOffset;
    internal MatrixFrame StickingFrame;
    internal float ScaleFactor;
    internal float CenterOfMass;
    internal Vec3 CenterOfMassXYZ;
    internal Vec3 HolsterPositionShift;
    internal int FlyingSoundCode;
    internal int PassbySoundCode;
    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
    internal string TrailParticleName;
    internal Vec3 CenterOfMassShift;
    internal short DataValue;
    internal int CurrentUsageIndex;
    internal float AirFrictionConstant;
    internal bool HasLowerHolsterPriority;
    internal float GlossMultiplier;

    internal WeaponDataAsNative(WeaponData weaponData)
    {
      this.WeaponMesh = (NativeObject) weaponData.WeaponMesh != (NativeObject) null ? weaponData.WeaponMesh.Pointer : UIntPtr.Zero;
      this.HolsterMesh = (NativeObject) weaponData.HolsterMesh != (NativeObject) null ? weaponData.HolsterMesh.Pointer : UIntPtr.Zero;
      this.Prefab = weaponData.Prefab;
      this.HolsterMeshWithWeapon = (NativeObject) weaponData.HolsterMeshWithWeapon != (NativeObject) null ? weaponData.HolsterMeshWithWeapon.Pointer : UIntPtr.Zero;
      this.FlyingMesh = (NativeObject) weaponData.FlyingMesh != (NativeObject) null ? weaponData.FlyingMesh.Pointer : UIntPtr.Zero;
      this.Body = (NativeObject) weaponData.Shape != (NativeObject) null ? weaponData.Shape.Pointer : UIntPtr.Zero;
      this.CollisionBody = (NativeObject) weaponData.CollisionShape != (NativeObject) null ? weaponData.CollisionShape.Pointer : UIntPtr.Zero;
      this.TableauMaterial = (NativeObject) weaponData.TableauMaterial != (NativeObject) null ? weaponData.TableauMaterial.Pointer : UIntPtr.Zero;
      this.WeaponFrame = weaponData.WeaponFrame;
      this.PhysicsMaterialIndex = weaponData.PhysicsMaterialIndex;
      this.WeaponKind = weaponData.WeaponKind;
      this.ItemHolsterIndices = weaponData.ItemHolsterIndices;
      this.Difficulty = weaponData.Difficulty;
      this.BaseWeight = weaponData.BaseWeight;
      this.Inertia = weaponData.Inertia;
      this.ReloadPhase = weaponData.ReloadPhase;
      this.HasFlagAnimation = weaponData.HasFlagAnimation;
      this.AmmoOffset = weaponData.AmmoOffset;
      this.StickingFrame = weaponData.StickingFrame;
      this.ScaleFactor = weaponData.ScaleFactor;
      this.CenterOfMass = weaponData.CenterOfMass;
      this.CenterOfMassXYZ = weaponData.CenterOfMass3D;
      this.HolsterPositionShift = weaponData.HolsterPositionShift;
      this.FlyingSoundCode = weaponData.FlyingSoundCode;
      this.PassbySoundCode = weaponData.PassbySoundCode;
      this.TrailParticleName = weaponData.TrailParticleName;
      this.CenterOfMassShift = weaponData.CenterOfMassShift;
      this.DataValue = weaponData.DataValue;
      this.CurrentUsageIndex = weaponData.CurrentUsageIndex;
      this.AirFrictionConstant = weaponData.AirFrictionConstant;
      this.HasLowerHolsterPriority = weaponData.HasLowerHolsterPriority;
      this.GlossMultiplier = weaponData.GlossMultiplier;
    }

    public static implicit operator WeaponData(WeaponDataAsNative agentEntityDataAsNative) => new WeaponData()
    {
      WeaponMesh = agentEntityDataAsNative.WeaponMesh != UIntPtr.Zero ? new MetaMesh(agentEntityDataAsNative.WeaponMesh) : (MetaMesh) null,
      HolsterMesh = agentEntityDataAsNative.HolsterMesh != UIntPtr.Zero ? new MetaMesh(agentEntityDataAsNative.HolsterMesh) : (MetaMesh) null,
      Prefab = agentEntityDataAsNative.Prefab,
      HolsterMeshWithWeapon = agentEntityDataAsNative.HolsterMeshWithWeapon != UIntPtr.Zero ? new MetaMesh(agentEntityDataAsNative.HolsterMeshWithWeapon) : (MetaMesh) null,
      FlyingMesh = agentEntityDataAsNative.FlyingMesh != UIntPtr.Zero ? new MetaMesh(agentEntityDataAsNative.FlyingMesh) : (MetaMesh) null,
      Shape = agentEntityDataAsNative.Body != UIntPtr.Zero ? new PhysicsShape(agentEntityDataAsNative.Body) : (PhysicsShape) null,
      CollisionShape = agentEntityDataAsNative.CollisionBody != UIntPtr.Zero ? new PhysicsShape(agentEntityDataAsNative.CollisionBody) : (PhysicsShape) null,
      TableauMaterial = agentEntityDataAsNative.TableauMaterial != UIntPtr.Zero ? new Material(agentEntityDataAsNative.TableauMaterial) : (Material) null,
      WeaponFrame = agentEntityDataAsNative.WeaponFrame,
      PhysicsMaterialIndex = agentEntityDataAsNative.PhysicsMaterialIndex,
      WeaponKind = agentEntityDataAsNative.WeaponKind,
      ItemHolsterIndices = agentEntityDataAsNative.ItemHolsterIndices,
      Difficulty = agentEntityDataAsNative.Difficulty,
      BaseWeight = agentEntityDataAsNative.BaseWeight,
      Inertia = agentEntityDataAsNative.Inertia,
      ReloadPhase = agentEntityDataAsNative.ReloadPhase,
      HasFlagAnimation = agentEntityDataAsNative.HasFlagAnimation,
      AmmoOffset = agentEntityDataAsNative.AmmoOffset,
      StickingFrame = agentEntityDataAsNative.StickingFrame,
      ScaleFactor = agentEntityDataAsNative.ScaleFactor,
      CenterOfMass = agentEntityDataAsNative.CenterOfMass,
      CenterOfMass3D = agentEntityDataAsNative.CenterOfMassXYZ,
      HolsterPositionShift = agentEntityDataAsNative.HolsterPositionShift,
      FlyingSoundCode = agentEntityDataAsNative.FlyingSoundCode,
      PassbySoundCode = agentEntityDataAsNative.PassbySoundCode,
      TrailParticleName = agentEntityDataAsNative.TrailParticleName,
      CenterOfMassShift = agentEntityDataAsNative.CenterOfMassShift,
      DataValue = agentEntityDataAsNative.DataValue,
      CurrentUsageIndex = agentEntityDataAsNative.CurrentUsageIndex,
      AirFrictionConstant = agentEntityDataAsNative.AirFrictionConstant,
      HasLowerHolsterPriority = agentEntityDataAsNative.HasLowerHolsterPriority,
      GlossMultiplier = agentEntityDataAsNative.GlossMultiplier
    };
  }
}
