// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBPeer
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBPeer : IMBPeer
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBPeer.SetUserDataDelegate call_SetUserDataDelegate;
    public static ScriptingInterfaceOfIMBPeer.SetControlledAgentDelegate call_SetControlledAgentDelegate;
    public static ScriptingInterfaceOfIMBPeer.SetTeamDelegate call_SetTeamDelegate;
    public static ScriptingInterfaceOfIMBPeer.IsActiveDelegate call_IsActiveDelegate;
    public static ScriptingInterfaceOfIMBPeer.SetIsSynchronizedDelegate call_SetIsSynchronizedDelegate;
    public static ScriptingInterfaceOfIMBPeer.GetIsSynchronizedDelegate call_GetIsSynchronizedDelegate;
    public static ScriptingInterfaceOfIMBPeer.SendExistingObjectsDelegate call_SendExistingObjectsDelegate;
    public static ScriptingInterfaceOfIMBPeer.BeginModuleEventDelegate call_BeginModuleEventDelegate;
    public static ScriptingInterfaceOfIMBPeer.EndModuleEventDelegate call_EndModuleEventDelegate;
    public static ScriptingInterfaceOfIMBPeer.GetAveragePingInMillisecondsDelegate call_GetAveragePingInMillisecondsDelegate;
    public static ScriptingInterfaceOfIMBPeer.GetAverageLossPercentDelegate call_GetAverageLossPercentDelegate;
    public static ScriptingInterfaceOfIMBPeer.SetRelevantGameOptionsDelegate call_SetRelevantGameOptionsDelegate;
    public static ScriptingInterfaceOfIMBPeer.GetReversedHostDelegate call_GetReversedHostDelegate;
    public static ScriptingInterfaceOfIMBPeer.GetHostDelegate call_GetHostDelegate;
    public static ScriptingInterfaceOfIMBPeer.GetPortDelegate call_GetPortDelegate;

    public void SetUserData(int index, MBNetworkPeer data) => ScriptingInterfaceOfIMBPeer.call_SetUserDataDelegate(index, data != null ? data.GetManagedId() : 0);

    public void SetControlledAgent(int index, UIntPtr missionPointer, int agentIndex) => ScriptingInterfaceOfIMBPeer.call_SetControlledAgentDelegate(index, missionPointer, agentIndex);

    public void SetTeam(int index, int teamIndex) => ScriptingInterfaceOfIMBPeer.call_SetTeamDelegate(index, teamIndex);

    public bool IsActive(int index) => ScriptingInterfaceOfIMBPeer.call_IsActiveDelegate(index);

    public void SetIsSynchronized(int index, bool value) => ScriptingInterfaceOfIMBPeer.call_SetIsSynchronizedDelegate(index, value);

    public bool GetIsSynchronized(int index) => ScriptingInterfaceOfIMBPeer.call_GetIsSynchronizedDelegate(index);

    public void SendExistingObjects(int index, UIntPtr missionPointer) => ScriptingInterfaceOfIMBPeer.call_SendExistingObjectsDelegate(index, missionPointer);

    public void BeginModuleEvent(int index, bool isReliable) => ScriptingInterfaceOfIMBPeer.call_BeginModuleEventDelegate(index, isReliable);

    public void EndModuleEvent(bool isReliable) => ScriptingInterfaceOfIMBPeer.call_EndModuleEventDelegate(isReliable);

    public double GetAveragePingInMilliseconds(int index) => ScriptingInterfaceOfIMBPeer.call_GetAveragePingInMillisecondsDelegate(index);

    public double GetAverageLossPercent(int index) => ScriptingInterfaceOfIMBPeer.call_GetAverageLossPercentDelegate(index);

    public void SetRelevantGameOptions(int index, bool sendMeBloodEvents, bool sendMeSoundEvents) => ScriptingInterfaceOfIMBPeer.call_SetRelevantGameOptionsDelegate(index, sendMeBloodEvents, sendMeSoundEvents);

    public uint GetReversedHost(int index) => ScriptingInterfaceOfIMBPeer.call_GetReversedHostDelegate(index);

    public uint GetHost(int index) => ScriptingInterfaceOfIMBPeer.call_GetHostDelegate(index);

    public ushort GetPort(int index) => ScriptingInterfaceOfIMBPeer.call_GetPortDelegate(index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetUserDataDelegate(int index, int data);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetControlledAgentDelegate(
      int index,
      UIntPtr missionPointer,
      int agentIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetTeamDelegate(int index, int teamIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsActiveDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetIsSynchronizedDelegate(int index, [MarshalAs(UnmanagedType.U1)] bool value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetIsSynchronizedDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SendExistingObjectsDelegate(int index, UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void BeginModuleEventDelegate(int index, [MarshalAs(UnmanagedType.U1)] bool isReliable);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void EndModuleEventDelegate([MarshalAs(UnmanagedType.U1)] bool isReliable);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate double GetAveragePingInMillisecondsDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate double GetAverageLossPercentDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetRelevantGameOptionsDelegate(
      int index,
      [MarshalAs(UnmanagedType.U1)] bool sendMeBloodEvents,
      [MarshalAs(UnmanagedType.U1)] bool sendMeSoundEvents);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate uint GetReversedHostDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate uint GetHostDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate ushort GetPortDelegate(int index);
  }
}
