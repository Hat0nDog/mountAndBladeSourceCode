// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBEditor
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBEditor : IMBEditor
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBEditor.IsEditModeDelegate call_IsEditModeDelegate;
    public static ScriptingInterfaceOfIMBEditor.IsEditModeEnabledDelegate call_IsEditModeEnabledDelegate;
    public static ScriptingInterfaceOfIMBEditor.UpdateSceneTreeDelegate call_UpdateSceneTreeDelegate;
    public static ScriptingInterfaceOfIMBEditor.IsEntitySelectedDelegate call_IsEntitySelectedDelegate;
    public static ScriptingInterfaceOfIMBEditor.AddEditorWarningDelegate call_AddEditorWarningDelegate;
    public static ScriptingInterfaceOfIMBEditor.RenderEditorMeshDelegate call_RenderEditorMeshDelegate;
    public static ScriptingInterfaceOfIMBEditor.EnterEditModeDelegate call_EnterEditModeDelegate;
    public static ScriptingInterfaceOfIMBEditor.TickEditModeDelegate call_TickEditModeDelegate;
    public static ScriptingInterfaceOfIMBEditor.LeaveEditModeDelegate call_LeaveEditModeDelegate;
    public static ScriptingInterfaceOfIMBEditor.EnterEditMissionModeDelegate call_EnterEditMissionModeDelegate;
    public static ScriptingInterfaceOfIMBEditor.LeaveEditMissionModeDelegate call_LeaveEditMissionModeDelegate;
    public static ScriptingInterfaceOfIMBEditor.ActivateSceneEditorPresentationDelegate call_ActivateSceneEditorPresentationDelegate;
    public static ScriptingInterfaceOfIMBEditor.DeactivateSceneEditorPresentationDelegate call_DeactivateSceneEditorPresentationDelegate;
    public static ScriptingInterfaceOfIMBEditor.TickSceneEditorPresentationDelegate call_TickSceneEditorPresentationDelegate;
    public static ScriptingInterfaceOfIMBEditor.GetEditorSceneViewDelegate call_GetEditorSceneViewDelegate;
    public static ScriptingInterfaceOfIMBEditor.HelpersEnabledDelegate call_HelpersEnabledDelegate;
    public static ScriptingInterfaceOfIMBEditor.BorderHelpersEnabledDelegate call_BorderHelpersEnabledDelegate;
    public static ScriptingInterfaceOfIMBEditor.ZoomToPositionDelegate call_ZoomToPositionDelegate;
    public static ScriptingInterfaceOfIMBEditor.AddEntityWarningDelegate call_AddEntityWarningDelegate;
    public static ScriptingInterfaceOfIMBEditor.GetAllPrefabsAndChildWithTagDelegate call_GetAllPrefabsAndChildWithTagDelegate;
    public static ScriptingInterfaceOfIMBEditor.SetUpgradeLevelVisibilityDelegate call_SetUpgradeLevelVisibilityDelegate;
    public static ScriptingInterfaceOfIMBEditor.ExitEditModeDelegate call_ExitEditModeDelegate;
    public static ScriptingInterfaceOfIMBEditor.IsReplayManagerRecordingDelegate call_IsReplayManagerRecordingDelegate;
    public static ScriptingInterfaceOfIMBEditor.IsReplayManagerRenderingDelegate call_IsReplayManagerRenderingDelegate;
    public static ScriptingInterfaceOfIMBEditor.IsReplayManagerReplayingDelegate call_IsReplayManagerReplayingDelegate;

    public bool IsEditMode() => ScriptingInterfaceOfIMBEditor.call_IsEditModeDelegate();

    public bool IsEditModeEnabled() => ScriptingInterfaceOfIMBEditor.call_IsEditModeEnabledDelegate();

    public void UpdateSceneTree() => ScriptingInterfaceOfIMBEditor.call_UpdateSceneTreeDelegate();

    public bool IsEntitySelected(UIntPtr entityId) => ScriptingInterfaceOfIMBEditor.call_IsEntitySelectedDelegate(entityId);

    public void AddEditorWarning(UIntPtr entityId, string warningText)
    {
      byte[] numArray = (byte[]) null;
      if (warningText != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBEditor._utf8.GetBytes(warningText, 0, warningText.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBEditor.call_AddEditorWarningDelegate(entityId, numArray);
    }

    public void RenderEditorMesh(UIntPtr metaMeshId, ref MatrixFrame frame) => ScriptingInterfaceOfIMBEditor.call_RenderEditorMeshDelegate(metaMeshId, ref frame);

    public void EnterEditMode(
      UIntPtr sceneWidgetPointer,
      ref MatrixFrame initialCameraFrame,
      float initialCameraElevation,
      float initialCameraBearing)
    {
      ScriptingInterfaceOfIMBEditor.call_EnterEditModeDelegate(sceneWidgetPointer, ref initialCameraFrame, initialCameraElevation, initialCameraBearing);
    }

    public void TickEditMode(float dt) => ScriptingInterfaceOfIMBEditor.call_TickEditModeDelegate(dt);

    public void LeaveEditMode() => ScriptingInterfaceOfIMBEditor.call_LeaveEditModeDelegate();

    public void EnterEditMissionMode(UIntPtr missionPointer) => ScriptingInterfaceOfIMBEditor.call_EnterEditMissionModeDelegate(missionPointer);

    public void LeaveEditMissionMode() => ScriptingInterfaceOfIMBEditor.call_LeaveEditMissionModeDelegate();

    public void ActivateSceneEditorPresentation() => ScriptingInterfaceOfIMBEditor.call_ActivateSceneEditorPresentationDelegate();

    public void DeactivateSceneEditorPresentation() => ScriptingInterfaceOfIMBEditor.call_DeactivateSceneEditorPresentationDelegate();

    public void TickSceneEditorPresentation(float dt) => ScriptingInterfaceOfIMBEditor.call_TickSceneEditorPresentationDelegate(dt);

    public SceneView GetEditorSceneView()
    {
      NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBEditor.call_GetEditorSceneViewDelegate();
      SceneView nativeObjectWrapper = NativeObject.CreateNativeObjectWrapper<SceneView>(nativeObjectPointer);
      if (!(nativeObjectPointer.Pointer != UIntPtr.Zero))
        return nativeObjectWrapper;
      LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
      return nativeObjectWrapper;
    }

    public bool HelpersEnabled() => ScriptingInterfaceOfIMBEditor.call_HelpersEnabledDelegate();

    public bool BorderHelpersEnabled() => ScriptingInterfaceOfIMBEditor.call_BorderHelpersEnabledDelegate();

    public void ZoomToPosition(Vec3 pos) => ScriptingInterfaceOfIMBEditor.call_ZoomToPositionDelegate(pos);

    public void AddEntityWarning(UIntPtr entityId, string msg)
    {
      byte[] numArray = (byte[]) null;
      if (msg != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBEditor._utf8.GetBytes(msg, 0, msg.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBEditor.call_AddEntityWarningDelegate(entityId, numArray);
    }

    public string GetAllPrefabsAndChildWithTag(string tag)
    {
      byte[] numArray = (byte[]) null;
      if (tag != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBEditor._utf8.GetBytes(tag, 0, tag.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBEditor.call_GetAllPrefabsAndChildWithTagDelegate(numArray) != 1 ? (string) null : Managed.ReturnValueFromEngine;
    }

    public void SetUpgradeLevelVisibility(string cumulated_string)
    {
      byte[] numArray = (byte[]) null;
      if (cumulated_string != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBEditor._utf8.GetBytes(cumulated_string, 0, cumulated_string.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBEditor.call_SetUpgradeLevelVisibilityDelegate(numArray);
    }

    public void ExitEditMode() => ScriptingInterfaceOfIMBEditor.call_ExitEditModeDelegate();

    public bool IsReplayManagerRecording() => ScriptingInterfaceOfIMBEditor.call_IsReplayManagerRecordingDelegate();

    public bool IsReplayManagerRendering() => ScriptingInterfaceOfIMBEditor.call_IsReplayManagerRenderingDelegate();

    public bool IsReplayManagerReplaying() => ScriptingInterfaceOfIMBEditor.call_IsReplayManagerReplayingDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsEditModeDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsEditModeEnabledDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void UpdateSceneTreeDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsEntitySelectedDelegate(UIntPtr entityId);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AddEditorWarningDelegate(UIntPtr entityId, byte[] warningText);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void RenderEditorMeshDelegate(UIntPtr metaMeshId, ref MatrixFrame frame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void EnterEditModeDelegate(
      UIntPtr sceneWidgetPointer,
      ref MatrixFrame initialCameraFrame,
      float initialCameraElevation,
      float initialCameraBearing);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void TickEditModeDelegate(float dt);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void LeaveEditModeDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void EnterEditMissionModeDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void LeaveEditMissionModeDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ActivateSceneEditorPresentationDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DeactivateSceneEditorPresentationDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void TickSceneEditorPresentationDelegate(float dt);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate NativeObjectPointer GetEditorSceneViewDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool HelpersEnabledDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool BorderHelpersEnabledDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ZoomToPositionDelegate(Vec3 pos);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AddEntityWarningDelegate(UIntPtr entityId, byte[] msg);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetAllPrefabsAndChildWithTagDelegate(byte[] tag);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetUpgradeLevelVisibilityDelegate(byte[] cumulated_string);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ExitEditModeDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsReplayManagerRecordingDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsReplayManagerRenderingDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsReplayManagerReplayingDelegate();
  }
}
