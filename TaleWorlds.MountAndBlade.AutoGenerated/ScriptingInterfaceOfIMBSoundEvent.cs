// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBSoundEvent
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBSoundEvent : IMBSoundEvent
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBSoundEvent.PlaySoundDelegate call_PlaySoundDelegate;
    public static ScriptingInterfaceOfIMBSoundEvent.PlaySoundWithIntParamDelegate call_PlaySoundWithIntParamDelegate;
    public static ScriptingInterfaceOfIMBSoundEvent.PlaySoundWithStrParamDelegate call_PlaySoundWithStrParamDelegate;
    public static ScriptingInterfaceOfIMBSoundEvent.PlaySoundWithParamDelegate call_PlaySoundWithParamDelegate;

    public bool PlaySound(int fmodEventIndex, ref Vec3 position) => ScriptingInterfaceOfIMBSoundEvent.call_PlaySoundDelegate(fmodEventIndex, ref position);

    public bool PlaySoundWithIntParam(
      int fmodEventIndex,
      int paramIndex,
      float paramVal,
      ref Vec3 position)
    {
      return ScriptingInterfaceOfIMBSoundEvent.call_PlaySoundWithIntParamDelegate(fmodEventIndex, paramIndex, paramVal, ref position);
    }

    public bool PlaySoundWithStrParam(
      int fmodEventIndex,
      string paramName,
      float paramVal,
      ref Vec3 position)
    {
      byte[] numArray = (byte[]) null;
      if (paramName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBSoundEvent._utf8.GetBytes(paramName, 0, paramName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBSoundEvent.call_PlaySoundWithStrParamDelegate(fmodEventIndex, numArray, paramVal, ref position);
    }

    public bool PlaySoundWithParam(
      int soundCodeId,
      SoundEventParameter parameter,
      ref Vec3 position)
    {
      return ScriptingInterfaceOfIMBSoundEvent.call_PlaySoundWithParamDelegate(soundCodeId, parameter, ref position);
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool PlaySoundDelegate(int fmodEventIndex, ref Vec3 position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool PlaySoundWithIntParamDelegate(
      int fmodEventIndex,
      int paramIndex,
      float paramVal,
      ref Vec3 position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool PlaySoundWithStrParamDelegate(
      int fmodEventIndex,
      byte[] paramName,
      float paramVal,
      ref Vec3 position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool PlaySoundWithParamDelegate(
      int soundCodeId,
      SoundEventParameter parameter,
      ref Vec3 position);
  }
}
