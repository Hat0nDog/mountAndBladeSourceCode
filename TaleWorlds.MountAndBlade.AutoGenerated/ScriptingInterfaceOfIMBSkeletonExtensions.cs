// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBSkeletonExtensions
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBSkeletonExtensions : IMBSkeletonExtensions
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.CreateAgentSkeletonDelegate call_CreateAgentSkeletonDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.CreateSimpleSkeletonDelegate call_CreateSimpleSkeletonDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.CreateWithActionSetDelegate call_CreateWithActionSetDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.GetSkeletonFaceAnimationTimeDelegate call_GetSkeletonFaceAnimationTimeDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.SetSkeletonFaceAnimationTimeDelegate call_SetSkeletonFaceAnimationTimeDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.GetSkeletonFaceAnimationNameDelegate call_GetSkeletonFaceAnimationNameDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.GetBoneEntitialFrameAtAnimationProgressDelegate call_GetBoneEntitialFrameAtAnimationProgressDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.GetBoneEntitialFrameDelegate call_GetBoneEntitialFrameDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.SetAnimationAtChannelDelegate call_SetAnimationAtChannelDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.GetActionAtChannelDelegate call_GetActionAtChannelDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.SetFacialAnimationOfChannelDelegate call_SetFacialAnimationOfChannelDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.SetAgentActionChannelDelegate call_SetAgentActionChannelDelegate;
    public static ScriptingInterfaceOfIMBSkeletonExtensions.TickActionChannelsDelegate call_TickActionChannelsDelegate;

    public Skeleton CreateAgentSkeleton(
      string skeletonName,
      bool isHumanoid,
      int actionSetIndex,
      string monsterUsageSetName,
      ref AgentVisualsNativeData agentVisualsNativeData)
    {
      byte[] numArray1 = (byte[]) null;
      if (skeletonName != null)
      {
        numArray1 = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBSkeletonExtensions._utf8.GetBytes(skeletonName, 0, skeletonName.Length, numArray1, 0);
        numArray1[bytes] = (byte) 0;
      }
      byte[] numArray2 = (byte[]) null;
      if (monsterUsageSetName != null)
      {
        numArray2 = CallbackStringBufferManager.StringBuffer1;
        int bytes = ScriptingInterfaceOfIMBSkeletonExtensions._utf8.GetBytes(monsterUsageSetName, 0, monsterUsageSetName.Length, numArray2, 0);
        numArray2[bytes] = (byte) 0;
      }
      NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBSkeletonExtensions.call_CreateAgentSkeletonDelegate(numArray1, isHumanoid, actionSetIndex, numArray2, ref agentVisualsNativeData);
      Skeleton skeleton = (Skeleton) null;
      if (nativeObjectPointer.Pointer != UIntPtr.Zero)
      {
        skeleton = new Skeleton(nativeObjectPointer.Pointer);
        LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
      }
      return skeleton;
    }

    public Skeleton CreateSimpleSkeleton(string skeletonName)
    {
      byte[] numArray = (byte[]) null;
      if (skeletonName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBSkeletonExtensions._utf8.GetBytes(skeletonName, 0, skeletonName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBSkeletonExtensions.call_CreateSimpleSkeletonDelegate(numArray);
      Skeleton skeleton = (Skeleton) null;
      if (nativeObjectPointer.Pointer != UIntPtr.Zero)
      {
        skeleton = new Skeleton(nativeObjectPointer.Pointer);
        LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
      }
      return skeleton;
    }

    public Skeleton CreateWithActionSet(
      ref AgentVisualsNativeData agentVisualsNativeData,
      ref AnimationSystemData animationSystemData)
    {
      NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBSkeletonExtensions.call_CreateWithActionSetDelegate(ref agentVisualsNativeData, ref animationSystemData);
      Skeleton skeleton = (Skeleton) null;
      if (nativeObjectPointer.Pointer != UIntPtr.Zero)
      {
        skeleton = new Skeleton(nativeObjectPointer.Pointer);
        LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
      }
      return skeleton;
    }

    public float GetSkeletonFaceAnimationTime(UIntPtr entityId) => ScriptingInterfaceOfIMBSkeletonExtensions.call_GetSkeletonFaceAnimationTimeDelegate(entityId);

    public void SetSkeletonFaceAnimationTime(UIntPtr entityId, float time) => ScriptingInterfaceOfIMBSkeletonExtensions.call_SetSkeletonFaceAnimationTimeDelegate(entityId, time);

    public string GetSkeletonFaceAnimationName(UIntPtr entityId) => ScriptingInterfaceOfIMBSkeletonExtensions.call_GetSkeletonFaceAnimationNameDelegate(entityId) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public void GetBoneEntitialFrameAtAnimationProgress(
      UIntPtr skeletonPointer,
      sbyte boneIndex,
      int animationIndex,
      float progress,
      ref MatrixFrame outFrame)
    {
      ScriptingInterfaceOfIMBSkeletonExtensions.call_GetBoneEntitialFrameAtAnimationProgressDelegate(skeletonPointer, boneIndex, animationIndex, progress, ref outFrame);
    }

    public void GetBoneEntitialFrame(
      UIntPtr skeletonPointer,
      sbyte bone,
      bool useBoneMapping,
      bool forceToUpdate,
      ref MatrixFrame outFrame)
    {
      ScriptingInterfaceOfIMBSkeletonExtensions.call_GetBoneEntitialFrameDelegate(skeletonPointer, bone, useBoneMapping, forceToUpdate, ref outFrame);
    }

    public void SetAnimationAtChannel(
      UIntPtr skeletonPointer,
      int animationIndex,
      int channelNo,
      float animationSpeedMultiplier,
      float blendInPeriod,
      float startProgress)
    {
      ScriptingInterfaceOfIMBSkeletonExtensions.call_SetAnimationAtChannelDelegate(skeletonPointer, animationIndex, channelNo, animationSpeedMultiplier, blendInPeriod, startProgress);
    }

    public int GetActionAtChannel(UIntPtr skeletonPointer, int channelNo) => ScriptingInterfaceOfIMBSkeletonExtensions.call_GetActionAtChannelDelegate(skeletonPointer, channelNo);

    public void SetFacialAnimationOfChannel(
      UIntPtr skeletonPointer,
      int channel,
      string facialAnimationName,
      bool playSound,
      bool loop)
    {
      byte[] numArray = (byte[]) null;
      if (facialAnimationName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBSkeletonExtensions._utf8.GetBytes(facialAnimationName, 0, facialAnimationName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBSkeletonExtensions.call_SetFacialAnimationOfChannelDelegate(skeletonPointer, channel, numArray, playSound, loop);
    }

    public void SetAgentActionChannel(
      UIntPtr skeletonPointer,
      int actionChannelNo,
      int actionIndex,
      float channelParameter,
      float blendPeriodOverride)
    {
      ScriptingInterfaceOfIMBSkeletonExtensions.call_SetAgentActionChannelDelegate(skeletonPointer, actionChannelNo, actionIndex, channelParameter, blendPeriodOverride);
    }

    public void TickActionChannels(UIntPtr skeletonPointer) => ScriptingInterfaceOfIMBSkeletonExtensions.call_TickActionChannelsDelegate(skeletonPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate NativeObjectPointer CreateAgentSkeletonDelegate(
      byte[] skeletonName,
      [MarshalAs(UnmanagedType.U1)] bool isHumanoid,
      int actionSetIndex,
      byte[] monsterUsageSetName,
      ref AgentVisualsNativeData agentVisualsNativeData);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate NativeObjectPointer CreateSimpleSkeletonDelegate(
      byte[] skeletonName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate NativeObjectPointer CreateWithActionSetDelegate(
      ref AgentVisualsNativeData agentVisualsNativeData,
      ref AnimationSystemData animationSystemData);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetSkeletonFaceAnimationTimeDelegate(UIntPtr entityId);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetSkeletonFaceAnimationTimeDelegate(UIntPtr entityId, float time);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetSkeletonFaceAnimationNameDelegate(UIntPtr entityId);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetBoneEntitialFrameAtAnimationProgressDelegate(
      UIntPtr skeletonPointer,
      sbyte boneIndex,
      int animationIndex,
      float progress,
      ref MatrixFrame outFrame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetBoneEntitialFrameDelegate(
      UIntPtr skeletonPointer,
      sbyte bone,
      [MarshalAs(UnmanagedType.U1)] bool useBoneMapping,
      [MarshalAs(UnmanagedType.U1)] bool forceToUpdate,
      ref MatrixFrame outFrame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAnimationAtChannelDelegate(
      UIntPtr skeletonPointer,
      int animationIndex,
      int channelNo,
      float animationSpeedMultiplier,
      float blendInPeriod,
      float startProgress);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetActionAtChannelDelegate(UIntPtr skeletonPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetFacialAnimationOfChannelDelegate(
      UIntPtr skeletonPointer,
      int channel,
      byte[] facialAnimationName,
      [MarshalAs(UnmanagedType.U1)] bool playSound,
      [MarshalAs(UnmanagedType.U1)] bool loop);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAgentActionChannelDelegate(
      UIntPtr skeletonPointer,
      int actionChannelNo,
      int actionIndex,
      float channelParameter,
      float blendPeriodOverride);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void TickActionChannelsDelegate(UIntPtr skeletonPointer);
  }
}
