// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBWindowManager
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBWindowManager : IMBWindowManager
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBWindowManager.EraseMessageLinesDelegate call_EraseMessageLinesDelegate;
    public static ScriptingInterfaceOfIMBWindowManager.WorldToScreenDelegate call_WorldToScreenDelegate;
    public static ScriptingInterfaceOfIMBWindowManager.WorldToScreenWithFixedZDelegate call_WorldToScreenWithFixedZDelegate;
    public static ScriptingInterfaceOfIMBWindowManager.DontChangeCursorPosDelegate call_DontChangeCursorPosDelegate;
    public static ScriptingInterfaceOfIMBWindowManager.PreDisplayDelegate call_PreDisplayDelegate;
    public static ScriptingInterfaceOfIMBWindowManager.ScreenToWorldDelegate call_ScreenToWorldDelegate;

    public void EraseMessageLines() => ScriptingInterfaceOfIMBWindowManager.call_EraseMessageLinesDelegate();

    public float WorldToScreen(
      UIntPtr cameraPointer,
      Vec3 worldSpacePosition,
      ref float screenX,
      ref float screenY,
      ref float w)
    {
      return ScriptingInterfaceOfIMBWindowManager.call_WorldToScreenDelegate(cameraPointer, worldSpacePosition, ref screenX, ref screenY, ref w);
    }

    public float WorldToScreenWithFixedZ(
      UIntPtr cameraPointer,
      Vec3 cameraPosition,
      Vec3 worldSpacePosition,
      ref float screenX,
      ref float screenY,
      ref float w)
    {
      return ScriptingInterfaceOfIMBWindowManager.call_WorldToScreenWithFixedZDelegate(cameraPointer, cameraPosition, worldSpacePosition, ref screenX, ref screenY, ref w);
    }

    public void DontChangeCursorPos() => ScriptingInterfaceOfIMBWindowManager.call_DontChangeCursorPosDelegate();

    public void PreDisplay() => ScriptingInterfaceOfIMBWindowManager.call_PreDisplayDelegate();

    public void ScreenToWorld(
      UIntPtr pointer,
      float screenX,
      float screenY,
      float z,
      ref Vec3 worldSpacePosition)
    {
      ScriptingInterfaceOfIMBWindowManager.call_ScreenToWorldDelegate(pointer, screenX, screenY, z, ref worldSpacePosition);
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void EraseMessageLinesDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float WorldToScreenDelegate(
      UIntPtr cameraPointer,
      Vec3 worldSpacePosition,
      ref float screenX,
      ref float screenY,
      ref float w);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float WorldToScreenWithFixedZDelegate(
      UIntPtr cameraPointer,
      Vec3 cameraPosition,
      Vec3 worldSpacePosition,
      ref float screenX,
      ref float screenY,
      ref float w);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DontChangeCursorPosDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void PreDisplayDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ScreenToWorldDelegate(
      UIntPtr pointer,
      float screenX,
      float screenY,
      float z,
      ref Vec3 worldSpacePosition);
  }
}
