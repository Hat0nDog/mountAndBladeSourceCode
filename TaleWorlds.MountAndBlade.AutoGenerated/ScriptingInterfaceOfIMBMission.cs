// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBMission
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBMission : IMBMission
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBMission.ClearResourcesDelegate call_ClearResourcesDelegate;
    public static ScriptingInterfaceOfIMBMission.CreateMissionDelegate call_CreateMissionDelegate;
    public static ScriptingInterfaceOfIMBMission.ClearAgentActionsDelegate call_ClearAgentActionsDelegate;
    public static ScriptingInterfaceOfIMBMission.ClearMissilesDelegate call_ClearMissilesDelegate;
    public static ScriptingInterfaceOfIMBMission.ClearCorpsesDelegate call_ClearCorpsesDelegate;
    public static ScriptingInterfaceOfIMBMission.GetTimeSpeedDelegate call_GetTimeSpeedDelegate;
    public static ScriptingInterfaceOfIMBMission.SetTimeSpeedDelegate call_SetTimeSpeedDelegate;
    public static ScriptingInterfaceOfIMBMission.GetTimeSpeedEndDelegate call_GetTimeSpeedEndDelegate;
    public static ScriptingInterfaceOfIMBMission.GetTimeSpeedPeriodDelegate call_GetTimeSpeedPeriodDelegate;
    public static ScriptingInterfaceOfIMBMission.SetTimeSpeedPeriodDelegate call_SetTimeSpeedPeriodDelegate;
    public static ScriptingInterfaceOfIMBMission.GetTimeSpeedTimerElapsedTimeDelegate call_GetTimeSpeedTimerElapsedTimeDelegate;
    public static ScriptingInterfaceOfIMBMission.GetPauseAITickDelegate call_GetPauseAITickDelegate;
    public static ScriptingInterfaceOfIMBMission.SetPauseAITickDelegate call_SetPauseAITickDelegate;
    public static ScriptingInterfaceOfIMBMission.GetClearSceneTimerElapsedTimeDelegate call_GetClearSceneTimerElapsedTimeDelegate;
    public static ScriptingInterfaceOfIMBMission.ResetFirstThirdPersonViewDelegate call_ResetFirstThirdPersonViewDelegate;
    public static ScriptingInterfaceOfIMBMission.SetCameraIsFirstPersonDelegate call_SetCameraIsFirstPersonDelegate;
    public static ScriptingInterfaceOfIMBMission.SetCameraFrameDelegate call_SetCameraFrameDelegate;
    public static ScriptingInterfaceOfIMBMission.GetCameraFrameDelegate call_GetCameraFrameDelegate;
    public static ScriptingInterfaceOfIMBMission.GetIsLoadingFinishedDelegate call_GetIsLoadingFinishedDelegate;
    public static ScriptingInterfaceOfIMBMission.ClearSceneDelegate call_ClearSceneDelegate;
    public static ScriptingInterfaceOfIMBMission.InitializeMissionDelegate call_InitializeMissionDelegate;
    public static ScriptingInterfaceOfIMBMission.FinalizeMissionDelegate call_FinalizeMissionDelegate;
    public static ScriptingInterfaceOfIMBMission.GetTimeDelegate call_GetTimeDelegate;
    public static ScriptingInterfaceOfIMBMission.GetAverageFpsDelegate call_GetAverageFpsDelegate;
    public static ScriptingInterfaceOfIMBMission.GetCombatTypeDelegate call_GetCombatTypeDelegate;
    public static ScriptingInterfaceOfIMBMission.SetCombatTypeDelegate call_SetCombatTypeDelegate;
    public static ScriptingInterfaceOfIMBMission.RayCastForClosestAgentDelegate call_RayCastForClosestAgentDelegate;
    public static ScriptingInterfaceOfIMBMission.RayCastForClosestAgentsLimbsDelegate call_RayCastForClosestAgentsLimbsDelegate;
    public static ScriptingInterfaceOfIMBMission.RayCastForGivenAgentsLimbsDelegate call_RayCastForGivenAgentsLimbsDelegate;
    public static ScriptingInterfaceOfIMBMission.GetNumberOfTeamsDelegate call_GetNumberOfTeamsDelegate;
    public static ScriptingInterfaceOfIMBMission.ResetTeamsDelegate call_ResetTeamsDelegate;
    public static ScriptingInterfaceOfIMBMission.AddTeamDelegate call_AddTeamDelegate;
    public static ScriptingInterfaceOfIMBMission.RestartRecordDelegate call_RestartRecordDelegate;
    public static ScriptingInterfaceOfIMBMission.IsPositionInsideBoundariesDelegate call_IsPositionInsideBoundariesDelegate;
    public static ScriptingInterfaceOfIMBMission.GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate call_GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate;
    public static ScriptingInterfaceOfIMBMission.AddMissileDelegate call_AddMissileDelegate;
    public static ScriptingInterfaceOfIMBMission.GetMissileCollisionPointDelegate call_GetMissileCollisionPointDelegate;
    public static ScriptingInterfaceOfIMBMission.RemoveMissileDelegate call_RemoveMissileDelegate;
    public static ScriptingInterfaceOfIMBMission.GetMissileVerticalAimCorrectionDelegate call_GetMissileVerticalAimCorrectionDelegate;
    public static ScriptingInterfaceOfIMBMission.GetMissileRangeDelegate call_GetMissileRangeDelegate;
    public static ScriptingInterfaceOfIMBMission.PrepareMissileWeaponForDropDelegate call_PrepareMissileWeaponForDropDelegate;
    public static ScriptingInterfaceOfIMBMission.AddParticleSystemBurstByNameDelegate call_AddParticleSystemBurstByNameDelegate;
    public static ScriptingInterfaceOfIMBMission.TickDelegate call_TickDelegate;
    public static ScriptingInterfaceOfIMBMission.MakeSoundDelegate call_MakeSoundDelegate;
    public static ScriptingInterfaceOfIMBMission.MakeSoundWithParameterDelegate call_MakeSoundWithParameterDelegate;
    public static ScriptingInterfaceOfIMBMission.MakeSoundOnlyOnRelatedPeerDelegate call_MakeSoundOnlyOnRelatedPeerDelegate;
    public static ScriptingInterfaceOfIMBMission.AddSoundAlarmFactorToAgentsDelegate call_AddSoundAlarmFactorToAgentsDelegate;
    public static ScriptingInterfaceOfIMBMission.GetEnemyAlarmStateIndicatorDelegate call_GetEnemyAlarmStateIndicatorDelegate;
    public static ScriptingInterfaceOfIMBMission.GetPlayerAlarmIndicatorDelegate call_GetPlayerAlarmIndicatorDelegate;
    public static ScriptingInterfaceOfIMBMission.CreateAgentDelegate call_CreateAgentDelegate;
    public static ScriptingInterfaceOfIMBMission.GetPositionOfMissileDelegate call_GetPositionOfMissileDelegate;
    public static ScriptingInterfaceOfIMBMission.GetVelocityOfMissileDelegate call_GetVelocityOfMissileDelegate;
    public static ScriptingInterfaceOfIMBMission.GetMissileHasRigidBodyDelegate call_GetMissileHasRigidBodyDelegate;
    public static ScriptingInterfaceOfIMBMission.AddBoundaryDelegate call_AddBoundaryDelegate;
    public static ScriptingInterfaceOfIMBMission.RemoveBoundaryDelegate call_RemoveBoundaryDelegate;
    public static ScriptingInterfaceOfIMBMission.GetBoundaryPointsDelegate call_GetBoundaryPointsDelegate;
    public static ScriptingInterfaceOfIMBMission.GetBoundaryCountDelegate call_GetBoundaryCountDelegate;
    public static ScriptingInterfaceOfIMBMission.GetBoundaryRadiusDelegate call_GetBoundaryRadiusDelegate;
    public static ScriptingInterfaceOfIMBMission.GetBoundaryNameDelegate call_GetBoundaryNameDelegate;
    public static ScriptingInterfaceOfIMBMission.GetClosestBoundaryPositionDelegate call_GetClosestBoundaryPositionDelegate;
    public static ScriptingInterfaceOfIMBMission.GetNavigationPointsDelegate call_GetNavigationPointsDelegate;
    public static ScriptingInterfaceOfIMBMission.SetNavigationFaceCostWithIdAroundPositionDelegate call_SetNavigationFaceCostWithIdAroundPositionDelegate;
    public static ScriptingInterfaceOfIMBMission.PauseMissionSceneSoundsDelegate call_PauseMissionSceneSoundsDelegate;
    public static ScriptingInterfaceOfIMBMission.ResumeMissionSceneSoundsDelegate call_ResumeMissionSceneSoundsDelegate;
    public static ScriptingInterfaceOfIMBMission.ProcessRecordUntilTimeDelegate call_ProcessRecordUntilTimeDelegate;
    public static ScriptingInterfaceOfIMBMission.EndOfRecordDelegate call_EndOfRecordDelegate;
    public static ScriptingInterfaceOfIMBMission.StartRecordingDelegate call_StartRecordingDelegate;
    public static ScriptingInterfaceOfIMBMission.RecordCurrentStateDelegate call_RecordCurrentStateDelegate;
    public static ScriptingInterfaceOfIMBMission.BackupRecordToFileDelegate call_BackupRecordToFileDelegate;
    public static ScriptingInterfaceOfIMBMission.RestoreRecordFromFileDelegate call_RestoreRecordFromFileDelegate;
    public static ScriptingInterfaceOfIMBMission.ClearRecordBuffersDelegate call_ClearRecordBuffersDelegate;
    public static ScriptingInterfaceOfIMBMission.GetSceneNameForReplayDelegate call_GetSceneNameForReplayDelegate;
    public static ScriptingInterfaceOfIMBMission.GetGameTypeForReplayDelegate call_GetGameTypeForReplayDelegate;
    public static ScriptingInterfaceOfIMBMission.GetSceneLevelsForReplayDelegate call_GetSceneLevelsForReplayDelegate;
    public static ScriptingInterfaceOfIMBMission.GetAtmosphereNameForReplayDelegate call_GetAtmosphereNameForReplayDelegate;
    public static ScriptingInterfaceOfIMBMission.GetAtmosphereSeasonForReplayDelegate call_GetAtmosphereSeasonForReplayDelegate;
    public static ScriptingInterfaceOfIMBMission.GetClosestEnemyDelegate call_GetClosestEnemyDelegate;
    public static ScriptingInterfaceOfIMBMission.GetClosestAllyDelegate call_GetClosestAllyDelegate;
    public static ScriptingInterfaceOfIMBMission.GetAgentCountAroundPositionDelegate call_GetAgentCountAroundPositionDelegate;
    public static ScriptingInterfaceOfIMBMission.FindAgentWithIndexDelegate call_FindAgentWithIndexDelegate;
    public static ScriptingInterfaceOfIMBMission.SetRandomDecideTimeOfAgentsDelegate call_SetRandomDecideTimeOfAgentsDelegate;
    public static ScriptingInterfaceOfIMBMission.GetAverageMoraleOfAgentsDelegate call_GetAverageMoraleOfAgentsDelegate;
    public static ScriptingInterfaceOfIMBMission.GetBestSlopeTowardsDirectionDelegate call_GetBestSlopeTowardsDirectionDelegate;
    public static ScriptingInterfaceOfIMBMission.GetBestSlopeAngleHeightPosForDefendingDelegate call_GetBestSlopeAngleHeightPosForDefendingDelegate;
    public static ScriptingInterfaceOfIMBMission.GetNearbyAgentsAuxDelegate call_GetNearbyAgentsAuxDelegate;
    public static ScriptingInterfaceOfIMBMission.GetWeightedPointOfEnemiesDelegate call_GetWeightedPointOfEnemiesDelegate;
    public static ScriptingInterfaceOfIMBMission.IsFormationUnitPositionAvailableDelegate call_IsFormationUnitPositionAvailableDelegate;
    public static ScriptingInterfaceOfIMBMission.GetStraightPathToTargetDelegate call_GetStraightPathToTargetDelegate;
    public static ScriptingInterfaceOfIMBMission.SetBowMissileSpeedModifierDelegate call_SetBowMissileSpeedModifierDelegate;
    public static ScriptingInterfaceOfIMBMission.SetCrossbowMissileSpeedModifierDelegate call_SetCrossbowMissileSpeedModifierDelegate;
    public static ScriptingInterfaceOfIMBMission.SetThrowingMissileSpeedModifierDelegate call_SetThrowingMissileSpeedModifierDelegate;
    public static ScriptingInterfaceOfIMBMission.SetMissileRangeModifierDelegate call_SetMissileRangeModifierDelegate;
    public static ScriptingInterfaceOfIMBMission.SetLastMovementKeyPressedDelegate call_SetLastMovementKeyPressedDelegate;
    public static ScriptingInterfaceOfIMBMission.FastForwardMissionDelegate call_FastForwardMissionDelegate;
    public static ScriptingInterfaceOfIMBMission.GetDebugAgentDelegate call_GetDebugAgentDelegate;
    public static ScriptingInterfaceOfIMBMission.SetDebugAgentDelegate call_SetDebugAgentDelegate;
    public static ScriptingInterfaceOfIMBMission.AddAiDebugTextDelegate call_AddAiDebugTextDelegate;
    public static ScriptingInterfaceOfIMBMission.ProximityMapBeginSearchDelegate call_ProximityMapBeginSearchDelegate;
    public static ScriptingInterfaceOfIMBMission.ProximityMapFindNextDelegate call_ProximityMapFindNextDelegate;
    public static ScriptingInterfaceOfIMBMission.ProximityMapMaxSearchRadiusDelegate call_ProximityMapMaxSearchRadiusDelegate;
    public static ScriptingInterfaceOfIMBMission.GetBiggestAgentCollisionPaddingDelegate call_GetBiggestAgentCollisionPaddingDelegate;
    public static ScriptingInterfaceOfIMBMission.SetReportStuckAgentsModeDelegate call_SetReportStuckAgentsModeDelegate;
    public static ScriptingInterfaceOfIMBMission.BatchFormationUnitPositionsDelegate call_BatchFormationUnitPositionsDelegate;
    public static ScriptingInterfaceOfIMBMission.ToggleDisableFallAvoidDelegate call_ToggleDisableFallAvoidDelegate;

    public void ClearResources(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ClearResourcesDelegate(missionPointer);

    public UIntPtr CreateMission(Mission mission) => ScriptingInterfaceOfIMBMission.call_CreateMissionDelegate(mission != null ? mission.GetManagedId() : 0);

    public void ClearAgentActions(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ClearAgentActionsDelegate(missionPointer);

    public void ClearMissiles(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ClearMissilesDelegate(missionPointer);

    public void ClearCorpses(UIntPtr missionPointer, bool isMissionReset) => ScriptingInterfaceOfIMBMission.call_ClearCorpsesDelegate(missionPointer, isMissionReset);

    public float GetTimeSpeed(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetTimeSpeedDelegate(missionPointer);

    public void SetTimeSpeed(UIntPtr missionPointer, float value) => ScriptingInterfaceOfIMBMission.call_SetTimeSpeedDelegate(missionPointer, value);

    public float GetTimeSpeedEnd(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetTimeSpeedEndDelegate(missionPointer);

    public float GetTimeSpeedPeriod(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetTimeSpeedPeriodDelegate(missionPointer);

    public void SetTimeSpeedPeriod(UIntPtr missionPointer, float value) => ScriptingInterfaceOfIMBMission.call_SetTimeSpeedPeriodDelegate(missionPointer, value);

    public float GetTimeSpeedTimerElapsedTime(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetTimeSpeedTimerElapsedTimeDelegate(missionPointer);

    public bool GetPauseAITick(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetPauseAITickDelegate(missionPointer);

    public void SetPauseAITick(UIntPtr missionPointer, bool I) => ScriptingInterfaceOfIMBMission.call_SetPauseAITickDelegate(missionPointer, I);

    public float GetClearSceneTimerElapsedTime(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetClearSceneTimerElapsedTimeDelegate(missionPointer);

    public void ResetFirstThirdPersonView(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ResetFirstThirdPersonViewDelegate(missionPointer);

    public void SetCameraIsFirstPerson(bool value) => ScriptingInterfaceOfIMBMission.call_SetCameraIsFirstPersonDelegate(value);

    public void SetCameraFrame(
      UIntPtr missionPointer,
      ref MatrixFrame cameraFrame,
      float zoomFactor)
    {
      ScriptingInterfaceOfIMBMission.call_SetCameraFrameDelegate(missionPointer, ref cameraFrame, zoomFactor);
    }

    public MatrixFrame GetCameraFrame(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetCameraFrameDelegate(missionPointer);

    public bool GetIsLoadingFinished(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetIsLoadingFinishedDelegate(missionPointer);

    public void ClearScene(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ClearSceneDelegate(missionPointer);

    public void InitializeMission(UIntPtr missionPointer, ref MissionInitializerRecord rec) => ScriptingInterfaceOfIMBMission.call_InitializeMissionDelegate(missionPointer, ref rec);

    public void FinalizeMission(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_FinalizeMissionDelegate(missionPointer);

    public float GetTime(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetTimeDelegate(missionPointer);

    public float GetAverageFps(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetAverageFpsDelegate(missionPointer);

    public int GetCombatType(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetCombatTypeDelegate(missionPointer);

    public void SetCombatType(UIntPtr missionPointer, int combatType) => ScriptingInterfaceOfIMBMission.call_SetCombatTypeDelegate(missionPointer, combatType);

    public Agent RayCastForClosestAgent(
      UIntPtr missionPointer,
      Vec3 SourcePoint,
      Vec3 RayFinishPoint,
      int ExcludeAgentIndex,
      ref float CollisionDistance,
      float RayThickness)
    {
      return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_RayCastForClosestAgentDelegate(missionPointer, SourcePoint, RayFinishPoint, ExcludeAgentIndex, ref CollisionDistance, RayThickness)) as Agent;
    }

    public bool RayCastForClosestAgentsLimbs(
      UIntPtr missionPointer,
      Vec3 SourcePoint,
      Vec3 RayFinishPoint,
      int ExcludeAgentIndex,
      ref float CollisionDistance,
      ref int AgentIndex,
      ref sbyte BoneIndex)
    {
      return ScriptingInterfaceOfIMBMission.call_RayCastForClosestAgentsLimbsDelegate(missionPointer, SourcePoint, RayFinishPoint, ExcludeAgentIndex, ref CollisionDistance, ref AgentIndex, ref BoneIndex);
    }

    public bool RayCastForGivenAgentsLimbs(
      UIntPtr missionPointer,
      Vec3 SourcePoint,
      Vec3 RayFinishPoint,
      int GivenAgentIndex,
      ref float CollisionDistance,
      ref sbyte BoneIndex)
    {
      return ScriptingInterfaceOfIMBMission.call_RayCastForGivenAgentsLimbsDelegate(missionPointer, SourcePoint, RayFinishPoint, GivenAgentIndex, ref CollisionDistance, ref BoneIndex);
    }

    public int GetNumberOfTeams(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetNumberOfTeamsDelegate(missionPointer);

    public void ResetTeams(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ResetTeamsDelegate(missionPointer);

    public int AddTeam(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_AddTeamDelegate(missionPointer);

    public void RestartRecord(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_RestartRecordDelegate(missionPointer);

    public bool IsPositionInsideBoundaries(UIntPtr missionPointer, Vec2 position) => ScriptingInterfaceOfIMBMission.call_IsPositionInsideBoundariesDelegate(missionPointer, position);

    public WorldPosition GetAlternatePositionForNavmeshlessOrOutOfBoundsPosition(
      UIntPtr ptr,
      ref Vec2 directionTowards,
      ref WorldPosition originalPosition,
      ref float positionPenalty)
    {
      return ScriptingInterfaceOfIMBMission.call_GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate(ptr, ref directionTowards, ref originalPosition, ref positionPenalty);
    }

    public int AddMissile(
      UIntPtr missionPointer,
      bool isPrediction,
      int shooterAgentIndex,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      float damageBonus,
      ref Vec3 position,
      ref Vec3 direction,
      ref Mat3 orientation,
      float baseSpeed,
      float speed,
      bool addRigidBody,
      UIntPtr entityPointer,
      int forcedMissileIndex,
      bool isPrimaryWeaponShot,
      out UIntPtr missileEntity)
    {
      WeaponDataAsNative weaponData1 = new WeaponDataAsNative(weaponData);
      PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
      IntPtr pointer = pinnedArrayData.Pointer;
      int num = ScriptingInterfaceOfIMBMission.call_AddMissileDelegate(missionPointer, isPrediction, shooterAgentIndex, in weaponData1, pointer, weaponStatsDataLength, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
      pinnedArrayData.Dispose();
      return num;
    }

    public Vec3 GetMissileCollisionPoint(
      UIntPtr missionPointer,
      Vec3 missileStartingPosition,
      Vec3 missileDirection,
      float missileStartingSpeed,
      in WeaponData weaponData)
    {
      WeaponDataAsNative weaponData1 = new WeaponDataAsNative(weaponData);
      return ScriptingInterfaceOfIMBMission.call_GetMissileCollisionPointDelegate(missionPointer, missileStartingPosition, missileDirection, missileStartingSpeed, in weaponData1);
    }

    public void RemoveMissile(UIntPtr missionPointer, int missileIndex) => ScriptingInterfaceOfIMBMission.call_RemoveMissileDelegate(missionPointer, missileIndex);

    public float GetMissileVerticalAimCorrection(
      Vec3 vecToTarget,
      float missileStartingSpeed,
      ref WeaponStatsData weaponStatsData,
      float airFrictionConstant)
    {
      return ScriptingInterfaceOfIMBMission.call_GetMissileVerticalAimCorrectionDelegate(vecToTarget, missileStartingSpeed, ref weaponStatsData, airFrictionConstant);
    }

    public float GetMissileRange(float missileStartingSpeed, float heightDifference) => ScriptingInterfaceOfIMBMission.call_GetMissileRangeDelegate(missileStartingSpeed, heightDifference);

    public void PrepareMissileWeaponForDrop(UIntPtr missionPointer, int missileIndex) => ScriptingInterfaceOfIMBMission.call_PrepareMissileWeaponForDropDelegate(missionPointer, missileIndex);

    public void AddParticleSystemBurstByName(
      UIntPtr missionPointer,
      string particleSystem,
      ref MatrixFrame frame,
      bool synchThroughNetwork)
    {
      byte[] numArray = (byte[]) null;
      if (particleSystem != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(particleSystem, 0, particleSystem.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBMission.call_AddParticleSystemBurstByNameDelegate(missionPointer, numArray, ref frame, synchThroughNetwork);
    }

    public void Tick(UIntPtr missionPointer, float dt) => ScriptingInterfaceOfIMBMission.call_TickDelegate(missionPointer, dt);

    public void MakeSound(
      UIntPtr pointer,
      int nativeSoundCode,
      Vec3 position,
      bool soundCanBePredicted,
      bool isReliable,
      int relatedAgent1,
      int relatedAgent2)
    {
      ScriptingInterfaceOfIMBMission.call_MakeSoundDelegate(pointer, nativeSoundCode, position, soundCanBePredicted, isReliable, relatedAgent1, relatedAgent2);
    }

    public void MakeSoundWithParameter(
      UIntPtr pointer,
      int nativeSoundCode,
      Vec3 position,
      bool soundCanBePredicted,
      bool isReliable,
      int relatedAgent1,
      int relatedAgent2,
      SoundEventParameter parameter)
    {
      ScriptingInterfaceOfIMBMission.call_MakeSoundWithParameterDelegate(pointer, nativeSoundCode, position, soundCanBePredicted, isReliable, relatedAgent1, relatedAgent2, parameter);
    }

    public void MakeSoundOnlyOnRelatedPeer(
      UIntPtr pointer,
      int nativeSoundCode,
      Vec3 position,
      int relatedAgent)
    {
      ScriptingInterfaceOfIMBMission.call_MakeSoundOnlyOnRelatedPeerDelegate(pointer, nativeSoundCode, position, relatedAgent);
    }

    public void AddSoundAlarmFactorToAgents(
      UIntPtr pointer,
      int ownerId,
      Vec3 position,
      float alarmFactor)
    {
      ScriptingInterfaceOfIMBMission.call_AddSoundAlarmFactorToAgentsDelegate(pointer, ownerId, position, alarmFactor);
    }

    public int GetEnemyAlarmStateIndicator(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetEnemyAlarmStateIndicatorDelegate(missionPointer);

    public float GetPlayerAlarmIndicator(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetPlayerAlarmIndicatorDelegate(missionPointer);

    public Mission.AgentCreationResult CreateAgent(
      UIntPtr missionPointer,
      ulong monsterFlag,
      int forcedAgentIndex,
      bool isFemale,
      ref AgentSpawnData spawnData,
      ref CapsuleData bodyCapsule,
      ref CapsuleData crouchedBodyCapsule,
      ref AgentVisualsNativeData agentVisualsNativeData,
      ref AnimationSystemData animationSystemData,
      int instanceNo)
    {
      return ScriptingInterfaceOfIMBMission.call_CreateAgentDelegate(missionPointer, monsterFlag, forcedAgentIndex, isFemale, ref spawnData, ref bodyCapsule, ref crouchedBodyCapsule, ref agentVisualsNativeData, ref animationSystemData, instanceNo);
    }

    public Vec3 GetPositionOfMissile(UIntPtr missionPointer, int index) => ScriptingInterfaceOfIMBMission.call_GetPositionOfMissileDelegate(missionPointer, index);

    public Vec3 GetVelocityOfMissile(UIntPtr missionPointer, int index) => ScriptingInterfaceOfIMBMission.call_GetVelocityOfMissileDelegate(missionPointer, index);

    public bool GetMissileHasRigidBody(UIntPtr missionPointer, int index) => ScriptingInterfaceOfIMBMission.call_GetMissileHasRigidBodyDelegate(missionPointer, index);

    public bool AddBoundary(
      UIntPtr missionPointer,
      string name,
      Vec2[] boundaryPoints,
      int boundaryPointCount,
      bool isAllowanceInside)
    {
      byte[] numArray = (byte[]) null;
      if (name != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints);
      IntPtr pointer = pinnedArrayData.Pointer;
      int num = ScriptingInterfaceOfIMBMission.call_AddBoundaryDelegate(missionPointer, numArray, pointer, boundaryPointCount, isAllowanceInside) ? 1 : 0;
      pinnedArrayData.Dispose();
      return num != 0;
    }

    public bool RemoveBoundary(UIntPtr missionPointer, string name)
    {
      byte[] numArray = (byte[]) null;
      if (name != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBMission.call_RemoveBoundaryDelegate(missionPointer, numArray);
    }

    public void GetBoundaryPoints(
      UIntPtr missionPointer,
      string name,
      int boundaryPointOffset,
      Vec2[] boundaryPoints,
      int boundaryPointsSize,
      ref int retrievedPointCount)
    {
      byte[] numArray = (byte[]) null;
      if (name != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBMission.call_GetBoundaryPointsDelegate(missionPointer, numArray, boundaryPointOffset, pointer, boundaryPointsSize, ref retrievedPointCount);
      pinnedArrayData.Dispose();
    }

    public int GetBoundaryCount(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetBoundaryCountDelegate(missionPointer);

    public float GetBoundaryRadius(UIntPtr missionPointer, string name)
    {
      byte[] numArray = (byte[]) null;
      if (name != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBMission.call_GetBoundaryRadiusDelegate(missionPointer, numArray);
    }

    public string GetBoundaryName(UIntPtr missionPointer, int boundaryIndex) => ScriptingInterfaceOfIMBMission.call_GetBoundaryNameDelegate(missionPointer, boundaryIndex) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public Vec2 GetClosestBoundaryPosition(UIntPtr missionPointer, Vec2 position) => ScriptingInterfaceOfIMBMission.call_GetClosestBoundaryPositionDelegate(missionPointer, position);

    public bool GetNavigationPoints(UIntPtr missionPointer, ref NavigationData navigationData) => ScriptingInterfaceOfIMBMission.call_GetNavigationPointsDelegate(missionPointer, ref navigationData);

    public void SetNavigationFaceCostWithIdAroundPosition(
      UIntPtr missionPointer,
      int navigationFaceId,
      Vec3 position,
      float cost)
    {
      ScriptingInterfaceOfIMBMission.call_SetNavigationFaceCostWithIdAroundPositionDelegate(missionPointer, navigationFaceId, position, cost);
    }

    public void PauseMissionSceneSounds(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_PauseMissionSceneSoundsDelegate(missionPointer);

    public void ResumeMissionSceneSounds(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ResumeMissionSceneSoundsDelegate(missionPointer);

    public void ProcessRecordUntilTime(UIntPtr missionPointer, float time) => ScriptingInterfaceOfIMBMission.call_ProcessRecordUntilTimeDelegate(missionPointer, time);

    public bool EndOfRecord(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_EndOfRecordDelegate(missionPointer);

    public void StartRecording() => ScriptingInterfaceOfIMBMission.call_StartRecordingDelegate();

    public void RecordCurrentState(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_RecordCurrentStateDelegate(missionPointer);

    public void BackupRecordToFile(
      UIntPtr missionPointer,
      string fileName,
      string gameType,
      string sceneLevels)
    {
      byte[] numArray1 = (byte[]) null;
      if (fileName != null)
      {
        numArray1 = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(fileName, 0, fileName.Length, numArray1, 0);
        numArray1[bytes] = (byte) 0;
      }
      byte[] numArray2 = (byte[]) null;
      if (gameType != null)
      {
        numArray2 = CallbackStringBufferManager.StringBuffer1;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(gameType, 0, gameType.Length, numArray2, 0);
        numArray2[bytes] = (byte) 0;
      }
      byte[] numArray3 = (byte[]) null;
      if (sceneLevels != null)
      {
        numArray3 = CallbackStringBufferManager.StringBuffer2;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(sceneLevels, 0, sceneLevels.Length, numArray3, 0);
        numArray3[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBMission.call_BackupRecordToFileDelegate(missionPointer, numArray1, numArray2, numArray3);
    }

    public void RestoreRecordFromFile(UIntPtr missionPointer, string fileName)
    {
      byte[] numArray = (byte[]) null;
      if (fileName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(fileName, 0, fileName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBMission.call_RestoreRecordFromFileDelegate(missionPointer, numArray);
    }

    public void ClearRecordBuffers(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ClearRecordBuffersDelegate(missionPointer);

    public string GetSceneNameForReplay(string replayName)
    {
      byte[] numArray = (byte[]) null;
      if (replayName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(replayName, 0, replayName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBMission.call_GetSceneNameForReplayDelegate(numArray) != 1 ? (string) null : Managed.ReturnValueFromEngine;
    }

    public string GetGameTypeForReplay(string replayName)
    {
      byte[] numArray = (byte[]) null;
      if (replayName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(replayName, 0, replayName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBMission.call_GetGameTypeForReplayDelegate(numArray) != 1 ? (string) null : Managed.ReturnValueFromEngine;
    }

    public string GetSceneLevelsForReplay(string replayName)
    {
      byte[] numArray = (byte[]) null;
      if (replayName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(replayName, 0, replayName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBMission.call_GetSceneLevelsForReplayDelegate(numArray) != 1 ? (string) null : Managed.ReturnValueFromEngine;
    }

    public string GetAtmosphereNameForReplay(string replayName)
    {
      byte[] numArray = (byte[]) null;
      if (replayName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(replayName, 0, replayName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBMission.call_GetAtmosphereNameForReplayDelegate(numArray) != 1 ? (string) null : Managed.ReturnValueFromEngine;
    }

    public int GetAtmosphereSeasonForReplay(string replayName)
    {
      byte[] numArray = (byte[]) null;
      if (replayName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(replayName, 0, replayName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBMission.call_GetAtmosphereSeasonForReplayDelegate(numArray);
    }

    public Agent GetClosestEnemy(
      UIntPtr missionPointer,
      int teamIndex,
      Vec3 position,
      float radius)
    {
      return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_GetClosestEnemyDelegate(missionPointer, teamIndex, position, radius)) as Agent;
    }

    public Agent GetClosestAlly(
      UIntPtr missionPointer,
      int teamIndex,
      Vec3 position,
      float radius)
    {
      return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_GetClosestAllyDelegate(missionPointer, teamIndex, position, radius)) as Agent;
    }

    public void GetAgentCountAroundPosition(
      UIntPtr missionPointer,
      int teamIndex,
      Vec2 position,
      float radius,
      ref int allyCount,
      ref int enemyCount)
    {
      ScriptingInterfaceOfIMBMission.call_GetAgentCountAroundPositionDelegate(missionPointer, teamIndex, position, radius, ref allyCount, ref enemyCount);
    }

    public Agent FindAgentWithIndex(UIntPtr missionPointer, int index) => DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_FindAgentWithIndexDelegate(missionPointer, index)) as Agent;

    public void SetRandomDecideTimeOfAgents(
      UIntPtr missionPointer,
      int agentCount,
      int[] agentIndices,
      float minAIReactionTime,
      float maxAIReactionTime)
    {
      PinnedArrayData<int> pinnedArrayData = new PinnedArrayData<int>(agentIndices);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBMission.call_SetRandomDecideTimeOfAgentsDelegate(missionPointer, agentCount, pointer, minAIReactionTime, maxAIReactionTime);
      pinnedArrayData.Dispose();
    }

    public float GetAverageMoraleOfAgents(
      UIntPtr missionPointer,
      int agentCount,
      int[] agentIndices)
    {
      PinnedArrayData<int> pinnedArrayData = new PinnedArrayData<int>(agentIndices);
      IntPtr pointer = pinnedArrayData.Pointer;
      double num = (double) ScriptingInterfaceOfIMBMission.call_GetAverageMoraleOfAgentsDelegate(missionPointer, agentCount, pointer);
      pinnedArrayData.Dispose();
      return (float) num;
    }

    public WorldPosition GetBestSlopeTowardsDirection(
      UIntPtr missionPointer,
      ref WorldPosition centerPosition,
      float halfsize,
      ref WorldPosition referencePosition)
    {
      return ScriptingInterfaceOfIMBMission.call_GetBestSlopeTowardsDirectionDelegate(missionPointer, ref centerPosition, halfsize, ref referencePosition);
    }

    public WorldPosition GetBestSlopeAngleHeightPosForDefending(
      UIntPtr missionPointer,
      WorldPosition enemyPosition,
      WorldPosition defendingPosition,
      int sampleSize,
      float distanceRatioAllowedFromDefendedPos,
      float distanceSqrdAllowedFromBoundary,
      float cosinusOfBestSlope,
      float cosinusOfMaxAcceptedSlope,
      float minSlopeScore,
      float maxSlopeScore,
      float excessiveSlopePenalty,
      float nearConeCenterRatio,
      float nearConeCenterBonus,
      float heightDifferenceCeiling,
      float maxDisplacementPenalty)
    {
      return ScriptingInterfaceOfIMBMission.call_GetBestSlopeAngleHeightPosForDefendingDelegate(missionPointer, enemyPosition, defendingPosition, sampleSize, distanceRatioAllowedFromDefendedPos, distanceSqrdAllowedFromBoundary, cosinusOfBestSlope, cosinusOfMaxAcceptedSlope, minSlopeScore, maxSlopeScore, excessiveSlopePenalty, nearConeCenterRatio, nearConeCenterBonus, heightDifferenceCeiling, maxDisplacementPenalty);
    }

    public void GetNearbyAgentsAux(
      UIntPtr missionPointer,
      Vec2 center,
      float radius,
      int teamIndex,
      int friendOrEnemyOrAll,
      int agentsArrayOffset,
      int[] agentIds,
      int agentsArraySize,
      ref int retrievedAgentCount)
    {
      PinnedArrayData<int> pinnedArrayData = new PinnedArrayData<int>(agentIds);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBMission.call_GetNearbyAgentsAuxDelegate(missionPointer, center, radius, teamIndex, friendOrEnemyOrAll, agentsArrayOffset, pointer, agentsArraySize, ref retrievedAgentCount);
      pinnedArrayData.Dispose();
    }

    public Vec2 GetWeightedPointOfEnemies(
      UIntPtr missionPointer,
      int agentIndex,
      Vec2 basePoint)
    {
      return ScriptingInterfaceOfIMBMission.call_GetWeightedPointOfEnemiesDelegate(missionPointer, agentIndex, basePoint);
    }

    public bool IsFormationUnitPositionAvailable(
      UIntPtr missionPointer,
      ref WorldPosition orderPosition,
      ref WorldPosition unitPosition,
      ref WorldPosition neareastAvailableUnitPosition,
      float manhattanDistance)
    {
      return ScriptingInterfaceOfIMBMission.call_IsFormationUnitPositionAvailableDelegate(missionPointer, ref orderPosition, ref unitPosition, ref neareastAvailableUnitPosition, manhattanDistance);
    }

    public WorldPosition GetStraightPathToTarget(
      UIntPtr scenePointer,
      Vec2 targetPosition,
      WorldPosition startingPosition,
      float samplingDistance,
      bool stopAtObstacle)
    {
      return ScriptingInterfaceOfIMBMission.call_GetStraightPathToTargetDelegate(scenePointer, targetPosition, startingPosition, samplingDistance, stopAtObstacle);
    }

    public void SetBowMissileSpeedModifier(UIntPtr missionPointer, float modifier) => ScriptingInterfaceOfIMBMission.call_SetBowMissileSpeedModifierDelegate(missionPointer, modifier);

    public void SetCrossbowMissileSpeedModifier(UIntPtr missionPointer, float modifier) => ScriptingInterfaceOfIMBMission.call_SetCrossbowMissileSpeedModifierDelegate(missionPointer, modifier);

    public void SetThrowingMissileSpeedModifier(UIntPtr missionPointer, float modifier) => ScriptingInterfaceOfIMBMission.call_SetThrowingMissileSpeedModifierDelegate(missionPointer, modifier);

    public void SetMissileRangeModifier(UIntPtr missionPointer, float modifier) => ScriptingInterfaceOfIMBMission.call_SetMissileRangeModifierDelegate(missionPointer, modifier);

    public void SetLastMovementKeyPressed(
      UIntPtr missionPointer,
      Agent.MovementControlFlag lastMovementKeyPressed)
    {
      ScriptingInterfaceOfIMBMission.call_SetLastMovementKeyPressedDelegate(missionPointer, lastMovementKeyPressed);
    }

    public void FastForwardMission(UIntPtr missionPointer, float startTime, float endTime) => ScriptingInterfaceOfIMBMission.call_FastForwardMissionDelegate(missionPointer, startTime, endTime);

    public int GetDebugAgent(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetDebugAgentDelegate(missionPointer);

    public void SetDebugAgent(UIntPtr missionPointer, int index) => ScriptingInterfaceOfIMBMission.call_SetDebugAgentDelegate(missionPointer, index);

    public void AddAiDebugText(UIntPtr missionPointer, string text)
    {
      byte[] numArray = (byte[]) null;
      if (text != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBMission._utf8.GetBytes(text, 0, text.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBMission.call_AddAiDebugTextDelegate(missionPointer, numArray);
    }

    public AgentProximityMap.ProximityMapSearchStructInternal ProximityMapBeginSearch(
      UIntPtr missionPointer,
      Vec2 searchPos,
      float searchRadius)
    {
      return ScriptingInterfaceOfIMBMission.call_ProximityMapBeginSearchDelegate(missionPointer, searchPos, searchRadius);
    }

    public void ProximityMapFindNext(
      UIntPtr missionPointer,
      ref AgentProximityMap.ProximityMapSearchStructInternal searchStruct)
    {
      ScriptingInterfaceOfIMBMission.call_ProximityMapFindNextDelegate(missionPointer, ref searchStruct);
    }

    public float ProximityMapMaxSearchRadius(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_ProximityMapMaxSearchRadiusDelegate(missionPointer);

    public float GetBiggestAgentCollisionPadding(UIntPtr missionPointer) => ScriptingInterfaceOfIMBMission.call_GetBiggestAgentCollisionPaddingDelegate(missionPointer);

    public void SetReportStuckAgentsMode(UIntPtr missionPointer, bool value) => ScriptingInterfaceOfIMBMission.call_SetReportStuckAgentsModeDelegate(missionPointer, value);

    public void BatchFormationUnitPositions(
      UIntPtr missionPointer,
      Vec2i[] orderedPositionIndices,
      Vec2[] orderedLocalPositions,
      int[] availabilityTable,
      WorldPosition[] globalPositionTable,
      WorldPosition orderPosition,
      Vec2 direction,
      int fileCount,
      int rankCount)
    {
      PinnedArrayData<Vec2i> pinnedArrayData1 = new PinnedArrayData<Vec2i>(orderedPositionIndices);
      IntPtr pointer1 = pinnedArrayData1.Pointer;
      PinnedArrayData<Vec2> pinnedArrayData2 = new PinnedArrayData<Vec2>(orderedLocalPositions);
      IntPtr pointer2 = pinnedArrayData2.Pointer;
      PinnedArrayData<int> pinnedArrayData3 = new PinnedArrayData<int>(availabilityTable);
      IntPtr pointer3 = pinnedArrayData3.Pointer;
      PinnedArrayData<WorldPosition> pinnedArrayData4 = new PinnedArrayData<WorldPosition>(globalPositionTable);
      IntPtr pointer4 = pinnedArrayData4.Pointer;
      ScriptingInterfaceOfIMBMission.call_BatchFormationUnitPositionsDelegate(missionPointer, pointer1, pointer2, pointer3, pointer4, orderPosition, direction, fileCount, rankCount);
      pinnedArrayData1.Dispose();
      pinnedArrayData2.Dispose();
      pinnedArrayData3.Dispose();
      pinnedArrayData4.Dispose();
    }

    public bool ToggleDisableFallAvoid() => ScriptingInterfaceOfIMBMission.call_ToggleDisableFallAvoidDelegate();

    int IMBMission.AddMissile(
      UIntPtr missionPointer,
      bool isPrediction,
      int shooterAgentIndex,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      float damageBonus,
      ref Vec3 position,
      ref Vec3 direction,
      ref Mat3 orientation,
      float baseSpeed,
      float speed,
      bool addRigidBody,
      UIntPtr entityPointer,
      int forcedMissileIndex,
      bool isPrimaryWeaponShot,
      out UIntPtr missileEntity)
    {
      return this.AddMissile(missionPointer, isPrediction, shooterAgentIndex, in weaponData, weaponStatsData, weaponStatsDataLength, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
    }

    Vec3 IMBMission.GetMissileCollisionPoint(
      UIntPtr missionPointer,
      Vec3 missileStartingPosition,
      Vec3 missileDirection,
      float missileStartingSpeed,
      in WeaponData weaponData)
    {
      return this.GetMissileCollisionPoint(missionPointer, missileStartingPosition, missileDirection, missileStartingSpeed, in weaponData);
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearResourcesDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate UIntPtr CreateMissionDelegate(int mission);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearAgentActionsDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearMissilesDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearCorpsesDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool isMissionReset);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTimeSpeedDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetTimeSpeedDelegate(UIntPtr missionPointer, float value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTimeSpeedEndDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTimeSpeedPeriodDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetTimeSpeedPeriodDelegate(UIntPtr missionPointer, float value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTimeSpeedTimerElapsedTimeDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetPauseAITickDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetPauseAITickDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool I);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetClearSceneTimerElapsedTimeDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ResetFirstThirdPersonViewDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCameraIsFirstPersonDelegate([MarshalAs(UnmanagedType.U1)] bool value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCameraFrameDelegate(
      UIntPtr missionPointer,
      ref MatrixFrame cameraFrame,
      float zoomFactor);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate MatrixFrame GetCameraFrameDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetIsLoadingFinishedDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearSceneDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void InitializeMissionDelegate(
      UIntPtr missionPointer,
      ref MissionInitializerRecord rec);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void FinalizeMissionDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTimeDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAverageFpsDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetCombatTypeDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCombatTypeDelegate(UIntPtr missionPointer, int combatType);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int RayCastForClosestAgentDelegate(
      UIntPtr missionPointer,
      Vec3 SourcePoint,
      Vec3 RayFinishPoint,
      int ExcludeAgentIndex,
      ref float CollisionDistance,
      float RayThickness);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool RayCastForClosestAgentsLimbsDelegate(
      UIntPtr missionPointer,
      Vec3 SourcePoint,
      Vec3 RayFinishPoint,
      int ExcludeAgentIndex,
      ref float CollisionDistance,
      ref int AgentIndex,
      ref sbyte BoneIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool RayCastForGivenAgentsLimbsDelegate(
      UIntPtr missionPointer,
      Vec3 SourcePoint,
      Vec3 RayFinishPoint,
      int GivenAgentIndex,
      ref float CollisionDistance,
      ref sbyte BoneIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetNumberOfTeamsDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ResetTeamsDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int AddTeamDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void RestartRecordDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsPositionInsideBoundariesDelegate(UIntPtr missionPointer, Vec2 position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate WorldPosition GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate(
      UIntPtr ptr,
      ref Vec2 directionTowards,
      ref WorldPosition originalPosition,
      ref float positionPenalty);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int AddMissileDelegate(
      UIntPtr missionPointer,
      [MarshalAs(UnmanagedType.U1)] bool isPrediction,
      int shooterAgentIndex,
      in WeaponDataAsNative weaponData,
      IntPtr weaponStatsData,
      int weaponStatsDataLength,
      float damageBonus,
      ref Vec3 position,
      ref Vec3 direction,
      ref Mat3 orientation,
      float baseSpeed,
      float speed,
      [MarshalAs(UnmanagedType.U1)] bool addRigidBody,
      UIntPtr entityPointer,
      int forcedMissileIndex,
      [MarshalAs(UnmanagedType.U1)] bool isPrimaryWeaponShot,
      out UIntPtr missileEntity);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetMissileCollisionPointDelegate(
      UIntPtr missionPointer,
      Vec3 missileStartingPosition,
      Vec3 missileDirection,
      float missileStartingSpeed,
      in WeaponDataAsNative weaponData);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void RemoveMissileDelegate(UIntPtr missionPointer, int missileIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetMissileVerticalAimCorrectionDelegate(
      Vec3 vecToTarget,
      float missileStartingSpeed,
      ref WeaponStatsData weaponStatsData,
      float airFrictionConstant);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetMissileRangeDelegate(
      float missileStartingSpeed,
      float heightDifference);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void PrepareMissileWeaponForDropDelegate(
      UIntPtr missionPointer,
      int missileIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AddParticleSystemBurstByNameDelegate(
      UIntPtr missionPointer,
      byte[] particleSystem,
      ref MatrixFrame frame,
      [MarshalAs(UnmanagedType.U1)] bool synchThroughNetwork);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void TickDelegate(UIntPtr missionPointer, float dt);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void MakeSoundDelegate(
      UIntPtr pointer,
      int nativeSoundCode,
      Vec3 position,
      [MarshalAs(UnmanagedType.U1)] bool soundCanBePredicted,
      [MarshalAs(UnmanagedType.U1)] bool isReliable,
      int relatedAgent1,
      int relatedAgent2);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void MakeSoundWithParameterDelegate(
      UIntPtr pointer,
      int nativeSoundCode,
      Vec3 position,
      [MarshalAs(UnmanagedType.U1)] bool soundCanBePredicted,
      [MarshalAs(UnmanagedType.U1)] bool isReliable,
      int relatedAgent1,
      int relatedAgent2,
      SoundEventParameter parameter);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void MakeSoundOnlyOnRelatedPeerDelegate(
      UIntPtr pointer,
      int nativeSoundCode,
      Vec3 position,
      int relatedAgent);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AddSoundAlarmFactorToAgentsDelegate(
      UIntPtr pointer,
      int ownerId,
      Vec3 position,
      float alarmFactor);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetEnemyAlarmStateIndicatorDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetPlayerAlarmIndicatorDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Mission.AgentCreationResult CreateAgentDelegate(
      UIntPtr missionPointer,
      ulong monsterFlag,
      int forcedAgentIndex,
      [MarshalAs(UnmanagedType.U1)] bool isFemale,
      ref AgentSpawnData spawnData,
      ref CapsuleData bodyCapsule,
      ref CapsuleData crouchedBodyCapsule,
      ref AgentVisualsNativeData agentVisualsNativeData,
      ref AnimationSystemData animationSystemData,
      int instanceNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetPositionOfMissileDelegate(UIntPtr missionPointer, int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetVelocityOfMissileDelegate(UIntPtr missionPointer, int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetMissileHasRigidBodyDelegate(UIntPtr missionPointer, int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool AddBoundaryDelegate(
      UIntPtr missionPointer,
      byte[] name,
      IntPtr boundaryPoints,
      int boundaryPointCount,
      [MarshalAs(UnmanagedType.U1)] bool isAllowanceInside);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool RemoveBoundaryDelegate(UIntPtr missionPointer, byte[] name);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetBoundaryPointsDelegate(
      UIntPtr missionPointer,
      byte[] name,
      int boundaryPointOffset,
      IntPtr boundaryPoints,
      int boundaryPointsSize,
      ref int retrievedPointCount);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetBoundaryCountDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetBoundaryRadiusDelegate(UIntPtr missionPointer, byte[] name);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetBoundaryNameDelegate(UIntPtr missionPointer, int boundaryIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec2 GetClosestBoundaryPositionDelegate(
      UIntPtr missionPointer,
      Vec2 position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetNavigationPointsDelegate(
      UIntPtr missionPointer,
      ref NavigationData navigationData);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetNavigationFaceCostWithIdAroundPositionDelegate(
      UIntPtr missionPointer,
      int navigationFaceId,
      Vec3 position,
      float cost);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void PauseMissionSceneSoundsDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ResumeMissionSceneSoundsDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ProcessRecordUntilTimeDelegate(UIntPtr missionPointer, float time);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool EndOfRecordDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void StartRecordingDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void RecordCurrentStateDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void BackupRecordToFileDelegate(
      UIntPtr missionPointer,
      byte[] fileName,
      byte[] gameType,
      byte[] sceneLevels);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void RestoreRecordFromFileDelegate(UIntPtr missionPointer, byte[] fileName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearRecordBuffersDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetSceneNameForReplayDelegate(byte[] replayName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetGameTypeForReplayDelegate(byte[] replayName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetSceneLevelsForReplayDelegate(byte[] replayName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetAtmosphereNameForReplayDelegate(byte[] replayName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetAtmosphereSeasonForReplayDelegate(byte[] replayName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetClosestEnemyDelegate(
      UIntPtr missionPointer,
      int teamIndex,
      Vec3 position,
      float radius);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetClosestAllyDelegate(
      UIntPtr missionPointer,
      int teamIndex,
      Vec3 position,
      float radius);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetAgentCountAroundPositionDelegate(
      UIntPtr missionPointer,
      int teamIndex,
      Vec2 position,
      float radius,
      ref int allyCount,
      ref int enemyCount);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int FindAgentWithIndexDelegate(UIntPtr missionPointer, int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetRandomDecideTimeOfAgentsDelegate(
      UIntPtr missionPointer,
      int agentCount,
      IntPtr agentIndices,
      float minAIReactionTime,
      float maxAIReactionTime);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAverageMoraleOfAgentsDelegate(
      UIntPtr missionPointer,
      int agentCount,
      IntPtr agentIndices);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate WorldPosition GetBestSlopeTowardsDirectionDelegate(
      UIntPtr missionPointer,
      ref WorldPosition centerPosition,
      float halfsize,
      ref WorldPosition referencePosition);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate WorldPosition GetBestSlopeAngleHeightPosForDefendingDelegate(
      UIntPtr missionPointer,
      WorldPosition enemyPosition,
      WorldPosition defendingPosition,
      int sampleSize,
      float distanceRatioAllowedFromDefendedPos,
      float distanceSqrdAllowedFromBoundary,
      float cosinusOfBestSlope,
      float cosinusOfMaxAcceptedSlope,
      float minSlopeScore,
      float maxSlopeScore,
      float excessiveSlopePenalty,
      float nearConeCenterRatio,
      float nearConeCenterBonus,
      float heightDifferenceCeiling,
      float maxDisplacementPenalty);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetNearbyAgentsAuxDelegate(
      UIntPtr missionPointer,
      Vec2 center,
      float radius,
      int teamIndex,
      int friendOrEnemyOrAll,
      int agentsArrayOffset,
      IntPtr agentIds,
      int agentsArraySize,
      ref int retrievedAgentCount);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec2 GetWeightedPointOfEnemiesDelegate(
      UIntPtr missionPointer,
      int agentIndex,
      Vec2 basePoint);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsFormationUnitPositionAvailableDelegate(
      UIntPtr missionPointer,
      ref WorldPosition orderPosition,
      ref WorldPosition unitPosition,
      ref WorldPosition neareastAvailableUnitPosition,
      float manhattanDistance);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate WorldPosition GetStraightPathToTargetDelegate(
      UIntPtr scenePointer,
      Vec2 targetPosition,
      WorldPosition startingPosition,
      float samplingDistance,
      [MarshalAs(UnmanagedType.U1)] bool stopAtObstacle);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetBowMissileSpeedModifierDelegate(UIntPtr missionPointer, float modifier);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCrossbowMissileSpeedModifierDelegate(
      UIntPtr missionPointer,
      float modifier);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetThrowingMissileSpeedModifierDelegate(
      UIntPtr missionPointer,
      float modifier);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMissileRangeModifierDelegate(UIntPtr missionPointer, float modifier);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetLastMovementKeyPressedDelegate(
      UIntPtr missionPointer,
      Agent.MovementControlFlag lastMovementKeyPressed);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void FastForwardMissionDelegate(
      UIntPtr missionPointer,
      float startTime,
      float endTime);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetDebugAgentDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetDebugAgentDelegate(UIntPtr missionPointer, int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AddAiDebugTextDelegate(UIntPtr missionPointer, byte[] text);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate AgentProximityMap.ProximityMapSearchStructInternal ProximityMapBeginSearchDelegate(
      UIntPtr missionPointer,
      Vec2 searchPos,
      float searchRadius);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ProximityMapFindNextDelegate(
      UIntPtr missionPointer,
      ref AgentProximityMap.ProximityMapSearchStructInternal searchStruct);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float ProximityMapMaxSearchRadiusDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetBiggestAgentCollisionPaddingDelegate(UIntPtr missionPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetReportStuckAgentsModeDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void BatchFormationUnitPositionsDelegate(
      UIntPtr missionPointer,
      IntPtr orderedPositionIndices,
      IntPtr orderedLocalPositions,
      IntPtr availabilityTable,
      IntPtr globalPositionTable,
      WorldPosition orderPosition,
      Vec2 direction,
      int fileCount,
      int rankCount);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool ToggleDisableFallAvoidDelegate();
  }
}
