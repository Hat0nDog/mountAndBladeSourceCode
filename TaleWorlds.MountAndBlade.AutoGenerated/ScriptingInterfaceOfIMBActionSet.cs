// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBActionSet
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.DotNet;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBActionSet : IMBActionSet
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBActionSet.GetIndexWithIDDelegate call_GetIndexWithIDDelegate;
    public static ScriptingInterfaceOfIMBActionSet.GetNameWithIndexDelegate call_GetNameWithIndexDelegate;
    public static ScriptingInterfaceOfIMBActionSet.GetNumberOfActionSetsDelegate call_GetNumberOfActionSetsDelegate;
    public static ScriptingInterfaceOfIMBActionSet.GetNumberOfMonsterUsageSetsDelegate call_GetNumberOfMonsterUsageSetsDelegate;
    public static ScriptingInterfaceOfIMBActionSet.AreActionsAlternativesDelegate call_AreActionsAlternativesDelegate;
    public static ScriptingInterfaceOfIMBActionSet.GetBoneIndexWithIdDelegate call_GetBoneIndexWithIdDelegate;

    public int GetIndexWithID(string id)
    {
      byte[] numArray = (byte[]) null;
      if (id != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBActionSet._utf8.GetBytes(id, 0, id.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBActionSet.call_GetIndexWithIDDelegate(numArray);
    }

    public string GetNameWithIndex(int index) => ScriptingInterfaceOfIMBActionSet.call_GetNameWithIndexDelegate(index) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public int GetNumberOfActionSets() => ScriptingInterfaceOfIMBActionSet.call_GetNumberOfActionSetsDelegate();

    public int GetNumberOfMonsterUsageSets() => ScriptingInterfaceOfIMBActionSet.call_GetNumberOfMonsterUsageSetsDelegate();

    public bool AreActionsAlternatives(int index, int actionNo1, int actionNo2) => ScriptingInterfaceOfIMBActionSet.call_AreActionsAlternativesDelegate(index, actionNo1, actionNo2);

    public sbyte GetBoneIndexWithId(string actionSetId, string boneId)
    {
      byte[] numArray1 = (byte[]) null;
      if (actionSetId != null)
      {
        numArray1 = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBActionSet._utf8.GetBytes(actionSetId, 0, actionSetId.Length, numArray1, 0);
        numArray1[bytes] = (byte) 0;
      }
      byte[] numArray2 = (byte[]) null;
      if (boneId != null)
      {
        numArray2 = CallbackStringBufferManager.StringBuffer1;
        int bytes = ScriptingInterfaceOfIMBActionSet._utf8.GetBytes(boneId, 0, boneId.Length, numArray2, 0);
        numArray2[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBActionSet.call_GetBoneIndexWithIdDelegate(numArray1, numArray2);
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetIndexWithIDDelegate(byte[] id);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetNameWithIndexDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetNumberOfActionSetsDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetNumberOfMonsterUsageSetsDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool AreActionsAlternativesDelegate(int index, int actionNo1, int actionNo2);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate sbyte GetBoneIndexWithIdDelegate(byte[] actionSetId, byte[] boneId);
  }
}
