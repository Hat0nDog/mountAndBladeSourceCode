// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBAgent
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBAgent : IMBAgent
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBAgent.SetActionChannelDelegate call_SetActionChannelDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetCurrentActionSpeedDelegate call_SetCurrentActionSpeedDelegate;
    public static ScriptingInterfaceOfIMBAgent.TickActionChannelsDelegate call_TickActionChannelsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetActionChannelWeightDelegate call_GetActionChannelWeightDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetActionChannelCurrentActionWeightDelegate call_GetActionChannelCurrentActionWeightDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetActionSetDelegate call_SetActionSetDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetActionSetNoDelegate call_GetActionSetNoDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMovementLockedStateDelegate call_GetMovementLockedStateDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetTargetPositionDelegate call_GetTargetPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetTargetPositionDelegate call_SetTargetPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetTargetDirectionDelegate call_GetTargetDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetTargetPositionAndDirectionDelegate call_SetTargetPositionAndDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.ClearTargetFrameDelegate call_ClearTargetFrameDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetIsLookDirectionLockedDelegate call_GetIsLookDirectionLockedDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetIsLookDirectionLockedDelegate call_SetIsLookDirectionLockedDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetMonoObjectDelegate call_SetMonoObjectDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetEyeGlobalPositionDelegate call_GetEyeGlobalPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetChestGlobalPositionDelegate call_GetChestGlobalPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.AddMeshToBoneDelegate call_AddMeshToBoneDelegate;
    public static ScriptingInterfaceOfIMBAgent.RemoveMeshFromBoneDelegate call_RemoveMeshFromBoneDelegate;
    public static ScriptingInterfaceOfIMBAgent.AddPrefabToAgentBoneDelegate call_AddPrefabToAgentBoneDelegate;
    public static ScriptingInterfaceOfIMBAgent.WieldNextWeaponDelegate call_WieldNextWeaponDelegate;
    public static ScriptingInterfaceOfIMBAgent.PreloadForRenderingDelegate call_PreloadForRenderingDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAgentScaleDelegate call_GetAgentScaleDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCrouchModeDelegate call_GetCrouchModeDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetWalkModeDelegate call_GetWalkModeDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetVisualPositionDelegate call_GetVisualPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsLookRotationInSlowMotionDelegate call_IsLookRotationInSlowMotionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetLookDirectionAsAngleDelegate call_GetLookDirectionAsAngleDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetLookDirectionAsAngleDelegate call_SetLookDirectionAsAngleDelegate;
    public static ScriptingInterfaceOfIMBAgent.AttackDirectionToMovementFlagDelegate call_AttackDirectionToMovementFlagDelegate;
    public static ScriptingInterfaceOfIMBAgent.DefendDirectionToMovementFlagDelegate call_DefendDirectionToMovementFlagDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetHeadCameraModeDelegate call_GetHeadCameraModeDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetHeadCameraModeDelegate call_SetHeadCameraModeDelegate;
    public static ScriptingInterfaceOfIMBAgent.KickClearDelegate call_KickClearDelegate;
    public static ScriptingInterfaceOfIMBAgent.ResetGuardDelegate call_ResetGuardDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentGuardModeDelegate call_GetCurrentGuardModeDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetDefendMovementFlagDelegate call_GetDefendMovementFlagDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAttackDirectionDelegate call_GetAttackDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.PlayerAttackDirectionDelegate call_PlayerAttackDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetWieldedWeaponInfoDelegate call_GetWieldedWeaponInfoDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetImmediateEnemyDelegate call_GetImmediateEnemyDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetIsDoingPassiveAttackDelegate call_GetIsDoingPassiveAttackDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetIsPassiveUsageConditionsAreMetDelegate call_GetIsPassiveUsageConditionsAreMetDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentAimingTurbulanceDelegate call_GetCurrentAimingTurbulanceDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentAimingErrorDelegate call_GetCurrentAimingErrorDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetBodyRotationConstraintDelegate call_GetBodyRotationConstraintDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetActionDirectionDelegate call_GetActionDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAttackDirectionUsageDelegate call_GetAttackDirectionUsageDelegate;
    public static ScriptingInterfaceOfIMBAgent.HandleBlowAuxDelegate call_HandleBlowAuxDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetCurrentDisciplineDelegate call_SetCurrentDisciplineDelegate;
    public static ScriptingInterfaceOfIMBAgent.MakeVoiceDelegate call_MakeVoiceDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetHandInverseKinematicsFrameDelegate call_SetHandInverseKinematicsFrameDelegate;
    public static ScriptingInterfaceOfIMBAgent.ClearHandInverseKinematicsDelegate call_ClearHandInverseKinematicsDelegate;
    public static ScriptingInterfaceOfIMBAgent.DebugMoreDelegate call_DebugMoreDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsOnLandDelegate call_IsOnLandDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsSlidingDelegate call_IsSlidingDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsRunningAwayDelegate call_IsRunningAwayDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurWeaponOffsetDelegate call_GetCurWeaponOffsetDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetWalkSpeedLimitOfMountableDelegate call_GetWalkSpeedLimitOfMountableDelegate;
    public static ScriptingInterfaceOfIMBAgent.CreateBloodBurstAtLimbDelegate call_CreateBloodBurstAtLimbDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetNativeActionIndexDelegate call_GetNativeActionIndexDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetGuardedAgentIndexDelegate call_SetGuardedAgentIndexDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetColumnwiseFollowAgentDelegate call_SetColumnwiseFollowAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMonsterUsageIndexDelegate call_GetMonsterUsageIndexDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMissileRangeWithHeightDifferenceDelegate call_GetMissileRangeWithHeightDifferenceDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetFormationNoDelegate call_SetFormationNoDelegate;
    public static ScriptingInterfaceOfIMBAgent.EnforceShieldUsageDelegate call_EnforceShieldUsageDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetFiringOrderDelegate call_SetFiringOrderDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetRidingOrderDelegate call_SetRidingOrderDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetDirectionChangeTendencyDelegate call_SetDirectionChangeTendencyDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAiBehaviorParamsDelegate call_SetAiBehaviorParamsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAllAIBehaviorParamsDelegate call_SetAllAIBehaviorParamsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetBodyArmorMaterialTypeDelegate call_SetBodyArmorMaterialTypeDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMaximumNumberOfAgentsDelegate call_GetMaximumNumberOfAgentsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetRunningSimulationDataUntilMaximumSpeedReachedDelegate call_GetRunningSimulationDataUntilMaximumSpeedReachedDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetLastTargetVisibilityStateDelegate call_GetLastTargetVisibilityStateDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetTargetRangeDelegate call_GetTargetRangeDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMissileRangeDelegate call_GetMissileRangeDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetSoundOcclusionDelegate call_SetSoundOcclusionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMovementFlagsDelegate call_GetMovementFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetMovementFlagsDelegate call_SetMovementFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMovementInputVectorDelegate call_GetMovementInputVectorDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetMovementInputVectorDelegate call_SetMovementInputVectorDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCollisionCapsuleDelegate call_GetCollisionCapsuleDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAttackStateDelegate call_SetAttackStateDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAgentVisualsDelegate call_GetAgentVisualsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetEventControlFlagsDelegate call_GetEventControlFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetEventControlFlagsDelegate call_SetEventControlFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAveragePingInMillisecondsDelegate call_SetAveragePingInMillisecondsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetLookAgentDelegate call_SetLookAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetLookAgentDelegate call_GetLookAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetTargetAgentDelegate call_GetTargetAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetInteractionAgentDelegate call_SetInteractionAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetLookToPointOfInterestDelegate call_SetLookToPointOfInterestDelegate;
    public static ScriptingInterfaceOfIMBAgent.DisableLookToPointOfInterestDelegate call_DisableLookToPointOfInterestDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsEnemyDelegate call_IsEnemyDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsFriendDelegate call_IsFriendDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAgentFlagsDelegate call_GetAgentFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAgentFlagsDelegate call_SetAgentFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetSteppedEntityIdDelegate call_GetSteppedEntityIdDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetNetworkPeerDelegate call_SetNetworkPeerDelegate;
    public static ScriptingInterfaceOfIMBAgent.DieDelegate call_DieDelegate;
    public static ScriptingInterfaceOfIMBAgent.MakeDeadDelegate call_MakeDeadDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetFormationFrameDisabledDelegate call_SetFormationFrameDisabledDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetFormationFrameEnabledDelegate call_SetFormationFrameEnabledDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetShouldCatchUpWithFormationDelegate call_SetShouldCatchUpWithFormationDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetFormationIntegrityDataDelegate call_SetFormationIntegrityDataDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetFormationNeighborhoodDataDelegate call_SetFormationNeighborhoodDataDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetFormationInfoDelegate call_SetFormationInfoDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetRetreatModeDelegate call_SetRetreatModeDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsRetreatingDelegate call_IsRetreatingDelegate;
    public static ScriptingInterfaceOfIMBAgent.IsFadingOutDelegate call_IsFadingOutDelegate;
    public static ScriptingInterfaceOfIMBAgent.StartFadingOutDelegate call_StartFadingOutDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetRetreatPosDelegate call_GetRetreatPosDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetTeamDelegate call_GetTeamDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetTeamDelegate call_SetTeamDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetCourageDelegate call_SetCourageDelegate;
    public static ScriptingInterfaceOfIMBAgent.UpdateDrivenPropertiesDelegate call_UpdateDrivenPropertiesDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetLookDirectionDelegate call_GetLookDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetLookDirectionDelegate call_SetLookDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetLookDownLimitDelegate call_GetLookDownLimitDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetPositionDelegate call_GetPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetPositionDelegate call_SetPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetRotationFrameDelegate call_GetRotationFrameDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetEyeGlobalHeightDelegate call_GetEyeGlobalHeightDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMovementVelocityDelegate call_GetMovementVelocityDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAverageVelocityDelegate call_GetAverageVelocityDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetIsLeftStanceDelegate call_GetIsLeftStanceDelegate;
    public static ScriptingInterfaceOfIMBAgent.ResetAIDelegate call_ResetAIDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAIStateFlagsDelegate call_GetAIStateFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAIStateFlagsDelegate call_SetAIStateFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetStateFlagsDelegate call_GetStateFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetStateFlagsDelegate call_SetStateFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMountAgentDelegate call_GetMountAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetMountAgentDelegate call_SetMountAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAgentCurrentMoraleDelegate call_GetAgentCurrentMoraleDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAgentCurrentMoraleDelegate call_SetAgentCurrentMoraleDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAlwaysAttackInMeleeDelegate call_SetAlwaysAttackInMeleeDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetRiderAgentDelegate call_GetRiderAgentDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetControllerDelegate call_SetControllerDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetControllerDelegate call_GetControllerDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetInitialFrameDelegate call_SetInitialFrameDelegate;
    public static ScriptingInterfaceOfIMBAgent.WeaponEquippedDelegate call_WeaponEquippedDelegate;
    public static ScriptingInterfaceOfIMBAgent.DropItemDelegate call_DropItemDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetWeaponAmountInSlotDelegate call_SetWeaponAmountInSlotDelegate;
    public static ScriptingInterfaceOfIMBAgent.ClearEquipmentDelegate call_ClearEquipmentDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetWieldedItemIndexDelegate call_GetWieldedItemIndexDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetWieldedItemIndexAsClientDelegate call_SetWieldedItemIndexAsClientDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetUsageIndexOfWeaponInSlotAsClientDelegate call_SetUsageIndexOfWeaponInSlotAsClientDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetWeaponHitPointsInSlotDelegate call_SetWeaponHitPointsInSlotDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetWeaponAmmoAsClientDelegate call_SetWeaponAmmoAsClientDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetWeaponReloadPhaseAsClientDelegate call_SetWeaponReloadPhaseAsClientDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetReloadAmmoInSlotDelegate call_SetReloadAmmoInSlotDelegate;
    public static ScriptingInterfaceOfIMBAgent.StartSwitchingWeaponUsageIndexAsClientDelegate call_StartSwitchingWeaponUsageIndexAsClientDelegate;
    public static ScriptingInterfaceOfIMBAgent.TryToWieldWeaponInSlotDelegate call_TryToWieldWeaponInSlotDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetWeaponEntityFromEquipmentSlotDelegate call_GetWeaponEntityFromEquipmentSlotDelegate;
    public static ScriptingInterfaceOfIMBAgent.PrepareWeaponForDropInEquipmentSlotDelegate call_PrepareWeaponForDropInEquipmentSlotDelegate;
    public static ScriptingInterfaceOfIMBAgent.TryToSheathWeaponInHandDelegate call_TryToSheathWeaponInHandDelegate;
    public static ScriptingInterfaceOfIMBAgent.UpdateWeaponsDelegate call_UpdateWeaponsDelegate;
    public static ScriptingInterfaceOfIMBAgent.AttachWeaponToBoneDelegate call_AttachWeaponToBoneDelegate;
    public static ScriptingInterfaceOfIMBAgent.AttachWeaponToWeaponInSlotDelegate call_AttachWeaponToWeaponInSlotDelegate;
    public static ScriptingInterfaceOfIMBAgent.BuildDelegate call_BuildDelegate;
    public static ScriptingInterfaceOfIMBAgent.LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate call_LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAgentExcludeStateForFaceGroupIdDelegate call_SetAgentExcludeStateForFaceGroupIdDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAgentScaleDelegate call_SetAgentScaleDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentVelocityDelegate call_GetCurrentVelocityDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetTurnSpeedDelegate call_GetTurnSpeedDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMovementDirectionAsAngleDelegate call_GetMovementDirectionAsAngleDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMovementDirectionDelegate call_GetMovementDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetMovementDirectionDelegate call_SetMovementDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentSpeedLimitDelegate call_GetCurrentSpeedLimitDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetMinimumSpeedDelegate call_SetMinimumSpeedDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetMaximumSpeedLimitDelegate call_SetMaximumSpeedLimitDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMaximumSpeedLimitDelegate call_GetMaximumSpeedLimitDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetMaximumForwardUnlimitedSpeedDelegate call_GetMaximumForwardUnlimitedSpeedDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetDestinationSpeedDelegate call_SetDestinationSpeedDelegate;
    public static ScriptingInterfaceOfIMBAgent.FadeOutDelegate call_FadeOutDelegate;
    public static ScriptingInterfaceOfIMBAgent.FadeInDelegate call_FadeInDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetScriptedFlagsDelegate call_GetScriptedFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetScriptedFlagsDelegate call_SetScriptedFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetScriptedCombatFlagsDelegate call_GetScriptedCombatFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetScriptedCombatFlagsDelegate call_SetScriptedCombatFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetScriptedPositionAndDirectionDelegate call_SetScriptedPositionAndDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetScriptedPositionDelegate call_SetScriptedPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetScriptedTargetEntityDelegate call_SetScriptedTargetEntityDelegate;
    public static ScriptingInterfaceOfIMBAgent.DisableScriptedMovementDelegate call_DisableScriptedMovementDelegate;
    public static ScriptingInterfaceOfIMBAgent.DisableScriptedCombatMovementDelegate call_DisableScriptedCombatMovementDelegate;
    public static ScriptingInterfaceOfIMBAgent.ForceAiBehaviourSelectionDelegate call_ForceAiBehaviourSelectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.HasPathThroughNavigationFaceIdFromDirectionDelegate call_HasPathThroughNavigationFaceIdFromDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.CanMoveDirectlyToPositionDelegate call_CanMoveDirectlyToPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate call_CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetPathDistanceToPointDelegate call_GetPathDistanceToPointDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentNavigationFaceIdDelegate call_GetCurrentNavigationFaceIdDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetWorldPositionDelegate call_GetWorldPositionDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetAgentFacialAnimationDelegate call_SetAgentFacialAnimationDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAgentFacialAnimationDelegate call_GetAgentFacialAnimationDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetAgentVoiceDefinitionDelegate call_GetAgentVoiceDefinitionDelegate;
    public static ScriptingInterfaceOfIMBAgent.AllowFirstPersonWideRotationDelegate call_AllowFirstPersonWideRotationDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentAnimationFlagsDelegate call_GetCurrentAnimationFlagsDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentActionDelegate call_GetCurrentActionDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentActionTypeDelegate call_GetCurrentActionTypeDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentActionStageDelegate call_GetCurrentActionStageDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentActionDirectionDelegate call_GetCurrentActionDirectionDelegate;
    public static ScriptingInterfaceOfIMBAgent.ComputeAnimationDisplacementDelegate call_ComputeAnimationDisplacementDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentActionPriorityDelegate call_GetCurrentActionPriorityDelegate;
    public static ScriptingInterfaceOfIMBAgent.GetCurrentActionProgressDelegate call_GetCurrentActionProgressDelegate;
    public static ScriptingInterfaceOfIMBAgent.SetCurrentActionProgressDelegate call_SetCurrentActionProgressDelegate;

    public bool SetActionChannel(
      UIntPtr agentPointer,
      int channelNo,
      int actionNo,
      ulong additionalFlags,
      bool ignorePriority,
      float blendWithNextActionFactor,
      float actionSpeed,
      float blendInPeriod,
      float blendOutPeriodToNoAnim,
      float startProgress,
      bool useLinearSmoothing,
      float blendOutPeriod,
      bool forceFaceMorphRestart)
    {
      return ScriptingInterfaceOfIMBAgent.call_SetActionChannelDelegate(agentPointer, channelNo, actionNo, additionalFlags, ignorePriority, blendWithNextActionFactor, actionSpeed, blendInPeriod, blendOutPeriodToNoAnim, startProgress, useLinearSmoothing, blendOutPeriod, forceFaceMorphRestart);
    }

    public void SetCurrentActionSpeed(UIntPtr agentPointer, int channelNo, float actionSpeed) => ScriptingInterfaceOfIMBAgent.call_SetCurrentActionSpeedDelegate(agentPointer, channelNo, actionSpeed);

    public void TickActionChannels(UIntPtr agentPointer, float dt) => ScriptingInterfaceOfIMBAgent.call_TickActionChannelsDelegate(agentPointer, dt);

    public float GetActionChannelWeight(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetActionChannelWeightDelegate(agentPointer, channelNo);

    public float GetActionChannelCurrentActionWeight(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetActionChannelCurrentActionWeightDelegate(agentPointer, channelNo);

    public void SetActionSet(
      UIntPtr agentPointer,
      ref AgentVisualsNativeData agentVisualsNativeData,
      ref AnimationSystemData animationSystemData)
    {
      ScriptingInterfaceOfIMBAgent.call_SetActionSetDelegate(agentPointer, ref agentVisualsNativeData, ref animationSystemData);
    }

    public int GetActionSetNo(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetActionSetNoDelegate(agentPointer);

    public AgentMovementLockedState GetMovementLockedState(
      UIntPtr agentPointer)
    {
      return ScriptingInterfaceOfIMBAgent.call_GetMovementLockedStateDelegate(agentPointer);
    }

    public Vec2 GetTargetPosition(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetTargetPositionDelegate(agentPointer);

    public void SetTargetPosition(UIntPtr agentPointer, ref Vec2 targetPosition) => ScriptingInterfaceOfIMBAgent.call_SetTargetPositionDelegate(agentPointer, ref targetPosition);

    public Vec3 GetTargetDirection(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetTargetDirectionDelegate(agentPointer);

    public void SetTargetPositionAndDirection(
      UIntPtr agentPointer,
      ref Vec2 targetPosition,
      ref Vec3 targetDirection)
    {
      ScriptingInterfaceOfIMBAgent.call_SetTargetPositionAndDirectionDelegate(agentPointer, ref targetPosition, ref targetDirection);
    }

    public void ClearTargetFrame(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_ClearTargetFrameDelegate(agentPointer);

    public bool GetIsLookDirectionLocked(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetIsLookDirectionLockedDelegate(agentPointer);

    public void SetIsLookDirectionLocked(UIntPtr agentPointer, bool isLocked) => ScriptingInterfaceOfIMBAgent.call_SetIsLookDirectionLockedDelegate(agentPointer, isLocked);

    public void SetMonoObject(UIntPtr agentPointer, Agent monoObject) => ScriptingInterfaceOfIMBAgent.call_SetMonoObjectDelegate(agentPointer, monoObject != null ? monoObject.GetManagedId() : 0);

    public Vec3 GetEyeGlobalPosition(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetEyeGlobalPositionDelegate(agentPointer);

    public Vec3 GetChestGlobalPosition(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetChestGlobalPositionDelegate(agentPointer);

    public void AddMeshToBone(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex) => ScriptingInterfaceOfIMBAgent.call_AddMeshToBoneDelegate(agentPointer, meshPointer, boneIndex);

    public void RemoveMeshFromBone(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex) => ScriptingInterfaceOfIMBAgent.call_RemoveMeshFromBoneDelegate(agentPointer, meshPointer, boneIndex);

    public CompositeComponent AddPrefabToAgentBone(
      UIntPtr agentPointer,
      string prefabName,
      sbyte boneIndex)
    {
      byte[] numArray = (byte[]) null;
      if (prefabName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAgent._utf8.GetBytes(prefabName, 0, prefabName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgent.call_AddPrefabToAgentBoneDelegate(agentPointer, numArray, boneIndex);
      CompositeComponent compositeComponent = (CompositeComponent) null;
      if (nativeObjectPointer.Pointer != UIntPtr.Zero)
      {
        compositeComponent = new CompositeComponent(nativeObjectPointer.Pointer);
        LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
      }
      return compositeComponent;
    }

    public void WieldNextWeapon(UIntPtr agentPointer, int item_index) => ScriptingInterfaceOfIMBAgent.call_WieldNextWeaponDelegate(agentPointer, item_index);

    public void PreloadForRendering(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_PreloadForRenderingDelegate(agentPointer);

    public float GetAgentScale(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAgentScaleDelegate(agentPointer);

    public bool GetCrouchMode(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCrouchModeDelegate(agentPointer);

    public bool GetWalkMode(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetWalkModeDelegate(agentPointer);

    public Vec3 GetVisualPosition(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetVisualPositionDelegate(agentPointer);

    public bool IsLookRotationInSlowMotion(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_IsLookRotationInSlowMotionDelegate(agentPointer);

    public float GetLookDirectionAsAngle(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetLookDirectionAsAngleDelegate(agentPointer);

    public void SetLookDirectionAsAngle(UIntPtr agentPointer, float value) => ScriptingInterfaceOfIMBAgent.call_SetLookDirectionAsAngleDelegate(agentPointer, value);

    public Agent.MovementControlFlag AttackDirectionToMovementFlag(
      UIntPtr agentPointer,
      Agent.UsageDirection direction)
    {
      return ScriptingInterfaceOfIMBAgent.call_AttackDirectionToMovementFlagDelegate(agentPointer, direction);
    }

    public Agent.MovementControlFlag DefendDirectionToMovementFlag(
      UIntPtr agentPointer,
      Agent.UsageDirection direction)
    {
      return ScriptingInterfaceOfIMBAgent.call_DefendDirectionToMovementFlagDelegate(agentPointer, direction);
    }

    public bool GetHeadCameraMode(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetHeadCameraModeDelegate(agentPointer);

    public void SetHeadCameraMode(UIntPtr agentPointer, bool value) => ScriptingInterfaceOfIMBAgent.call_SetHeadCameraModeDelegate(agentPointer, value);

    public bool KickClear(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_KickClearDelegate(agentPointer);

    public void ResetGuard(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_ResetGuardDelegate(agentPointer);

    public Agent.GuardMode GetCurrentGuardMode(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCurrentGuardModeDelegate(agentPointer);

    public Agent.MovementControlFlag GetDefendMovementFlag(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetDefendMovementFlagDelegate(agentPointer);

    public Agent.UsageDirection GetAttackDirection(UIntPtr agentPointer, bool doAiCheck) => ScriptingInterfaceOfIMBAgent.call_GetAttackDirectionDelegate(agentPointer, doAiCheck);

    public Agent.UsageDirection PlayerAttackDirection(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_PlayerAttackDirectionDelegate(agentPointer);

    public bool GetWieldedWeaponInfo(
      UIntPtr agentPointer,
      int handIndex,
      ref bool isMeleeWeapon,
      ref bool isRangedWeapon)
    {
      return ScriptingInterfaceOfIMBAgent.call_GetWieldedWeaponInfoDelegate(agentPointer, handIndex, ref isMeleeWeapon, ref isRangedWeapon);
    }

    public Agent GetImmediateEnemy(UIntPtr agentPointer) => DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetImmediateEnemyDelegate(agentPointer)) as Agent;

    public bool GetIsDoingPassiveAttack(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetIsDoingPassiveAttackDelegate(agentPointer);

    public bool GetIsPassiveUsageConditionsAreMet(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetIsPassiveUsageConditionsAreMetDelegate(agentPointer);

    public float GetCurrentAimingTurbulance(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCurrentAimingTurbulanceDelegate(agentPointer);

    public float GetCurrentAimingError(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCurrentAimingErrorDelegate(agentPointer);

    public Vec3 GetBodyRotationConstraint(UIntPtr agentPointer, int channelIndex) => ScriptingInterfaceOfIMBAgent.call_GetBodyRotationConstraintDelegate(agentPointer, channelIndex);

    public Agent.UsageDirection GetActionDirection(int actionIndex) => ScriptingInterfaceOfIMBAgent.call_GetActionDirectionDelegate(actionIndex);

    public Agent.UsageDirection GetAttackDirectionUsage(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAttackDirectionUsageDelegate(agentPointer);

    public void HandleBlowAux(UIntPtr agentPointer, ref Blow blow) => ScriptingInterfaceOfIMBAgent.call_HandleBlowAuxDelegate(agentPointer, ref blow);

    public void SetCurrentDiscipline(UIntPtr agentPointer, float value) => ScriptingInterfaceOfIMBAgent.call_SetCurrentDisciplineDelegate(agentPointer, value);

    public void MakeVoice(UIntPtr agentPointer, int voiceType, int predictionType) => ScriptingInterfaceOfIMBAgent.call_MakeVoiceDelegate(agentPointer, voiceType, predictionType);

    public bool SetHandInverseKinematicsFrame(
      UIntPtr agentPointer,
      ref MatrixFrame leftGlobalFrame,
      ref MatrixFrame rightGlobalFrame)
    {
      return ScriptingInterfaceOfIMBAgent.call_SetHandInverseKinematicsFrameDelegate(agentPointer, ref leftGlobalFrame, ref rightGlobalFrame);
    }

    public void ClearHandInverseKinematics(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_ClearHandInverseKinematicsDelegate(agentPointer);

    public void DebugMore(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_DebugMoreDelegate(agentPointer);

    public bool IsOnLand(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_IsOnLandDelegate(agentPointer);

    public bool IsSliding(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_IsSlidingDelegate(agentPointer);

    public bool IsRunningAway(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_IsRunningAwayDelegate(agentPointer);

    public Vec3 GetCurWeaponOffset(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCurWeaponOffsetDelegate(agentPointer);

    public float GetWalkSpeedLimitOfMountable(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetWalkSpeedLimitOfMountableDelegate(agentPointer);

    public void CreateBloodBurstAtLimb(
      UIntPtr agentPointer,
      sbyte iBone,
      ref Vec3 impactPosition,
      float scale)
    {
      ScriptingInterfaceOfIMBAgent.call_CreateBloodBurstAtLimbDelegate(agentPointer, iBone, ref impactPosition, scale);
    }

    public int GetNativeActionIndex(string actionName)
    {
      byte[] numArray = (byte[]) null;
      if (actionName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAgent._utf8.GetBytes(actionName, 0, actionName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBAgent.call_GetNativeActionIndexDelegate(numArray);
    }

    public void SetGuardedAgentIndex(UIntPtr agentPointer, int guardedAgentIndex) => ScriptingInterfaceOfIMBAgent.call_SetGuardedAgentIndexDelegate(agentPointer, guardedAgentIndex);

    public void SetColumnwiseFollowAgent(
      UIntPtr agentPointer,
      int followAgentIndex,
      ref Vec2 followPosition)
    {
      ScriptingInterfaceOfIMBAgent.call_SetColumnwiseFollowAgentDelegate(agentPointer, followAgentIndex, ref followPosition);
    }

    public int GetMonsterUsageIndex(string monsterUsage)
    {
      byte[] numArray = (byte[]) null;
      if (monsterUsage != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAgent._utf8.GetBytes(monsterUsage, 0, monsterUsage.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBAgent.call_GetMonsterUsageIndexDelegate(numArray);
    }

    public float GetMissileRangeWithHeightDifference(UIntPtr agentPointer, float targetZ) => ScriptingInterfaceOfIMBAgent.call_GetMissileRangeWithHeightDifferenceDelegate(agentPointer, targetZ);

    public void SetFormationNo(UIntPtr agentPointer, int formationNo) => ScriptingInterfaceOfIMBAgent.call_SetFormationNoDelegate(agentPointer, formationNo);

    public void EnforceShieldUsage(UIntPtr agentPointer, Agent.UsageDirection direction) => ScriptingInterfaceOfIMBAgent.call_EnforceShieldUsageDelegate(agentPointer, direction);

    public void SetFiringOrder(UIntPtr agentPointer, int order) => ScriptingInterfaceOfIMBAgent.call_SetFiringOrderDelegate(agentPointer, order);

    public void SetRidingOrder(UIntPtr agentPointer, int order) => ScriptingInterfaceOfIMBAgent.call_SetRidingOrderDelegate(agentPointer, order);

    public void SetDirectionChangeTendency(UIntPtr agentPointer, float tendency) => ScriptingInterfaceOfIMBAgent.call_SetDirectionChangeTendencyDelegate(agentPointer, tendency);

    public void SetAiBehaviorParams(
      UIntPtr agentPointer,
      int behavior,
      float y1,
      float x2,
      float y2,
      float x3,
      float y3)
    {
      ScriptingInterfaceOfIMBAgent.call_SetAiBehaviorParamsDelegate(agentPointer, behavior, y1, x2, y2, x3, y3);
    }

    public void SetAllAIBehaviorParams(UIntPtr agentPointer, BehaviorValues[] behaviorParams)
    {
      PinnedArrayData<BehaviorValues> pinnedArrayData = new PinnedArrayData<BehaviorValues>(behaviorParams);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBAgent.call_SetAllAIBehaviorParamsDelegate(agentPointer, pointer);
      pinnedArrayData.Dispose();
    }

    public void SetBodyArmorMaterialType(
      UIntPtr agentPointer,
      ArmorComponent.ArmorMaterialTypes bodyArmorMaterialType)
    {
      ScriptingInterfaceOfIMBAgent.call_SetBodyArmorMaterialTypeDelegate(agentPointer, bodyArmorMaterialType);
    }

    public int GetMaximumNumberOfAgents() => ScriptingInterfaceOfIMBAgent.call_GetMaximumNumberOfAgentsDelegate();

    public void GetRunningSimulationDataUntilMaximumSpeedReached(
      UIntPtr agentPointer,
      ref float combatAccelerationTime,
      ref float maxSpeed,
      float[] speedValues)
    {
      PinnedArrayData<float> pinnedArrayData = new PinnedArrayData<float>(speedValues);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBAgent.call_GetRunningSimulationDataUntilMaximumSpeedReachedDelegate(agentPointer, ref combatAccelerationTime, ref maxSpeed, pointer);
      pinnedArrayData.Dispose();
    }

    public int GetLastTargetVisibilityState(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetLastTargetVisibilityStateDelegate(agentPointer);

    public float GetTargetRange(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetTargetRangeDelegate(agentPointer);

    public float GetMissileRange(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMissileRangeDelegate(agentPointer);

    public void SetSoundOcclusion(UIntPtr agentPointer, float value) => ScriptingInterfaceOfIMBAgent.call_SetSoundOcclusionDelegate(agentPointer, value);

    public uint GetMovementFlags(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMovementFlagsDelegate(agentPointer);

    public void SetMovementFlags(UIntPtr agentPointer, Agent.MovementControlFlag value) => ScriptingInterfaceOfIMBAgent.call_SetMovementFlagsDelegate(agentPointer, value);

    public Vec2 GetMovementInputVector(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMovementInputVectorDelegate(agentPointer);

    public void SetMovementInputVector(UIntPtr agentPointer, Vec2 value) => ScriptingInterfaceOfIMBAgent.call_SetMovementInputVectorDelegate(agentPointer, value);

    public void GetCollisionCapsule(UIntPtr agentPointer, ref CapsuleData value) => ScriptingInterfaceOfIMBAgent.call_GetCollisionCapsuleDelegate(agentPointer, ref value);

    public void SetAttackState(UIntPtr agentPointer, int attackState) => ScriptingInterfaceOfIMBAgent.call_SetAttackStateDelegate(agentPointer, attackState);

    public MBAgentVisuals GetAgentVisuals(UIntPtr agentPointer)
    {
      NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgent.call_GetAgentVisualsDelegate(agentPointer);
      MBAgentVisuals mbAgentVisuals = (MBAgentVisuals) null;
      if (nativeObjectPointer.Pointer != UIntPtr.Zero)
      {
        mbAgentVisuals = new MBAgentVisuals(nativeObjectPointer.Pointer);
        LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
      }
      return mbAgentVisuals;
    }

    public uint GetEventControlFlags(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetEventControlFlagsDelegate(agentPointer);

    public void SetEventControlFlags(UIntPtr agentPointer, Agent.EventControlFlag eventflag) => ScriptingInterfaceOfIMBAgent.call_SetEventControlFlagsDelegate(agentPointer, eventflag);

    public void SetAveragePingInMilliseconds(UIntPtr agentPointer, double averagePingInMilliseconds) => ScriptingInterfaceOfIMBAgent.call_SetAveragePingInMillisecondsDelegate(agentPointer, averagePingInMilliseconds);

    public void SetLookAgent(UIntPtr agentPointer, UIntPtr lookAtAgentPointer) => ScriptingInterfaceOfIMBAgent.call_SetLookAgentDelegate(agentPointer, lookAtAgentPointer);

    public Agent GetLookAgent(UIntPtr agentPointer) => DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetLookAgentDelegate(agentPointer)) as Agent;

    public Agent GetTargetAgent(UIntPtr agentPointer) => DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetTargetAgentDelegate(agentPointer)) as Agent;

    public void SetInteractionAgent(UIntPtr agentPointer, UIntPtr interactionAgentPointer) => ScriptingInterfaceOfIMBAgent.call_SetInteractionAgentDelegate(agentPointer, interactionAgentPointer);

    public void SetLookToPointOfInterest(UIntPtr agentPointer, Vec3 point) => ScriptingInterfaceOfIMBAgent.call_SetLookToPointOfInterestDelegate(agentPointer, point);

    public void DisableLookToPointOfInterest(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_DisableLookToPointOfInterestDelegate(agentPointer);

    public bool IsEnemy(UIntPtr agentPointer1, UIntPtr agentPointer2) => ScriptingInterfaceOfIMBAgent.call_IsEnemyDelegate(agentPointer1, agentPointer2);

    public bool IsFriend(UIntPtr agentPointer1, UIntPtr agentPointer2) => ScriptingInterfaceOfIMBAgent.call_IsFriendDelegate(agentPointer1, agentPointer2);

    public uint GetAgentFlags(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAgentFlagsDelegate(agentPointer);

    public void SetAgentFlags(UIntPtr agentPointer, uint agentFlags) => ScriptingInterfaceOfIMBAgent.call_SetAgentFlagsDelegate(agentPointer, agentFlags);

    public UIntPtr GetSteppedEntityId(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetSteppedEntityIdDelegate(agentPointer);

    public void SetNetworkPeer(UIntPtr agentPointer, int networkPeerIndex) => ScriptingInterfaceOfIMBAgent.call_SetNetworkPeerDelegate(agentPointer, networkPeerIndex);

    public void Die(UIntPtr agentPointer, ref Blow b, sbyte overrideKillInfo) => ScriptingInterfaceOfIMBAgent.call_DieDelegate(agentPointer, ref b, overrideKillInfo);

    public void MakeDead(UIntPtr agentPointer, bool isKilled, int actionIndex) => ScriptingInterfaceOfIMBAgent.call_MakeDeadDelegate(agentPointer, isKilled, actionIndex);

    public void SetFormationFrameDisabled(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_SetFormationFrameDisabledDelegate(agentPointer);

    public bool SetFormationFrameEnabled(
      UIntPtr agentPointer,
      WorldPosition position,
      Vec2 direction,
      float formationDirectionEnforcingFactor)
    {
      return ScriptingInterfaceOfIMBAgent.call_SetFormationFrameEnabledDelegate(agentPointer, position, direction, formationDirectionEnforcingFactor);
    }

    public void SetShouldCatchUpWithFormation(UIntPtr agentPointer, bool value) => ScriptingInterfaceOfIMBAgent.call_SetShouldCatchUpWithFormationDelegate(agentPointer, value);

    public void SetFormationIntegrityData(
      UIntPtr agentPointer,
      Vec2 position,
      Vec2 currentFormationDirection,
      Vec2 averageVelocityOfCloseAgents,
      float averageMaxUnlimitedSpeedOfCloseAgents,
      float deviationOfPositions)
    {
      ScriptingInterfaceOfIMBAgent.call_SetFormationIntegrityDataDelegate(agentPointer, position, currentFormationDirection, averageVelocityOfCloseAgents, averageMaxUnlimitedSpeedOfCloseAgents, deviationOfPositions);
    }

    public void SetFormationNeighborhoodData(
      UIntPtr agentPointer,
      int[] neighborAgentIndices,
      Vec2[] neighborAgentLocalDifferences)
    {
      PinnedArrayData<int> pinnedArrayData1 = new PinnedArrayData<int>(neighborAgentIndices);
      IntPtr pointer1 = pinnedArrayData1.Pointer;
      PinnedArrayData<Vec2> pinnedArrayData2 = new PinnedArrayData<Vec2>(neighborAgentLocalDifferences);
      IntPtr pointer2 = pinnedArrayData2.Pointer;
      ScriptingInterfaceOfIMBAgent.call_SetFormationNeighborhoodDataDelegate(agentPointer, pointer1, pointer2);
      pinnedArrayData1.Dispose();
      pinnedArrayData2.Dispose();
    }

    public void SetFormationInfo(
      UIntPtr agentPointer,
      int fileIndex,
      int rankIndex,
      int fileCount,
      int rankCount,
      Vec2 wallDir,
      int unitSpacing)
    {
      ScriptingInterfaceOfIMBAgent.call_SetFormationInfoDelegate(agentPointer, fileIndex, rankIndex, fileCount, rankCount, wallDir, unitSpacing);
    }

    public void SetRetreatMode(UIntPtr agentPointer, WorldPosition retreatPos, bool retreat) => ScriptingInterfaceOfIMBAgent.call_SetRetreatModeDelegate(agentPointer, retreatPos, retreat);

    public bool IsRetreating(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_IsRetreatingDelegate(agentPointer);

    public bool IsFadingOut(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_IsFadingOutDelegate(agentPointer);

    public void StartFadingOut(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_StartFadingOutDelegate(agentPointer);

    public WorldPosition GetRetreatPos(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetRetreatPosDelegate(agentPointer);

    public int GetTeam(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetTeamDelegate(agentPointer);

    public void SetTeam(UIntPtr agentPointer, int teamIndex) => ScriptingInterfaceOfIMBAgent.call_SetTeamDelegate(agentPointer, teamIndex);

    public void SetCourage(UIntPtr agentPointer, float courage) => ScriptingInterfaceOfIMBAgent.call_SetCourageDelegate(agentPointer, courage);

    public void UpdateDrivenProperties(UIntPtr agentPointer, float[] values)
    {
      PinnedArrayData<float> pinnedArrayData = new PinnedArrayData<float>(values);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBAgent.call_UpdateDrivenPropertiesDelegate(agentPointer, pointer);
      pinnedArrayData.Dispose();
    }

    public Vec3 GetLookDirection(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetLookDirectionDelegate(agentPointer);

    public void SetLookDirection(UIntPtr agentPointer, Vec3 lookDirection) => ScriptingInterfaceOfIMBAgent.call_SetLookDirectionDelegate(agentPointer, lookDirection);

    public float GetLookDownLimit(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetLookDownLimitDelegate(agentPointer);

    public Vec3 GetPosition(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetPositionDelegate(agentPointer);

    public void SetPosition(UIntPtr agentPointer, ref Vec3 position) => ScriptingInterfaceOfIMBAgent.call_SetPositionDelegate(agentPointer, ref position);

    public void GetRotationFrame(UIntPtr agentPointer, ref MatrixFrame outFrame) => ScriptingInterfaceOfIMBAgent.call_GetRotationFrameDelegate(agentPointer, ref outFrame);

    public float GetEyeGlobalHeight(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetEyeGlobalHeightDelegate(agentPointer);

    public Vec2 GetMovementVelocity(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMovementVelocityDelegate(agentPointer);

    public Vec3 GetAverageVelocity(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAverageVelocityDelegate(agentPointer);

    public bool GetIsLeftStance(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetIsLeftStanceDelegate(agentPointer);

    public void ResetAI(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_ResetAIDelegate(agentPointer);

    public Agent.AIStateFlag GetAIStateFlags(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAIStateFlagsDelegate(agentPointer);

    public void SetAIStateFlags(UIntPtr agentPointer, Agent.AIStateFlag aiStateFlags) => ScriptingInterfaceOfIMBAgent.call_SetAIStateFlagsDelegate(agentPointer, aiStateFlags);

    public AgentState GetStateFlags(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetStateFlagsDelegate(agentPointer);

    public void SetStateFlags(UIntPtr agentPointer, AgentState StateFlags) => ScriptingInterfaceOfIMBAgent.call_SetStateFlagsDelegate(agentPointer, StateFlags);

    public Agent GetMountAgent(UIntPtr agentPointer) => DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetMountAgentDelegate(agentPointer)) as Agent;

    public void SetMountAgent(UIntPtr agentPointer, int mountAgentIndex) => ScriptingInterfaceOfIMBAgent.call_SetMountAgentDelegate(agentPointer, mountAgentIndex);

    public float GetAgentCurrentMorale(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAgentCurrentMoraleDelegate(agentPointer);

    public void SetAgentCurrentMorale(UIntPtr agentPointer, float morale) => ScriptingInterfaceOfIMBAgent.call_SetAgentCurrentMoraleDelegate(agentPointer, morale);

    public void SetAlwaysAttackInMelee(UIntPtr agentPointer, bool attack) => ScriptingInterfaceOfIMBAgent.call_SetAlwaysAttackInMeleeDelegate(agentPointer, attack);

    public Agent GetRiderAgent(UIntPtr agentPointer) => DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetRiderAgentDelegate(agentPointer)) as Agent;

    public void SetController(UIntPtr agentPointer, Agent.ControllerType controller) => ScriptingInterfaceOfIMBAgent.call_SetControllerDelegate(agentPointer, controller);

    public Agent.ControllerType GetController(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetControllerDelegate(agentPointer);

    public void SetInitialFrame(UIntPtr agentPointer, ref MatrixFrame initialFrame) => ScriptingInterfaceOfIMBAgent.call_SetInitialFrameDelegate(agentPointer, ref initialFrame);

    public void WeaponEquipped(
      UIntPtr agentPointer,
      int equipmentSlot,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      in WeaponData ammoWeaponData,
      WeaponStatsData[] ammoWeaponStatsData,
      int ammoWeaponStatsDataLength,
      UIntPtr weaponEntity,
      bool removeOldWeaponFromScene,
      bool isWieldedOnSpawn)
    {
      WeaponDataAsNative weaponData1 = new WeaponDataAsNative(weaponData);
      PinnedArrayData<WeaponStatsData> pinnedArrayData1 = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
      IntPtr pointer1 = pinnedArrayData1.Pointer;
      WeaponDataAsNative ammoWeaponData1 = new WeaponDataAsNative(ammoWeaponData);
      PinnedArrayData<WeaponStatsData> pinnedArrayData2 = new PinnedArrayData<WeaponStatsData>(ammoWeaponStatsData);
      IntPtr pointer2 = pinnedArrayData2.Pointer;
      ScriptingInterfaceOfIMBAgent.call_WeaponEquippedDelegate(agentPointer, equipmentSlot, in weaponData1, pointer1, weaponStatsDataLength, in ammoWeaponData1, pointer2, ammoWeaponStatsDataLength, weaponEntity, removeOldWeaponFromScene, isWieldedOnSpawn);
      pinnedArrayData1.Dispose();
      pinnedArrayData2.Dispose();
    }

    public void DropItem(UIntPtr agentPointer, int itemIndex, int pickedUpItemType) => ScriptingInterfaceOfIMBAgent.call_DropItemDelegate(agentPointer, itemIndex, pickedUpItemType);

    public void SetWeaponAmountInSlot(
      UIntPtr agentPointer,
      int equipmentSlot,
      short amount,
      bool enforcePrimaryItem)
    {
      ScriptingInterfaceOfIMBAgent.call_SetWeaponAmountInSlotDelegate(agentPointer, equipmentSlot, amount, enforcePrimaryItem);
    }

    public void ClearEquipment(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_ClearEquipmentDelegate(agentPointer);

    public EquipmentIndex GetWieldedItemIndex(UIntPtr agentPointer, int handIndex) => ScriptingInterfaceOfIMBAgent.call_GetWieldedItemIndexDelegate(agentPointer, handIndex);

    public void SetWieldedItemIndexAsClient(
      UIntPtr agentPointer,
      int handIndex,
      int wieldedItemIndex,
      bool isWieldedInstantly,
      bool isWieldedOnSpawn,
      int mainHandCurrentUsageIndex)
    {
      ScriptingInterfaceOfIMBAgent.call_SetWieldedItemIndexAsClientDelegate(agentPointer, handIndex, wieldedItemIndex, isWieldedInstantly, isWieldedOnSpawn, mainHandCurrentUsageIndex);
    }

    public void SetUsageIndexOfWeaponInSlotAsClient(
      UIntPtr agentPointer,
      int slotIndex,
      int usageIndex)
    {
      ScriptingInterfaceOfIMBAgent.call_SetUsageIndexOfWeaponInSlotAsClientDelegate(agentPointer, slotIndex, usageIndex);
    }

    public void SetWeaponHitPointsInSlot(
      UIntPtr agentPointer,
      int wieldedItemIndex,
      short hitPoints)
    {
      ScriptingInterfaceOfIMBAgent.call_SetWeaponHitPointsInSlotDelegate(agentPointer, wieldedItemIndex, hitPoints);
    }

    public void SetWeaponAmmoAsClient(
      UIntPtr agentPointer,
      int equipmentIndex,
      int ammoEquipmentIndex,
      short ammo)
    {
      ScriptingInterfaceOfIMBAgent.call_SetWeaponAmmoAsClientDelegate(agentPointer, equipmentIndex, ammoEquipmentIndex, ammo);
    }

    public void SetWeaponReloadPhaseAsClient(
      UIntPtr agentPointer,
      int wieldedItemIndex,
      short reloadPhase)
    {
      ScriptingInterfaceOfIMBAgent.call_SetWeaponReloadPhaseAsClientDelegate(agentPointer, wieldedItemIndex, reloadPhase);
    }

    public void SetReloadAmmoInSlot(
      UIntPtr agentPointer,
      int slotIndex,
      int ammoSlotIndex,
      short reloadedAmmo)
    {
      ScriptingInterfaceOfIMBAgent.call_SetReloadAmmoInSlotDelegate(agentPointer, slotIndex, ammoSlotIndex, reloadedAmmo);
    }

    public void StartSwitchingWeaponUsageIndexAsClient(
      UIntPtr agentPointer,
      int wieldedItemIndex,
      int usageIndex,
      Agent.UsageDirection currentMovementFlagUsageDirection)
    {
      ScriptingInterfaceOfIMBAgent.call_StartSwitchingWeaponUsageIndexAsClientDelegate(agentPointer, wieldedItemIndex, usageIndex, currentMovementFlagUsageDirection);
    }

    public void TryToWieldWeaponInSlot(
      UIntPtr agentPointer,
      int equipmentSlot,
      int type,
      bool isWieldedOnSpawn)
    {
      ScriptingInterfaceOfIMBAgent.call_TryToWieldWeaponInSlotDelegate(agentPointer, equipmentSlot, type, isWieldedOnSpawn);
    }

    public UIntPtr GetWeaponEntityFromEquipmentSlot(UIntPtr agentPointer, int equipmentSlot) => ScriptingInterfaceOfIMBAgent.call_GetWeaponEntityFromEquipmentSlotDelegate(agentPointer, equipmentSlot);

    public void PrepareWeaponForDropInEquipmentSlot(
      UIntPtr agentPointer,
      int equipmentSlot,
      bool showHolsterWithWeapon)
    {
      ScriptingInterfaceOfIMBAgent.call_PrepareWeaponForDropInEquipmentSlotDelegate(agentPointer, equipmentSlot, showHolsterWithWeapon);
    }

    public void TryToSheathWeaponInHand(UIntPtr agentPointer, int handIndex, int type) => ScriptingInterfaceOfIMBAgent.call_TryToSheathWeaponInHandDelegate(agentPointer, handIndex, type);

    public void UpdateWeapons(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_UpdateWeaponsDelegate(agentPointer);

    public void AttachWeaponToBone(
      UIntPtr agentPointer,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      UIntPtr weaponEntity,
      sbyte boneIndex,
      ref MatrixFrame attachLocalFrame)
    {
      WeaponDataAsNative weaponData1 = new WeaponDataAsNative(weaponData);
      PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBAgent.call_AttachWeaponToBoneDelegate(agentPointer, in weaponData1, pointer, weaponStatsDataLength, weaponEntity, boneIndex, ref attachLocalFrame);
      pinnedArrayData.Dispose();
    }

    public void AttachWeaponToWeaponInSlot(
      UIntPtr agentPointer,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      UIntPtr weaponEntity,
      int slotIndex,
      ref MatrixFrame attachLocalFrame)
    {
      WeaponDataAsNative weaponData1 = new WeaponDataAsNative(weaponData);
      PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
      IntPtr pointer = pinnedArrayData.Pointer;
      ScriptingInterfaceOfIMBAgent.call_AttachWeaponToWeaponInSlotDelegate(agentPointer, in weaponData1, pointer, weaponStatsDataLength, weaponEntity, slotIndex, ref attachLocalFrame);
      pinnedArrayData.Dispose();
    }

    public void Build(UIntPtr agentPointer, Vec3 eyeOffsetWrtHead) => ScriptingInterfaceOfIMBAgent.call_BuildDelegate(agentPointer, eyeOffsetWrtHead);

    public void LockAgentReplicationTableDataWithCurrentReliableSequenceNo(
      UIntPtr agentPointer,
      int peerIndex)
    {
      ScriptingInterfaceOfIMBAgent.call_LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate(agentPointer, peerIndex);
    }

    public void SetAgentExcludeStateForFaceGroupId(
      UIntPtr agentPointer,
      int faceGroupId,
      bool isExcluded)
    {
      ScriptingInterfaceOfIMBAgent.call_SetAgentExcludeStateForFaceGroupIdDelegate(agentPointer, faceGroupId, isExcluded);
    }

    public void SetAgentScale(UIntPtr agentPointer, float scale) => ScriptingInterfaceOfIMBAgent.call_SetAgentScaleDelegate(agentPointer, scale);

    public Vec2 GetCurrentVelocity(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCurrentVelocityDelegate(agentPointer);

    public float GetTurnSpeed(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetTurnSpeedDelegate(agentPointer);

    public float GetMovementDirectionAsAngle(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMovementDirectionAsAngleDelegate(agentPointer);

    public Vec3 GetMovementDirection(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMovementDirectionDelegate(agentPointer);

    public void SetMovementDirection(UIntPtr agentPointer, ref Vec3 direction) => ScriptingInterfaceOfIMBAgent.call_SetMovementDirectionDelegate(agentPointer, ref direction);

    public float GetCurrentSpeedLimit(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCurrentSpeedLimitDelegate(agentPointer);

    public void SetMinimumSpeed(UIntPtr agentPointer, float speed) => ScriptingInterfaceOfIMBAgent.call_SetMinimumSpeedDelegate(agentPointer, speed);

    public void SetMaximumSpeedLimit(
      UIntPtr agentPointer,
      float maximumSpeedLimit,
      bool isMultiplier)
    {
      ScriptingInterfaceOfIMBAgent.call_SetMaximumSpeedLimitDelegate(agentPointer, maximumSpeedLimit, isMultiplier);
    }

    public float GetMaximumSpeedLimit(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMaximumSpeedLimitDelegate(agentPointer);

    public float GetMaximumForwardUnlimitedSpeed(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetMaximumForwardUnlimitedSpeedDelegate(agentPointer);

    public void SetDestinationSpeed(UIntPtr agentPointer, float speed) => ScriptingInterfaceOfIMBAgent.call_SetDestinationSpeedDelegate(agentPointer, speed);

    public void FadeOut(UIntPtr agentPointer, bool hideInstantly) => ScriptingInterfaceOfIMBAgent.call_FadeOutDelegate(agentPointer, hideInstantly);

    public void FadeIn(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_FadeInDelegate(agentPointer);

    public int GetScriptedFlags(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetScriptedFlagsDelegate(agentPointer);

    public void SetScriptedFlags(UIntPtr agentPointer, int flags) => ScriptingInterfaceOfIMBAgent.call_SetScriptedFlagsDelegate(agentPointer, flags);

    public int GetScriptedCombatFlags(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetScriptedCombatFlagsDelegate(agentPointer);

    public void SetScriptedCombatFlags(UIntPtr agentPointer, int flags) => ScriptingInterfaceOfIMBAgent.call_SetScriptedCombatFlagsDelegate(agentPointer, flags);

    public bool SetScriptedPositionAndDirection(
      UIntPtr agentPointer,
      ref WorldPosition targetPosition,
      float targetDirection,
      bool addHumanLikeDelay,
      int additionalFlags,
      string debugString)
    {
      byte[] numArray = (byte[]) null;
      if (debugString != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAgent._utf8.GetBytes(debugString, 0, debugString.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBAgent.call_SetScriptedPositionAndDirectionDelegate(agentPointer, ref targetPosition, targetDirection, addHumanLikeDelay, additionalFlags, numArray);
    }

    public bool SetScriptedPosition(
      UIntPtr agentPointer,
      ref WorldPosition targetPosition,
      bool addHumanLikeDelay,
      int additionalFlags,
      string debugString)
    {
      byte[] numArray = (byte[]) null;
      if (debugString != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAgent._utf8.GetBytes(debugString, 0, debugString.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBAgent.call_SetScriptedPositionDelegate(agentPointer, ref targetPosition, addHumanLikeDelay, additionalFlags, numArray);
    }

    public void SetScriptedTargetEntity(
      UIntPtr agentPointer,
      UIntPtr entityId,
      ref WorldPosition specialPosition,
      int additionalFlags)
    {
      ScriptingInterfaceOfIMBAgent.call_SetScriptedTargetEntityDelegate(agentPointer, entityId, ref specialPosition, additionalFlags);
    }

    public void DisableScriptedMovement(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_DisableScriptedMovementDelegate(agentPointer);

    public void DisableScriptedCombatMovement(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_DisableScriptedCombatMovementDelegate(agentPointer);

    public void ForceAiBehaviourSelection(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_ForceAiBehaviourSelectionDelegate(agentPointer);

    public bool HasPathThroughNavigationFaceIdFromDirection(
      UIntPtr agentPointer,
      int navigationFaceId,
      ref Vec2 direction)
    {
      return ScriptingInterfaceOfIMBAgent.call_HasPathThroughNavigationFaceIdFromDirectionDelegate(agentPointer, navigationFaceId, ref direction);
    }

    public bool CanMoveDirectlyToPosition(UIntPtr agentPointer, in WorldPosition position) => ScriptingInterfaceOfIMBAgent.call_CanMoveDirectlyToPositionDelegate(agentPointer, in position);

    public bool CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirection(
      UIntPtr agentPointer,
      int navigationFaceId,
      ref Vec3 direction,
      float overridenCostForFaceId)
    {
      return ScriptingInterfaceOfIMBAgent.call_CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate(agentPointer, navigationFaceId, ref direction, overridenCostForFaceId);
    }

    public float GetPathDistanceToPoint(UIntPtr agentPointer, ref Vec3 direction) => ScriptingInterfaceOfIMBAgent.call_GetPathDistanceToPointDelegate(agentPointer, ref direction);

    public int GetCurrentNavigationFaceId(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetCurrentNavigationFaceIdDelegate(agentPointer);

    public WorldPosition GetWorldPosition(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetWorldPositionDelegate(agentPointer);

    public void SetAgentFacialAnimation(
      UIntPtr agentPointer,
      int channel,
      string animationName,
      bool loop)
    {
      byte[] numArray = (byte[]) null;
      if (animationName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAgent._utf8.GetBytes(animationName, 0, animationName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBAgent.call_SetAgentFacialAnimationDelegate(agentPointer, channel, numArray, loop);
    }

    public string GetAgentFacialAnimation(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAgentFacialAnimationDelegate(agentPointer) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public string GetAgentVoiceDefinition(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_GetAgentVoiceDefinitionDelegate(agentPointer) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public bool AllowFirstPersonWideRotation(UIntPtr agentPointer) => ScriptingInterfaceOfIMBAgent.call_AllowFirstPersonWideRotationDelegate(agentPointer);

    public ulong GetCurrentAnimationFlags(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetCurrentAnimationFlagsDelegate(agentPointer, channelNo);

    public int GetCurrentAction(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetCurrentActionDelegate(agentPointer, channelNo);

    public int GetCurrentActionType(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetCurrentActionTypeDelegate(agentPointer, channelNo);

    public int GetCurrentActionStage(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetCurrentActionStageDelegate(agentPointer, channelNo);

    public int GetCurrentActionDirection(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetCurrentActionDirectionDelegate(agentPointer, channelNo);

    public Vec3 ComputeAnimationDisplacement(UIntPtr agentPointer, float dt) => ScriptingInterfaceOfIMBAgent.call_ComputeAnimationDisplacementDelegate(agentPointer, dt);

    public int GetCurrentActionPriority(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetCurrentActionPriorityDelegate(agentPointer, channelNo);

    public float GetCurrentActionProgress(UIntPtr agentPointer, int channelNo) => ScriptingInterfaceOfIMBAgent.call_GetCurrentActionProgressDelegate(agentPointer, channelNo);

    public void SetCurrentActionProgress(UIntPtr agentPointer, int channelNo, float progress) => ScriptingInterfaceOfIMBAgent.call_SetCurrentActionProgressDelegate(agentPointer, channelNo, progress);

    void IMBAgent.WeaponEquipped(
      UIntPtr agentPointer,
      int equipmentSlot,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      in WeaponData ammoWeaponData,
      WeaponStatsData[] ammoWeaponStatsData,
      int ammoWeaponStatsDataLength,
      UIntPtr weaponEntity,
      bool removeOldWeaponFromScene,
      bool isWieldedOnSpawn)
    {
      this.WeaponEquipped(agentPointer, equipmentSlot, in weaponData, weaponStatsData, weaponStatsDataLength, in ammoWeaponData, ammoWeaponStatsData, ammoWeaponStatsDataLength, weaponEntity, removeOldWeaponFromScene, isWieldedOnSpawn);
    }

    void IMBAgent.AttachWeaponToBone(
      UIntPtr agentPointer,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      UIntPtr weaponEntity,
      sbyte boneIndex,
      ref MatrixFrame attachLocalFrame)
    {
      this.AttachWeaponToBone(agentPointer, in weaponData, weaponStatsData, weaponStatsDataLength, weaponEntity, boneIndex, ref attachLocalFrame);
    }

    void IMBAgent.AttachWeaponToWeaponInSlot(
      UIntPtr agentPointer,
      in WeaponData weaponData,
      WeaponStatsData[] weaponStatsData,
      int weaponStatsDataLength,
      UIntPtr weaponEntity,
      int slotIndex,
      ref MatrixFrame attachLocalFrame)
    {
      this.AttachWeaponToWeaponInSlot(agentPointer, in weaponData, weaponStatsData, weaponStatsDataLength, weaponEntity, slotIndex, ref attachLocalFrame);
    }

    bool IMBAgent.CanMoveDirectlyToPosition(UIntPtr agentPointer, in WorldPosition position) => this.CanMoveDirectlyToPosition(agentPointer, in position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool SetActionChannelDelegate(
      UIntPtr agentPointer,
      int channelNo,
      int actionNo,
      ulong additionalFlags,
      [MarshalAs(UnmanagedType.U1)] bool ignorePriority,
      float blendWithNextActionFactor,
      float actionSpeed,
      float blendInPeriod,
      float blendOutPeriodToNoAnim,
      float startProgress,
      [MarshalAs(UnmanagedType.U1)] bool useLinearSmoothing,
      float blendOutPeriod,
      [MarshalAs(UnmanagedType.U1)] bool forceFaceMorphRestart);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCurrentActionSpeedDelegate(
      UIntPtr agentPointer,
      int channelNo,
      float actionSpeed);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void TickActionChannelsDelegate(UIntPtr agentPointer, float dt);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetActionChannelWeightDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetActionChannelCurrentActionWeightDelegate(
      UIntPtr agentPointer,
      int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetActionSetDelegate(
      UIntPtr agentPointer,
      ref AgentVisualsNativeData agentVisualsNativeData,
      ref AnimationSystemData animationSystemData);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetActionSetNoDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate AgentMovementLockedState GetMovementLockedStateDelegate(
      UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec2 GetTargetPositionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetTargetPositionDelegate(UIntPtr agentPointer, ref Vec2 targetPosition);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetTargetDirectionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetTargetPositionAndDirectionDelegate(
      UIntPtr agentPointer,
      ref Vec2 targetPosition,
      ref Vec3 targetDirection);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearTargetFrameDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetIsLookDirectionLockedDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetIsLookDirectionLockedDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool isLocked);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMonoObjectDelegate(UIntPtr agentPointer, int monoObject);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetEyeGlobalPositionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetChestGlobalPositionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AddMeshToBoneDelegate(
      UIntPtr agentPointer,
      UIntPtr meshPointer,
      sbyte boneIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void RemoveMeshFromBoneDelegate(
      UIntPtr agentPointer,
      UIntPtr meshPointer,
      sbyte boneIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate NativeObjectPointer AddPrefabToAgentBoneDelegate(
      UIntPtr agentPointer,
      byte[] prefabName,
      sbyte boneIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void WieldNextWeaponDelegate(UIntPtr agentPointer, int item_index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void PreloadForRenderingDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAgentScaleDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetCrouchModeDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetWalkModeDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetVisualPositionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsLookRotationInSlowMotionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetLookDirectionAsAngleDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetLookDirectionAsAngleDelegate(UIntPtr agentPointer, float value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.MovementControlFlag AttackDirectionToMovementFlagDelegate(
      UIntPtr agentPointer,
      Agent.UsageDirection direction);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.MovementControlFlag DefendDirectionToMovementFlagDelegate(
      UIntPtr agentPointer,
      Agent.UsageDirection direction);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetHeadCameraModeDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetHeadCameraModeDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool KickClearDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ResetGuardDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.GuardMode GetCurrentGuardModeDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.MovementControlFlag GetDefendMovementFlagDelegate(
      UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.UsageDirection GetAttackDirectionDelegate(
      UIntPtr agentPointer,
      [MarshalAs(UnmanagedType.U1)] bool doAiCheck);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.UsageDirection PlayerAttackDirectionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetWieldedWeaponInfoDelegate(
      UIntPtr agentPointer,
      int handIndex,
      [MarshalAs(UnmanagedType.U1)] ref bool isMeleeWeapon,
      [MarshalAs(UnmanagedType.U1)] ref bool isRangedWeapon);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetImmediateEnemyDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetIsDoingPassiveAttackDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetIsPassiveUsageConditionsAreMetDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetCurrentAimingTurbulanceDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetCurrentAimingErrorDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetBodyRotationConstraintDelegate(
      UIntPtr agentPointer,
      int channelIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.UsageDirection GetActionDirectionDelegate(int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.UsageDirection GetAttackDirectionUsageDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void HandleBlowAuxDelegate(UIntPtr agentPointer, ref Blow blow);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCurrentDisciplineDelegate(UIntPtr agentPointer, float value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void MakeVoiceDelegate(UIntPtr agentPointer, int voiceType, int predictionType);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool SetHandInverseKinematicsFrameDelegate(
      UIntPtr agentPointer,
      ref MatrixFrame leftGlobalFrame,
      ref MatrixFrame rightGlobalFrame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearHandInverseKinematicsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DebugMoreDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsOnLandDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsSlidingDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsRunningAwayDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetCurWeaponOffsetDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetWalkSpeedLimitOfMountableDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void CreateBloodBurstAtLimbDelegate(
      UIntPtr agentPointer,
      sbyte iBone,
      ref Vec3 impactPosition,
      float scale);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetNativeActionIndexDelegate(byte[] actionName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetGuardedAgentIndexDelegate(UIntPtr agentPointer, int guardedAgentIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetColumnwiseFollowAgentDelegate(
      UIntPtr agentPointer,
      int followAgentIndex,
      ref Vec2 followPosition);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetMonsterUsageIndexDelegate(byte[] monsterUsage);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetMissileRangeWithHeightDifferenceDelegate(
      UIntPtr agentPointer,
      float targetZ);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetFormationNoDelegate(UIntPtr agentPointer, int formationNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void EnforceShieldUsageDelegate(
      UIntPtr agentPointer,
      Agent.UsageDirection direction);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetFiringOrderDelegate(UIntPtr agentPointer, int order);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetRidingOrderDelegate(UIntPtr agentPointer, int order);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetDirectionChangeTendencyDelegate(UIntPtr agentPointer, float tendency);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAiBehaviorParamsDelegate(
      UIntPtr agentPointer,
      int behavior,
      float y1,
      float x2,
      float y2,
      float x3,
      float y3);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAllAIBehaviorParamsDelegate(UIntPtr agentPointer, IntPtr behaviorParams);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetBodyArmorMaterialTypeDelegate(
      UIntPtr agentPointer,
      ArmorComponent.ArmorMaterialTypes bodyArmorMaterialType);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetMaximumNumberOfAgentsDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetRunningSimulationDataUntilMaximumSpeedReachedDelegate(
      UIntPtr agentPointer,
      ref float combatAccelerationTime,
      ref float maxSpeed,
      IntPtr speedValues);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetLastTargetVisibilityStateDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTargetRangeDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetMissileRangeDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetSoundOcclusionDelegate(UIntPtr agentPointer, float value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate uint GetMovementFlagsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMovementFlagsDelegate(
      UIntPtr agentPointer,
      Agent.MovementControlFlag value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec2 GetMovementInputVectorDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMovementInputVectorDelegate(UIntPtr agentPointer, Vec2 value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetCollisionCapsuleDelegate(UIntPtr agentPointer, ref CapsuleData value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAttackStateDelegate(UIntPtr agentPointer, int attackState);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate NativeObjectPointer GetAgentVisualsDelegate(
      UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate uint GetEventControlFlagsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetEventControlFlagsDelegate(
      UIntPtr agentPointer,
      Agent.EventControlFlag eventflag);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAveragePingInMillisecondsDelegate(
      UIntPtr agentPointer,
      double averagePingInMilliseconds);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetLookAgentDelegate(UIntPtr agentPointer, UIntPtr lookAtAgentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetLookAgentDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetTargetAgentDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetInteractionAgentDelegate(
      UIntPtr agentPointer,
      UIntPtr interactionAgentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetLookToPointOfInterestDelegate(UIntPtr agentPointer, Vec3 point);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DisableLookToPointOfInterestDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsEnemyDelegate(UIntPtr agentPointer1, UIntPtr agentPointer2);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsFriendDelegate(UIntPtr agentPointer1, UIntPtr agentPointer2);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate uint GetAgentFlagsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAgentFlagsDelegate(UIntPtr agentPointer, uint agentFlags);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate UIntPtr GetSteppedEntityIdDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetNetworkPeerDelegate(UIntPtr agentPointer, int networkPeerIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DieDelegate(UIntPtr agentPointer, ref Blow b, sbyte overrideKillInfo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void MakeDeadDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool isKilled, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetFormationFrameDisabledDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool SetFormationFrameEnabledDelegate(
      UIntPtr agentPointer,
      WorldPosition position,
      Vec2 direction,
      float formationDirectionEnforcingFactor);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetShouldCatchUpWithFormationDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetFormationIntegrityDataDelegate(
      UIntPtr agentPointer,
      Vec2 position,
      Vec2 currentFormationDirection,
      Vec2 averageVelocityOfCloseAgents,
      float averageMaxUnlimitedSpeedOfCloseAgents,
      float deviationOfPositions);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetFormationNeighborhoodDataDelegate(
      UIntPtr agentPointer,
      IntPtr neighborAgentIndices,
      IntPtr neighborAgentLocalDifferences);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetFormationInfoDelegate(
      UIntPtr agentPointer,
      int fileIndex,
      int rankIndex,
      int fileCount,
      int rankCount,
      Vec2 wallDir,
      int unitSpacing);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetRetreatModeDelegate(
      UIntPtr agentPointer,
      WorldPosition retreatPos,
      [MarshalAs(UnmanagedType.U1)] bool retreat);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsRetreatingDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool IsFadingOutDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void StartFadingOutDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate WorldPosition GetRetreatPosDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetTeamDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetTeamDelegate(UIntPtr agentPointer, int teamIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCourageDelegate(UIntPtr agentPointer, float courage);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void UpdateDrivenPropertiesDelegate(UIntPtr agentPointer, IntPtr values);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetLookDirectionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetLookDirectionDelegate(UIntPtr agentPointer, Vec3 lookDirection);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetLookDownLimitDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetPositionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetPositionDelegate(UIntPtr agentPointer, ref Vec3 position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void GetRotationFrameDelegate(UIntPtr agentPointer, ref MatrixFrame outFrame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetEyeGlobalHeightDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec2 GetMovementVelocityDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetAverageVelocityDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool GetIsLeftStanceDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ResetAIDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.AIStateFlag GetAIStateFlagsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAIStateFlagsDelegate(
      UIntPtr agentPointer,
      Agent.AIStateFlag aiStateFlags);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate AgentState GetStateFlagsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetStateFlagsDelegate(UIntPtr agentPointer, AgentState StateFlags);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetMountAgentDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMountAgentDelegate(UIntPtr agentPointer, int mountAgentIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAgentCurrentMoraleDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAgentCurrentMoraleDelegate(UIntPtr agentPointer, float morale);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAlwaysAttackInMeleeDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool attack);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetRiderAgentDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetControllerDelegate(
      UIntPtr agentPointer,
      Agent.ControllerType controller);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.ControllerType GetControllerDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetInitialFrameDelegate(UIntPtr agentPointer, ref MatrixFrame initialFrame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void WeaponEquippedDelegate(
      UIntPtr agentPointer,
      int equipmentSlot,
      in WeaponDataAsNative weaponData,
      IntPtr weaponStatsData,
      int weaponStatsDataLength,
      in WeaponDataAsNative ammoWeaponData,
      IntPtr ammoWeaponStatsData,
      int ammoWeaponStatsDataLength,
      UIntPtr weaponEntity,
      [MarshalAs(UnmanagedType.U1)] bool removeOldWeaponFromScene,
      [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DropItemDelegate(
      UIntPtr agentPointer,
      int itemIndex,
      int pickedUpItemType);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetWeaponAmountInSlotDelegate(
      UIntPtr agentPointer,
      int equipmentSlot,
      short amount,
      [MarshalAs(UnmanagedType.U1)] bool enforcePrimaryItem);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ClearEquipmentDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate EquipmentIndex GetWieldedItemIndexDelegate(
      UIntPtr agentPointer,
      int handIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetWieldedItemIndexAsClientDelegate(
      UIntPtr agentPointer,
      int handIndex,
      int wieldedItemIndex,
      [MarshalAs(UnmanagedType.U1)] bool isWieldedInstantly,
      [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn,
      int mainHandCurrentUsageIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetUsageIndexOfWeaponInSlotAsClientDelegate(
      UIntPtr agentPointer,
      int slotIndex,
      int usageIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetWeaponHitPointsInSlotDelegate(
      UIntPtr agentPointer,
      int wieldedItemIndex,
      short hitPoints);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetWeaponAmmoAsClientDelegate(
      UIntPtr agentPointer,
      int equipmentIndex,
      int ammoEquipmentIndex,
      short ammo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetWeaponReloadPhaseAsClientDelegate(
      UIntPtr agentPointer,
      int wieldedItemIndex,
      short reloadPhase);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetReloadAmmoInSlotDelegate(
      UIntPtr agentPointer,
      int slotIndex,
      int ammoSlotIndex,
      short reloadedAmmo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void StartSwitchingWeaponUsageIndexAsClientDelegate(
      UIntPtr agentPointer,
      int wieldedItemIndex,
      int usageIndex,
      Agent.UsageDirection currentMovementFlagUsageDirection);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void TryToWieldWeaponInSlotDelegate(
      UIntPtr agentPointer,
      int equipmentSlot,
      int type,
      [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate UIntPtr GetWeaponEntityFromEquipmentSlotDelegate(
      UIntPtr agentPointer,
      int equipmentSlot);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void PrepareWeaponForDropInEquipmentSlotDelegate(
      UIntPtr agentPointer,
      int equipmentSlot,
      [MarshalAs(UnmanagedType.U1)] bool showHolsterWithWeapon);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void TryToSheathWeaponInHandDelegate(
      UIntPtr agentPointer,
      int handIndex,
      int type);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void UpdateWeaponsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AttachWeaponToBoneDelegate(
      UIntPtr agentPointer,
      in WeaponDataAsNative weaponData,
      IntPtr weaponStatsData,
      int weaponStatsDataLength,
      UIntPtr weaponEntity,
      sbyte boneIndex,
      ref MatrixFrame attachLocalFrame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void AttachWeaponToWeaponInSlotDelegate(
      UIntPtr agentPointer,
      in WeaponDataAsNative weaponData,
      IntPtr weaponStatsData,
      int weaponStatsDataLength,
      UIntPtr weaponEntity,
      int slotIndex,
      ref MatrixFrame attachLocalFrame);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void BuildDelegate(UIntPtr agentPointer, Vec3 eyeOffsetWrtHead);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate(
      UIntPtr agentPointer,
      int peerIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAgentExcludeStateForFaceGroupIdDelegate(
      UIntPtr agentPointer,
      int faceGroupId,
      [MarshalAs(UnmanagedType.U1)] bool isExcluded);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAgentScaleDelegate(UIntPtr agentPointer, float scale);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec2 GetCurrentVelocityDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTurnSpeedDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetMovementDirectionAsAngleDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetMovementDirectionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMovementDirectionDelegate(UIntPtr agentPointer, ref Vec3 direction);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetCurrentSpeedLimitDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMinimumSpeedDelegate(UIntPtr agentPointer, float speed);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMaximumSpeedLimitDelegate(
      UIntPtr agentPointer,
      float maximumSpeedLimit,
      [MarshalAs(UnmanagedType.U1)] bool isMultiplier);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetMaximumSpeedLimitDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetMaximumForwardUnlimitedSpeedDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetDestinationSpeedDelegate(UIntPtr agentPointer, float speed);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void FadeOutDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool hideInstantly);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void FadeInDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetScriptedFlagsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetScriptedFlagsDelegate(UIntPtr agentPointer, int flags);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetScriptedCombatFlagsDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetScriptedCombatFlagsDelegate(UIntPtr agentPointer, int flags);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool SetScriptedPositionAndDirectionDelegate(
      UIntPtr agentPointer,
      ref WorldPosition targetPosition,
      float targetDirection,
      [MarshalAs(UnmanagedType.U1)] bool addHumanLikeDelay,
      int additionalFlags,
      byte[] debugString);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool SetScriptedPositionDelegate(
      UIntPtr agentPointer,
      ref WorldPosition targetPosition,
      [MarshalAs(UnmanagedType.U1)] bool addHumanLikeDelay,
      int additionalFlags,
      byte[] debugString);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetScriptedTargetEntityDelegate(
      UIntPtr agentPointer,
      UIntPtr entityId,
      ref WorldPosition specialPosition,
      int additionalFlags);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DisableScriptedMovementDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void DisableScriptedCombatMovementDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void ForceAiBehaviourSelectionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool HasPathThroughNavigationFaceIdFromDirectionDelegate(
      UIntPtr agentPointer,
      int navigationFaceId,
      ref Vec2 direction);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool CanMoveDirectlyToPositionDelegate(
      UIntPtr agentPointer,
      in WorldPosition position);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate(
      UIntPtr agentPointer,
      int navigationFaceId,
      ref Vec3 direction,
      float overridenCostForFaceId);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetPathDistanceToPointDelegate(UIntPtr agentPointer, ref Vec3 direction);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetCurrentNavigationFaceIdDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate WorldPosition GetWorldPositionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetAgentFacialAnimationDelegate(
      UIntPtr agentPointer,
      int channel,
      byte[] animationName,
      [MarshalAs(UnmanagedType.U1)] bool loop);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetAgentFacialAnimationDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetAgentVoiceDefinitionDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool AllowFirstPersonWideRotationDelegate(UIntPtr agentPointer);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate ulong GetCurrentAnimationFlagsDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetCurrentActionDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetCurrentActionTypeDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetCurrentActionStageDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetCurrentActionDirectionDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 ComputeAnimationDisplacementDelegate(UIntPtr agentPointer, float dt);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetCurrentActionPriorityDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetCurrentActionProgressDelegate(UIntPtr agentPointer, int channelNo);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetCurrentActionProgressDelegate(
      UIntPtr agentPointer,
      int channelNo,
      float progress);
  }
}
