// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBWorld
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.DotNet;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBWorld : IMBWorld
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBWorld.GetTimeDelegate call_GetTimeDelegate;
    public static ScriptingInterfaceOfIMBWorld.GetLastMessagesDelegate call_GetLastMessagesDelegate;
    public static ScriptingInterfaceOfIMBWorld.GetGameTypeDelegate call_GetGameTypeDelegate;
    public static ScriptingInterfaceOfIMBWorld.SetGameTypeDelegate call_SetGameTypeDelegate;
    public static ScriptingInterfaceOfIMBWorld.PauseGameDelegate call_PauseGameDelegate;
    public static ScriptingInterfaceOfIMBWorld.UnpauseGameDelegate call_UnpauseGameDelegate;
    public static ScriptingInterfaceOfIMBWorld.SetMeshUsedDelegate call_SetMeshUsedDelegate;
    public static ScriptingInterfaceOfIMBWorld.SetMaterialUsedDelegate call_SetMaterialUsedDelegate;
    public static ScriptingInterfaceOfIMBWorld.SetBodyUsedDelegate call_SetBodyUsedDelegate;
    public static ScriptingInterfaceOfIMBWorld.FixSkeletonsDelegate call_FixSkeletonsDelegate;
    public static ScriptingInterfaceOfIMBWorld.CheckResourceModificationsDelegate call_CheckResourceModificationsDelegate;

    public float GetTime(MBCommon.TimeType timeType) => ScriptingInterfaceOfIMBWorld.call_GetTimeDelegate(timeType);

    public string GetLastMessages() => ScriptingInterfaceOfIMBWorld.call_GetLastMessagesDelegate() != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public int GetGameType() => ScriptingInterfaceOfIMBWorld.call_GetGameTypeDelegate();

    public void SetGameType(int gameType) => ScriptingInterfaceOfIMBWorld.call_SetGameTypeDelegate(gameType);

    public void PauseGame() => ScriptingInterfaceOfIMBWorld.call_PauseGameDelegate();

    public void UnpauseGame() => ScriptingInterfaceOfIMBWorld.call_UnpauseGameDelegate();

    public void SetMeshUsed(string meshName)
    {
      byte[] numArray = (byte[]) null;
      if (meshName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBWorld._utf8.GetBytes(meshName, 0, meshName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBWorld.call_SetMeshUsedDelegate(numArray);
    }

    public void SetMaterialUsed(string materialName)
    {
      byte[] numArray = (byte[]) null;
      if (materialName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBWorld._utf8.GetBytes(materialName, 0, materialName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBWorld.call_SetMaterialUsedDelegate(numArray);
    }

    public void SetBodyUsed(string bodyName)
    {
      byte[] numArray = (byte[]) null;
      if (bodyName != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBWorld._utf8.GetBytes(bodyName, 0, bodyName.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      ScriptingInterfaceOfIMBWorld.call_SetBodyUsedDelegate(numArray);
    }

    public void FixSkeletons() => ScriptingInterfaceOfIMBWorld.call_FixSkeletonsDelegate();

    public void CheckResourceModifications() => ScriptingInterfaceOfIMBWorld.call_CheckResourceModificationsDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetTimeDelegate(MBCommon.TimeType timeType);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetLastMessagesDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetGameTypeDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetGameTypeDelegate(int gameType);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void PauseGameDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void UnpauseGameDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMeshUsedDelegate(byte[] meshName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetMaterialUsedDelegate(byte[] materialName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void SetBodyUsedDelegate(byte[] bodyName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void FixSkeletonsDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate void CheckResourceModificationsDelegate();
  }
}
