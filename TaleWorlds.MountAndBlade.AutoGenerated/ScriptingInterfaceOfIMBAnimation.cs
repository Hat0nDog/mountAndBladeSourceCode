// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.ScriptingInterfaceOfIMBAnimation
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.DotNet;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal class ScriptingInterfaceOfIMBAnimation : IMBAnimation
  {
    private static readonly Encoding _utf8 = Encoding.UTF8;
    public static ScriptingInterfaceOfIMBAnimation.GetIDWithIndexDelegate call_GetIDWithIndexDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetIndexWithIDDelegate call_GetIndexWithIDDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetDisplacementVectorDelegate call_GetDisplacementVectorDelegate;
    public static ScriptingInterfaceOfIMBAnimation.CheckAnimationClipExistsDelegate call_CheckAnimationClipExistsDelegate;
    public static ScriptingInterfaceOfIMBAnimation.AnimationIndexOfActionCodeDelegate call_AnimationIndexOfActionCodeDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationFlagsDelegate call_GetAnimationFlagsDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetActionTypeDelegate call_GetActionTypeDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationDurationDelegate call_GetAnimationDurationDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationParameter1Delegate call_GetAnimationParameter1Delegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationParameter2Delegate call_GetAnimationParameter2Delegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationParameter3Delegate call_GetAnimationParameter3Delegate;
    public static ScriptingInterfaceOfIMBAnimation.GetActionAnimationDurationDelegate call_GetActionAnimationDurationDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationNameDelegate call_GetAnimationNameDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationContinueToActionDelegate call_GetAnimationContinueToActionDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetAnimationBlendInPeriodDelegate call_GetAnimationBlendInPeriodDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetActionBlendOutStartProgressDelegate call_GetActionBlendOutStartProgressDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetActionCodeWithNameDelegate call_GetActionCodeWithNameDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetActionNameWithCodeDelegate call_GetActionNameWithCodeDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetNumActionCodesDelegate call_GetNumActionCodesDelegate;
    public static ScriptingInterfaceOfIMBAnimation.GetNumAnimationsDelegate call_GetNumAnimationsDelegate;

    public string GetIDWithIndex(int index) => ScriptingInterfaceOfIMBAnimation.call_GetIDWithIndexDelegate(index) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public int GetIndexWithID(string id)
    {
      byte[] numArray = (byte[]) null;
      if (id != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAnimation._utf8.GetBytes(id, 0, id.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBAnimation.call_GetIndexWithIDDelegate(numArray);
    }

    public Vec3 GetDisplacementVector(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_GetDisplacementVectorDelegate(actionSetNo, actionIndex);

    public bool CheckAnimationClipExists(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_CheckAnimationClipExistsDelegate(actionSetNo, actionIndex);

    public int AnimationIndexOfActionCode(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_AnimationIndexOfActionCodeDelegate(actionSetNo, actionIndex);

    public AnimFlags GetAnimationFlags(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationFlagsDelegate(actionSetNo, actionIndex);

    public Agent.ActionCodeType GetActionType(int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_GetActionTypeDelegate(actionIndex);

    public float GetAnimationDuration(int animationIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationDurationDelegate(animationIndex);

    public float GetAnimationParameter1(int animationIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationParameter1Delegate(animationIndex);

    public float GetAnimationParameter2(int animationIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationParameter2Delegate(animationIndex);

    public float GetAnimationParameter3(int animationIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationParameter3Delegate(animationIndex);

    public float GetActionAnimationDuration(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_GetActionAnimationDurationDelegate(actionSetNo, actionIndex);

    public string GetAnimationName(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationNameDelegate(actionSetNo, actionIndex) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public int GetAnimationContinueToAction(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationContinueToActionDelegate(actionSetNo, actionIndex);

    public float GetAnimationBlendInPeriod(int animationIndex) => ScriptingInterfaceOfIMBAnimation.call_GetAnimationBlendInPeriodDelegate(animationIndex);

    public float GetActionBlendOutStartProgress(int actionSetNo, int actionIndex) => ScriptingInterfaceOfIMBAnimation.call_GetActionBlendOutStartProgressDelegate(actionSetNo, actionIndex);

    public int GetActionCodeWithName(string name)
    {
      byte[] numArray = (byte[]) null;
      if (name != null)
      {
        numArray = CallbackStringBufferManager.StringBuffer0;
        int bytes = ScriptingInterfaceOfIMBAnimation._utf8.GetBytes(name, 0, name.Length, numArray, 0);
        numArray[bytes] = (byte) 0;
      }
      return ScriptingInterfaceOfIMBAnimation.call_GetActionCodeWithNameDelegate(numArray);
    }

    public string GetActionNameWithCode(int index) => ScriptingInterfaceOfIMBAnimation.call_GetActionNameWithCodeDelegate(index) != 1 ? (string) null : Managed.ReturnValueFromEngine;

    public int GetNumActionCodes() => ScriptingInterfaceOfIMBAnimation.call_GetNumActionCodesDelegate();

    public int GetNumAnimations() => ScriptingInterfaceOfIMBAnimation.call_GetNumAnimationsDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetIDWithIndexDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetIndexWithIDDelegate(byte[] id);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Vec3 GetDisplacementVectorDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    [return: MarshalAs(UnmanagedType.U1)]
    public delegate bool CheckAnimationClipExistsDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int AnimationIndexOfActionCodeDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate AnimFlags GetAnimationFlagsDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate Agent.ActionCodeType GetActionTypeDelegate(int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAnimationDurationDelegate(int animationIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAnimationParameter1Delegate(int animationIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAnimationParameter2Delegate(int animationIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAnimationParameter3Delegate(int animationIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetActionAnimationDurationDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetAnimationNameDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetAnimationContinueToActionDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetAnimationBlendInPeriodDelegate(int animationIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate float GetActionBlendOutStartProgressDelegate(int actionSetNo, int actionIndex);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetActionCodeWithNameDelegate(byte[] name);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetActionNameWithCodeDelegate(int index);

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetNumActionCodesDelegate();

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    [SuppressUnmanagedCodeSecurity]
    [MonoNativeFunctionWrapper]
    public delegate int GetNumAnimationsDelegate();
  }
}
