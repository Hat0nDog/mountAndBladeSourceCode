// Decompiled with JetBrains decompiler
// Type: ManagedCallbacks.CoreCallbacksGenerated
// Assembly: TaleWorlds.MountAndBlade.AutoGenerated, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D02C25D1-9727-49C6-A24A-EE3800F0364C
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.MountAndBlade.AutoGenerated.dll

using System;
using System.Runtime.InteropServices;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;

namespace ManagedCallbacks
{
  internal static class CoreCallbacksGenerated
  {
    internal static Delegate[] Delegates { get; private set; }

    public static void Initialize()
    {
      CoreCallbacksGenerated.Delegates = new Delegate[97];
      CoreCallbacksGenerated.Delegates[0] = (Delegate) new CoreCallbacksGenerated.Agent_OnMount_delegate(CoreCallbacksGenerated.Agent_OnMount);
      CoreCallbacksGenerated.Delegates[1] = (Delegate) new CoreCallbacksGenerated.Agent_OnDismount_delegate(CoreCallbacksGenerated.Agent_OnDismount);
      CoreCallbacksGenerated.Delegates[2] = (Delegate) new CoreCallbacksGenerated.Agent_OnAgentAlarmedStateChanged_delegate(CoreCallbacksGenerated.Agent_OnAgentAlarmedStateChanged);
      CoreCallbacksGenerated.Delegates[3] = (Delegate) new CoreCallbacksGenerated.Agent_IsInSameFormationWith_delegate(CoreCallbacksGenerated.Agent_IsInSameFormationWith);
      CoreCallbacksGenerated.Delegates[4] = (Delegate) new CoreCallbacksGenerated.Agent_GetFormationUnitSpacing_delegate(CoreCallbacksGenerated.Agent_GetFormationUnitSpacing);
      CoreCallbacksGenerated.Delegates[5] = (Delegate) new CoreCallbacksGenerated.Agent_GetSoundAndCollisionInfoClassName_delegate(CoreCallbacksGenerated.Agent_GetSoundAndCollisionInfoClassName);
      CoreCallbacksGenerated.Delegates[6] = (Delegate) new CoreCallbacksGenerated.Agent_UpdateAgentStats_delegate(CoreCallbacksGenerated.Agent_UpdateAgentStats);
      CoreCallbacksGenerated.Delegates[7] = (Delegate) new CoreCallbacksGenerated.Agent_SetAgentAIPerformingRetreatBehavior_delegate(CoreCallbacksGenerated.Agent_SetAgentAIPerformingRetreatBehavior);
      CoreCallbacksGenerated.Delegates[8] = (Delegate) new CoreCallbacksGenerated.Agent_OnRetreating_delegate(CoreCallbacksGenerated.Agent_OnRetreating);
      CoreCallbacksGenerated.Delegates[9] = (Delegate) new CoreCallbacksGenerated.Agent_GetMissileRangeWithHeightDifferenceAux_delegate(CoreCallbacksGenerated.Agent_GetMissileRangeWithHeightDifferenceAux);
      CoreCallbacksGenerated.Delegates[10] = (Delegate) new CoreCallbacksGenerated.Agent_OnWieldedItemIndexChange_delegate(CoreCallbacksGenerated.Agent_OnWieldedItemIndexChange);
      CoreCallbacksGenerated.Delegates[11] = (Delegate) new CoreCallbacksGenerated.Agent_OnRemoveWeapon_delegate(CoreCallbacksGenerated.Agent_OnRemoveWeapon);
      CoreCallbacksGenerated.Delegates[12] = (Delegate) new CoreCallbacksGenerated.Agent_OnWeaponUsageIndexChange_delegate(CoreCallbacksGenerated.Agent_OnWeaponUsageIndexChange);
      CoreCallbacksGenerated.Delegates[13] = (Delegate) new CoreCallbacksGenerated.Agent_OnWeaponSwitchingToAlternativeStart_delegate(CoreCallbacksGenerated.Agent_OnWeaponSwitchingToAlternativeStart);
      CoreCallbacksGenerated.Delegates[14] = (Delegate) new CoreCallbacksGenerated.Agent_OnWeaponReloadPhaseChange_delegate(CoreCallbacksGenerated.Agent_OnWeaponReloadPhaseChange);
      CoreCallbacksGenerated.Delegates[15] = (Delegate) new CoreCallbacksGenerated.Agent_OnWeaponAmountChange_delegate(CoreCallbacksGenerated.Agent_OnWeaponAmountChange);
      CoreCallbacksGenerated.Delegates[16] = (Delegate) new CoreCallbacksGenerated.Agent_OnWeaponAmmoReload_delegate(CoreCallbacksGenerated.Agent_OnWeaponAmmoReload);
      CoreCallbacksGenerated.Delegates[17] = (Delegate) new CoreCallbacksGenerated.Agent_OnWeaponAmmoConsume_delegate(CoreCallbacksGenerated.Agent_OnWeaponAmmoConsume);
      CoreCallbacksGenerated.Delegates[18] = (Delegate) new CoreCallbacksGenerated.Agent_OnShieldDamaged_delegate(CoreCallbacksGenerated.Agent_OnShieldDamaged);
      CoreCallbacksGenerated.Delegates[19] = (Delegate) new CoreCallbacksGenerated.Agent_OnWeaponAmmoRemoved_delegate(CoreCallbacksGenerated.Agent_OnWeaponAmmoRemoved);
      CoreCallbacksGenerated.Delegates[20] = (Delegate) new CoreCallbacksGenerated.Agent_UpdateMountAgentCache_delegate(CoreCallbacksGenerated.Agent_UpdateMountAgentCache);
      CoreCallbacksGenerated.Delegates[21] = (Delegate) new CoreCallbacksGenerated.Agent_UpdateRiderAgentCache_delegate(CoreCallbacksGenerated.Agent_UpdateRiderAgentCache);
      CoreCallbacksGenerated.Delegates[22] = (Delegate) new CoreCallbacksGenerated.BannerlordTableauManager_RequestCharacterTableauSetup_delegate(CoreCallbacksGenerated.BannerlordTableauManager_RequestCharacterTableauSetup);
      CoreCallbacksGenerated.Delegates[23] = (Delegate) new CoreCallbacksGenerated.BannerlordTableauManager_RegisterCharacterTableauScene_delegate(CoreCallbacksGenerated.BannerlordTableauManager_RegisterCharacterTableauScene);
      CoreCallbacksGenerated.Delegates[24] = (Delegate) new CoreCallbacksGenerated.WeaponComponentMissionExtensions_CalculateCenterOfMass_delegate(CoreCallbacksGenerated.WeaponComponentMissionExtensions_CalculateCenterOfMass);
      CoreCallbacksGenerated.Delegates[25] = (Delegate) new CoreCallbacksGenerated.CoreManaged_Start_delegate(CoreCallbacksGenerated.CoreManaged_Start);
      CoreCallbacksGenerated.Delegates[26] = (Delegate) new CoreCallbacksGenerated.CoreManaged_CheckSharedStrctureSizes_delegate(CoreCallbacksGenerated.CoreManaged_CheckSharedStrctureSizes);
      CoreCallbacksGenerated.Delegates[27] = (Delegate) new CoreCallbacksGenerated.CoreManaged_Initialize_delegate(CoreCallbacksGenerated.CoreManaged_Initialize);
      CoreCallbacksGenerated.Delegates[28] = (Delegate) new CoreCallbacksGenerated.CoreManaged_Finalize_delegate(CoreCallbacksGenerated.CoreManaged_Finalize);
      CoreCallbacksGenerated.Delegates[29] = (Delegate) new CoreCallbacksGenerated.CoreManaged_CheckSharedStructureSizes_delegate(CoreCallbacksGenerated.CoreManaged_CheckSharedStructureSizes);
      CoreCallbacksGenerated.Delegates[30] = (Delegate) new CoreCallbacksGenerated.CoreManaged_EngineApiMethodInterfaceInitializer_delegate(CoreCallbacksGenerated.CoreManaged_EngineApiMethodInterfaceInitializer);
      CoreCallbacksGenerated.Delegates[31] = (Delegate) new CoreCallbacksGenerated.CoreManaged_FillEngineApiPointers_delegate(CoreCallbacksGenerated.CoreManaged_FillEngineApiPointers);
      CoreCallbacksGenerated.Delegates[32] = (Delegate) new CoreCallbacksGenerated.Mission_EndMission_delegate(CoreCallbacksGenerated.Mission_EndMission);
      CoreCallbacksGenerated.Delegates[33] = (Delegate) new CoreCallbacksGenerated.Mission_OnAgentShootMissile_delegate(CoreCallbacksGenerated.Mission_OnAgentShootMissile);
      CoreCallbacksGenerated.Delegates[34] = (Delegate) new CoreCallbacksGenerated.Mission_GetAgentState_delegate(CoreCallbacksGenerated.Mission_GetAgentState);
      CoreCallbacksGenerated.Delegates[35] = (Delegate) new CoreCallbacksGenerated.Mission_CanGiveDamageToAgentShield_delegate(CoreCallbacksGenerated.Mission_CanGiveDamageToAgentShield);
      CoreCallbacksGenerated.Delegates[36] = (Delegate) new CoreCallbacksGenerated.Mission_MeleeHitCallback_delegate(CoreCallbacksGenerated.Mission_MeleeHitCallback);
      CoreCallbacksGenerated.Delegates[37] = (Delegate) new CoreCallbacksGenerated.Mission_MissileAreaDamageCallback_delegate(CoreCallbacksGenerated.Mission_MissileAreaDamageCallback);
      CoreCallbacksGenerated.Delegates[38] = (Delegate) new CoreCallbacksGenerated.Mission_OnMissileRemoved_delegate(CoreCallbacksGenerated.Mission_OnMissileRemoved);
      CoreCallbacksGenerated.Delegates[39] = (Delegate) new CoreCallbacksGenerated.Mission_MissileHitCallback_delegate(CoreCallbacksGenerated.Mission_MissileHitCallback);
      CoreCallbacksGenerated.Delegates[40] = (Delegate) new CoreCallbacksGenerated.Mission_ChargeDamageCallback_delegate(CoreCallbacksGenerated.Mission_ChargeDamageCallback);
      CoreCallbacksGenerated.Delegates[41] = (Delegate) new CoreCallbacksGenerated.Mission_FallDamageCallback_delegate(CoreCallbacksGenerated.Mission_FallDamageCallback);
      CoreCallbacksGenerated.Delegates[42] = (Delegate) new CoreCallbacksGenerated.Mission_GetDefendCollisionResults_delegate(CoreCallbacksGenerated.Mission_GetDefendCollisionResults);
      CoreCallbacksGenerated.Delegates[43] = (Delegate) new CoreCallbacksGenerated.Mission_DebugLogNativeMissionNetworkEvent_delegate(CoreCallbacksGenerated.Mission_DebugLogNativeMissionNetworkEvent);
      CoreCallbacksGenerated.Delegates[44] = (Delegate) new CoreCallbacksGenerated.Mission_OnAgentAddedAsCorpse_delegate(CoreCallbacksGenerated.Mission_OnAgentAddedAsCorpse);
      CoreCallbacksGenerated.Delegates[45] = (Delegate) new CoreCallbacksGenerated.Mission_OnAgentDeleted_delegate(CoreCallbacksGenerated.Mission_OnAgentDeleted);
      CoreCallbacksGenerated.Delegates[46] = (Delegate) new CoreCallbacksGenerated.Mission_OnAgentRemoved_delegate(CoreCallbacksGenerated.Mission_OnAgentRemoved);
      CoreCallbacksGenerated.Delegates[47] = (Delegate) new CoreCallbacksGenerated.Mission_OnAgentHit_delegate(CoreCallbacksGenerated.Mission_OnAgentHit);
      CoreCallbacksGenerated.Delegates[48] = (Delegate) new CoreCallbacksGenerated.Mission_SpawnWeaponAsDropFromAgent_delegate(CoreCallbacksGenerated.Mission_SpawnWeaponAsDropFromAgent);
      CoreCallbacksGenerated.Delegates[49] = (Delegate) new CoreCallbacksGenerated.Mission_OnPreTick_delegate(CoreCallbacksGenerated.Mission_OnPreTick);
      CoreCallbacksGenerated.Delegates[50] = (Delegate) new CoreCallbacksGenerated.Mission_ApplySkeletonScaleToAllEquippedItems_delegate(CoreCallbacksGenerated.Mission_ApplySkeletonScaleToAllEquippedItems);
      CoreCallbacksGenerated.Delegates[51] = (Delegate) new CoreCallbacksGenerated.Mission_ResetMission_delegate(CoreCallbacksGenerated.Mission_ResetMission);
      CoreCallbacksGenerated.Delegates[52] = (Delegate) new CoreCallbacksGenerated.Mission_OnSceneCreated_delegate(CoreCallbacksGenerated.Mission_OnSceneCreated);
      CoreCallbacksGenerated.Delegates[53] = (Delegate) new CoreCallbacksGenerated.MBEditor_SetEditorScene_delegate(CoreCallbacksGenerated.MBEditor_SetEditorScene);
      CoreCallbacksGenerated.Delegates[54] = (Delegate) new CoreCallbacksGenerated.MBEditor_CloseEditorScene_delegate(CoreCallbacksGenerated.MBEditor_CloseEditorScene);
      CoreCallbacksGenerated.Delegates[55] = (Delegate) new CoreCallbacksGenerated.MBEditor_DestroyEditor_delegate(CoreCallbacksGenerated.MBEditor_DestroyEditor);
      CoreCallbacksGenerated.Delegates[56] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_GetServerId_delegate(CoreCallbacksGenerated.MBMultiplayerData_GetServerId);
      CoreCallbacksGenerated.Delegates[57] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_GetServerName_delegate(CoreCallbacksGenerated.MBMultiplayerData_GetServerName);
      CoreCallbacksGenerated.Delegates[58] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_GetGameModule_delegate(CoreCallbacksGenerated.MBMultiplayerData_GetGameModule);
      CoreCallbacksGenerated.Delegates[59] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_GetGameType_delegate(CoreCallbacksGenerated.MBMultiplayerData_GetGameType);
      CoreCallbacksGenerated.Delegates[60] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_GetMap_delegate(CoreCallbacksGenerated.MBMultiplayerData_GetMap);
      CoreCallbacksGenerated.Delegates[61] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_GetCurrentPlayerCount_delegate(CoreCallbacksGenerated.MBMultiplayerData_GetCurrentPlayerCount);
      CoreCallbacksGenerated.Delegates[62] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_GetPlayerCountLimit_delegate(CoreCallbacksGenerated.MBMultiplayerData_GetPlayerCountLimit);
      CoreCallbacksGenerated.Delegates[63] = (Delegate) new CoreCallbacksGenerated.MBMultiplayerData_UpdateGameServerInfo_delegate(CoreCallbacksGenerated.MBMultiplayerData_UpdateGameServerInfo);
      CoreCallbacksGenerated.Delegates[64] = (Delegate) new CoreCallbacksGenerated.Module_Initialize_delegate(CoreCallbacksGenerated.Module_Initialize);
      CoreCallbacksGenerated.Delegates[65] = (Delegate) new CoreCallbacksGenerated.Module_RunTest_delegate(CoreCallbacksGenerated.Module_RunTest);
      CoreCallbacksGenerated.Delegates[66] = (Delegate) new CoreCallbacksGenerated.Module_TickTest_delegate(CoreCallbacksGenerated.Module_TickTest);
      CoreCallbacksGenerated.Delegates[67] = (Delegate) new CoreCallbacksGenerated.Module_OnDumpCreated_delegate(CoreCallbacksGenerated.Module_OnDumpCreated);
      CoreCallbacksGenerated.Delegates[68] = (Delegate) new CoreCallbacksGenerated.Module_OnDumpCreationStarted_delegate(CoreCallbacksGenerated.Module_OnDumpCreationStarted);
      CoreCallbacksGenerated.Delegates[69] = (Delegate) new CoreCallbacksGenerated.Module_GetMetaMeshPackageMapping_delegate(CoreCallbacksGenerated.Module_GetMetaMeshPackageMapping);
      CoreCallbacksGenerated.Delegates[70] = (Delegate) new CoreCallbacksGenerated.Module_GetItemMeshNames_delegate(CoreCallbacksGenerated.Module_GetItemMeshNames);
      CoreCallbacksGenerated.Delegates[71] = (Delegate) new CoreCallbacksGenerated.Module_GetHorseMaterialNames_delegate(CoreCallbacksGenerated.Module_GetHorseMaterialNames);
      CoreCallbacksGenerated.Delegates[72] = (Delegate) new CoreCallbacksGenerated.Module_SetEditorScreenAsRootScreen_delegate(CoreCallbacksGenerated.Module_SetEditorScreenAsRootScreen);
      CoreCallbacksGenerated.Delegates[73] = (Delegate) new CoreCallbacksGenerated.Module_GetMissionControllerClassNames_delegate(CoreCallbacksGenerated.Module_GetMissionControllerClassNames);
      CoreCallbacksGenerated.Delegates[74] = (Delegate) new CoreCallbacksGenerated.Module_MBThrowException_delegate(CoreCallbacksGenerated.Module_MBThrowException);
      CoreCallbacksGenerated.Delegates[75] = (Delegate) new CoreCallbacksGenerated.Module_OnEnterEditMode_delegate(CoreCallbacksGenerated.Module_OnEnterEditMode);
      CoreCallbacksGenerated.Delegates[76] = (Delegate) new CoreCallbacksGenerated.Module_GetInstance_delegate(CoreCallbacksGenerated.Module_GetInstance);
      CoreCallbacksGenerated.Delegates[77] = (Delegate) new CoreCallbacksGenerated.Module_SetLoadingFinished_delegate(CoreCallbacksGenerated.Module_SetLoadingFinished);
      CoreCallbacksGenerated.Delegates[78] = (Delegate) new CoreCallbacksGenerated.Module_OnCloseSceneEditorPresentation_delegate(CoreCallbacksGenerated.Module_OnCloseSceneEditorPresentation);
      CoreCallbacksGenerated.Delegates[79] = (Delegate) new CoreCallbacksGenerated.Module_OnSceneEditorModeOver_delegate(CoreCallbacksGenerated.Module_OnSceneEditorModeOver);
      CoreCallbacksGenerated.Delegates[80] = (Delegate) new CoreCallbacksGenerated.Module_OnSkinsXMLHasChanged_delegate(CoreCallbacksGenerated.Module_OnSkinsXMLHasChanged);
      CoreCallbacksGenerated.Delegates[81] = (Delegate) new CoreCallbacksGenerated.Module_OnImguiProfilerTick_delegate(CoreCallbacksGenerated.Module_OnImguiProfilerTick);
      CoreCallbacksGenerated.Delegates[82] = (Delegate) new CoreCallbacksGenerated.Module_CreateProcessedSkinsXMLForNative_delegate(CoreCallbacksGenerated.Module_CreateProcessedSkinsXMLForNative);
      CoreCallbacksGenerated.Delegates[83] = (Delegate) new CoreCallbacksGenerated.Module_CreateProcessedActionSetsXMLForNative_delegate(CoreCallbacksGenerated.Module_CreateProcessedActionSetsXMLForNative);
      CoreCallbacksGenerated.Delegates[84] = (Delegate) new CoreCallbacksGenerated.Module_CreateProcessedActionTypesXMLForNative_delegate(CoreCallbacksGenerated.Module_CreateProcessedActionTypesXMLForNative);
      CoreCallbacksGenerated.Delegates[85] = (Delegate) new CoreCallbacksGenerated.Module_CreateProcessedAnimationsXMLForNative_delegate(CoreCallbacksGenerated.Module_CreateProcessedAnimationsXMLForNative);
      CoreCallbacksGenerated.Delegates[86] = (Delegate) new CoreCallbacksGenerated.Module_CreateProcessedModuleDataXMLForNative_delegate(CoreCallbacksGenerated.Module_CreateProcessedModuleDataXMLForNative);
      CoreCallbacksGenerated.Delegates[87] = (Delegate) new CoreCallbacksGenerated.Module_StartMissionForEditor_delegate(CoreCallbacksGenerated.Module_StartMissionForEditor);
      CoreCallbacksGenerated.Delegates[88] = (Delegate) new CoreCallbacksGenerated.Module_StartMissionForReplayEditor_delegate(CoreCallbacksGenerated.Module_StartMissionForReplayEditor);
      CoreCallbacksGenerated.Delegates[89] = (Delegate) new CoreCallbacksGenerated.GameNetwork_HandleRemovePlayer_delegate(CoreCallbacksGenerated.GameNetwork_HandleRemovePlayer);
      CoreCallbacksGenerated.Delegates[90] = (Delegate) new CoreCallbacksGenerated.GameNetwork_HandleDisconnect_delegate(CoreCallbacksGenerated.GameNetwork_HandleDisconnect);
      CoreCallbacksGenerated.Delegates[91] = (Delegate) new CoreCallbacksGenerated.GameNetwork_HandleNetworkPacketAsServer_delegate(CoreCallbacksGenerated.GameNetwork_HandleNetworkPacketAsServer);
      CoreCallbacksGenerated.Delegates[92] = (Delegate) new CoreCallbacksGenerated.GameNetwork_HandleConsoleCommand_delegate(CoreCallbacksGenerated.GameNetwork_HandleConsoleCommand);
      CoreCallbacksGenerated.Delegates[93] = (Delegate) new CoreCallbacksGenerated.GameNetwork_HandleNetworkPacketAsClient_delegate(CoreCallbacksGenerated.GameNetwork_HandleNetworkPacketAsClient);
      CoreCallbacksGenerated.Delegates[94] = (Delegate) new CoreCallbacksGenerated.GameNetwork_SyncRelevantGameOptionsToServer_delegate(CoreCallbacksGenerated.GameNetwork_SyncRelevantGameOptionsToServer);
      CoreCallbacksGenerated.Delegates[95] = (Delegate) new CoreCallbacksGenerated.ManagedOptions_GetConfigCount_delegate(CoreCallbacksGenerated.ManagedOptions_GetConfigCount);
      CoreCallbacksGenerated.Delegates[96] = (Delegate) new CoreCallbacksGenerated.ManagedOptions_GetConfigValue_delegate(CoreCallbacksGenerated.ManagedOptions_GetConfigValue);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnMount_delegate))]
    internal static void Agent_OnMount(int thisPointer, int mount) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnMount(DotNetObject.GetManagedObjectWithId(mount) as Agent);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnDismount_delegate))]
    internal static void Agent_OnDismount(int thisPointer, int mount) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnDismount(DotNetObject.GetManagedObjectWithId(mount) as Agent);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnAgentAlarmedStateChanged_delegate))]
    internal static void Agent_OnAgentAlarmedStateChanged(int thisPointer, Agent.AIStateFlag flag) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnAgentAlarmedStateChanged(flag);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_IsInSameFormationWith_delegate))]
    internal static bool Agent_IsInSameFormationWith(int thisPointer, int otherAgent) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).IsInSameFormationWith(DotNetObject.GetManagedObjectWithId(otherAgent) as Agent);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_GetFormationUnitSpacing_delegate))]
    internal static int Agent_GetFormationUnitSpacing(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).GetFormationUnitSpacing();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_GetSoundAndCollisionInfoClassName_delegate))]
    internal static string Agent_GetSoundAndCollisionInfoClassName(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).GetSoundAndCollisionInfoClassName();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_UpdateAgentStats_delegate))]
    internal static void Agent_UpdateAgentStats(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).UpdateAgentStats();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_SetAgentAIPerformingRetreatBehavior_delegate))]
    internal static void Agent_SetAgentAIPerformingRetreatBehavior(
      int thisPointer,
      bool isAgentAIPerformingRetreatBehavior)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).SetAgentAIPerformingRetreatBehavior(isAgentAIPerformingRetreatBehavior);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnRetreating_delegate))]
    internal static void Agent_OnRetreating(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnRetreating();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_GetMissileRangeWithHeightDifferenceAux_delegate))]
    internal static float Agent_GetMissileRangeWithHeightDifferenceAux(
      int thisPointer,
      float targetZ)
    {
      return (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).GetMissileRangeWithHeightDifferenceAux(targetZ);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWieldedItemIndexChange_delegate))]
    internal static void Agent_OnWieldedItemIndexChange(
      int thisPointer,
      bool isOffHand,
      bool isWieldedInstantly,
      bool isWieldedOnSpawn)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWieldedItemIndexChange(isOffHand, isWieldedInstantly, isWieldedOnSpawn);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnRemoveWeapon_delegate))]
    internal static void Agent_OnRemoveWeapon(int thisPointer, EquipmentIndex slotIndex) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnRemoveWeapon(slotIndex);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWeaponUsageIndexChange_delegate))]
    internal static void Agent_OnWeaponUsageIndexChange(
      int thisPointer,
      EquipmentIndex slotIndex,
      int usageIndex)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWeaponUsageIndexChange(slotIndex, usageIndex);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWeaponSwitchingToAlternativeStart_delegate))]
    internal static void Agent_OnWeaponSwitchingToAlternativeStart(
      int thisPointer,
      EquipmentIndex slotIndex,
      int usageIndex)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWeaponSwitchingToAlternativeStart(slotIndex, usageIndex);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWeaponReloadPhaseChange_delegate))]
    internal static void Agent_OnWeaponReloadPhaseChange(
      int thisPointer,
      EquipmentIndex slotIndex,
      short reloadPhase)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWeaponReloadPhaseChange(slotIndex, reloadPhase);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWeaponAmountChange_delegate))]
    internal static void Agent_OnWeaponAmountChange(
      int thisPointer,
      EquipmentIndex slotIndex,
      short amount)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWeaponAmountChange(slotIndex, amount);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWeaponAmmoReload_delegate))]
    internal static void Agent_OnWeaponAmmoReload(
      int thisPointer,
      EquipmentIndex slotIndex,
      EquipmentIndex ammoSlotIndex,
      short totalAmmo)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWeaponAmmoReload(slotIndex, ammoSlotIndex, totalAmmo);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWeaponAmmoConsume_delegate))]
    internal static void Agent_OnWeaponAmmoConsume(
      int thisPointer,
      EquipmentIndex slotIndex,
      short totalAmmo)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWeaponAmmoConsume(slotIndex, totalAmmo);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnShieldDamaged_delegate))]
    internal static void Agent_OnShieldDamaged(
      int thisPointer,
      EquipmentIndex slotIndex,
      int inflictedDamage)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnShieldDamaged(slotIndex, inflictedDamage);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_OnWeaponAmmoRemoved_delegate))]
    internal static void Agent_OnWeaponAmmoRemoved(int thisPointer, EquipmentIndex slotIndex) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).OnWeaponAmmoRemoved(slotIndex);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_UpdateMountAgentCache_delegate))]
    internal static void Agent_UpdateMountAgentCache(int thisPointer, int newMountAgent) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).UpdateMountAgentCache(DotNetObject.GetManagedObjectWithId(newMountAgent) as Agent);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Agent_UpdateRiderAgentCache_delegate))]
    internal static void Agent_UpdateRiderAgentCache(int thisPointer, int newRiderAgent) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Agent).UpdateRiderAgentCache(DotNetObject.GetManagedObjectWithId(newRiderAgent) as Agent);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.BannerlordTableauManager_RequestCharacterTableauSetup_delegate))]
    internal static void BannerlordTableauManager_RequestCharacterTableauSetup(
      int characterCodeId,
      NativeObjectPointer scene,
      NativeObjectPointer poseEntity)
    {
      Scene scene1 = (Scene) null;
      if (scene.Pointer != UIntPtr.Zero)
        scene1 = new Scene(scene.Pointer);
      GameEntity poseEntity1 = (GameEntity) null;
      if (poseEntity.Pointer != UIntPtr.Zero)
        poseEntity1 = new GameEntity(poseEntity.Pointer);
      BannerlordTableauManager.RequestCharacterTableauSetup(characterCodeId, scene1, poseEntity1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.BannerlordTableauManager_RegisterCharacterTableauScene_delegate))]
    internal static void BannerlordTableauManager_RegisterCharacterTableauScene(
      NativeObjectPointer scene,
      int type)
    {
      Scene scene1 = (Scene) null;
      if (scene.Pointer != UIntPtr.Zero)
        scene1 = new Scene(scene.Pointer);
      BannerlordTableauManager.RegisterCharacterTableauScene(scene1, type);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.WeaponComponentMissionExtensions_CalculateCenterOfMass_delegate))]
    internal static Vec3 WeaponComponentMissionExtensions_CalculateCenterOfMass(
      NativeObjectPointer body)
    {
      PhysicsShape body1 = (PhysicsShape) null;
      if (body.Pointer != UIntPtr.Zero)
        body1 = new PhysicsShape(body.Pointer);
      return WeaponComponentMissionExtensions.CalculateCenterOfMass(body1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.CoreManaged_Start_delegate))]
    internal static void CoreManaged_Start() => CoreManaged.Start();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.CoreManaged_CheckSharedStrctureSizes_delegate))]
    internal static void CoreManaged_CheckSharedStrctureSizes() => CoreManaged.CheckSharedStrctureSizes();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.CoreManaged_Initialize_delegate))]
    internal static void CoreManaged_Initialize() => CoreManaged.Initialize();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.CoreManaged_Finalize_delegate))]
    internal static void CoreManaged_Finalize() => CoreManaged.Finalize();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.CoreManaged_CheckSharedStructureSizes_delegate))]
    internal static void CoreManaged_CheckSharedStructureSizes() => CoreManaged.CheckSharedStructureSizes();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.CoreManaged_EngineApiMethodInterfaceInitializer_delegate))]
    internal static void CoreManaged_EngineApiMethodInterfaceInitializer(int id, IntPtr pointer) => CoreManaged.EngineApiMethodInterfaceInitializer(id, pointer);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.CoreManaged_FillEngineApiPointers_delegate))]
    internal static void CoreManaged_FillEngineApiPointers() => CoreManaged.FillEngineApiPointers();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_EndMission_delegate))]
    internal static void Mission_EndMission(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).EndMission();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnAgentShootMissile_delegate))]
    internal static void Mission_OnAgentShootMissile(
      int thisPointer,
      int shooterAgent,
      EquipmentIndex weaponIndex,
      Vec3 position,
      Vec3 velocity,
      Mat3 orientation,
      bool hasRigidBody,
      bool isPrimaryWeaponShot,
      int forcedMissileIndex)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).OnAgentShootMissile(DotNetObject.GetManagedObjectWithId(shooterAgent) as Agent, weaponIndex, position, velocity, orientation, hasRigidBody, isPrimaryWeaponShot, forcedMissileIndex);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_GetAgentState_delegate))]
    internal static AgentState Mission_GetAgentState(
      int thisPointer,
      int affectorAgent,
      int agent,
      DamageTypes damageType)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(affectorAgent) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(agent) as Agent;
      Agent affectorAgent1 = managedObjectWithId2;
      Agent agent1 = managedObjectWithId3;
      int num = (int) damageType;
      return managedObjectWithId1.GetAgentState(affectorAgent1, agent1, (DamageTypes) num);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_CanGiveDamageToAgentShield_delegate))]
    internal static bool Mission_CanGiveDamageToAgentShield(
      int thisPointer,
      int attacker,
      int defender)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(attacker) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(defender) as Agent;
      Agent attacker1 = managedObjectWithId2;
      Agent defender1 = managedObjectWithId3;
      return managedObjectWithId1.CanGiveDamageToAgentShield(attacker1, defender1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_MeleeHitCallback_delegate))]
    internal static void Mission_MeleeHitCallback(
      int thisPointer,
      ref AttackCollisionData collisionData,
      int attacker,
      int victim,
      NativeObjectPointer realHitEntity,
      ref float inOutMomentumRemaining,
      ref MeleeCollisionReaction colReaction,
      CrushThroughState crushThroughState,
      Vec3 blowDir,
      Vec3 swingDir,
      ref HitParticleResultData hitParticleResultData,
      bool crushedThroughWithoutAgentCollision)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(attacker) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(victim) as Agent;
      GameEntity gameEntity = (GameEntity) null;
      if (realHitEntity.Pointer != UIntPtr.Zero)
        gameEntity = new GameEntity(realHitEntity.Pointer);
      ref AttackCollisionData local1 = ref collisionData;
      Agent attacker1 = managedObjectWithId2;
      Agent victim1 = managedObjectWithId3;
      GameEntity realHitEntity1 = gameEntity;
      ref float local2 = ref inOutMomentumRemaining;
      ref MeleeCollisionReaction local3 = ref colReaction;
      int num1 = (int) crushThroughState;
      Vec3 blowDir1 = blowDir;
      Vec3 swingDir1 = swingDir;
      ref HitParticleResultData local4 = ref hitParticleResultData;
      int num2 = crushedThroughWithoutAgentCollision ? 1 : 0;
      managedObjectWithId1.MeleeHitCallback(ref local1, attacker1, victim1, realHitEntity1, ref local2, ref local3, (CrushThroughState) num1, blowDir1, swingDir1, ref local4, num2 != 0);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_MissileAreaDamageCallback_delegate))]
    internal static void Mission_MissileAreaDamageCallback(
      int thisPointer,
      ref AttackCollisionData collisionDataInput,
      ref Blow blowInput,
      int alreadyDamagedAgent,
      int shooterAgent,
      bool isBigExplosion)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(alreadyDamagedAgent) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(shooterAgent) as Agent;
      ref AttackCollisionData local1 = ref collisionDataInput;
      ref Blow local2 = ref blowInput;
      Agent alreadyDamagedAgent1 = managedObjectWithId2;
      Agent shooterAgent1 = managedObjectWithId3;
      int num = isBigExplosion ? 1 : 0;
      managedObjectWithId1.MissileAreaDamageCallback(ref local1, ref local2, alreadyDamagedAgent1, shooterAgent1, num != 0);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnMissileRemoved_delegate))]
    internal static void Mission_OnMissileRemoved(int thisPointer, int missileIndex) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).OnMissileRemoved(missileIndex);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_MissileHitCallback_delegate))]
    internal static bool Mission_MissileHitCallback(
      int thisPointer,
      out int hitParticleIndex,
      ref AttackCollisionData collisionData,
      Vec3 missileStartingPosition,
      Vec3 missilePosition,
      Vec3 missileAngularVelocity,
      Vec3 movementVelocity,
      MatrixFrame attachGlobalFrame,
      MatrixFrame affectedShieldGlobalFrame,
      int numDamagedAgents,
      int attacker,
      int victim,
      NativeObjectPointer hitEntity)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(attacker) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(victim) as Agent;
      GameEntity gameEntity = (GameEntity) null;
      if (hitEntity.Pointer != UIntPtr.Zero)
        gameEntity = new GameEntity(hitEntity.Pointer);
      ref int local1 = ref hitParticleIndex;
      ref AttackCollisionData local2 = ref collisionData;
      Vec3 missileStartingPosition1 = missileStartingPosition;
      Vec3 missilePosition1 = missilePosition;
      Vec3 missileAngularVelocity1 = missileAngularVelocity;
      Vec3 movementVelocity1 = movementVelocity;
      MatrixFrame attachGlobalFrame1 = attachGlobalFrame;
      MatrixFrame affectedShieldGlobalFrame1 = affectedShieldGlobalFrame;
      int numDamagedAgents1 = numDamagedAgents;
      Agent attacker1 = managedObjectWithId2;
      Agent victim1 = managedObjectWithId3;
      GameEntity hitEntity1 = gameEntity;
      return managedObjectWithId1.MissileHitCallback(out local1, ref local2, missileStartingPosition1, missilePosition1, missileAngularVelocity1, movementVelocity1, attachGlobalFrame1, affectedShieldGlobalFrame1, numDamagedAgents1, attacker1, victim1, hitEntity1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_ChargeDamageCallback_delegate))]
    internal static void Mission_ChargeDamageCallback(
      int thisPointer,
      ref AttackCollisionData collisionData,
      Blow blow,
      int attacker,
      int victim)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(attacker) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(victim) as Agent;
      ref AttackCollisionData local = ref collisionData;
      Blow blow1 = blow;
      Agent attacker1 = managedObjectWithId2;
      Agent victim1 = managedObjectWithId3;
      managedObjectWithId1.ChargeDamageCallback(ref local, blow1, attacker1, victim1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_FallDamageCallback_delegate))]
    internal static void Mission_FallDamageCallback(
      int thisPointer,
      ref AttackCollisionData collisionData,
      Blow b,
      int attacker,
      int victim)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(attacker) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(victim) as Agent;
      ref AttackCollisionData local = ref collisionData;
      Blow b1 = b;
      Agent attacker1 = managedObjectWithId2;
      Agent victim1 = managedObjectWithId3;
      managedObjectWithId1.FallDamageCallback(ref local, b1, attacker1, victim1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_GetDefendCollisionResults_delegate))]
    internal static void Mission_GetDefendCollisionResults(
      int thisPointer,
      int attackerAgent,
      int defenderAgent,
      CombatCollisionResult collisionResult,
      int attackerWeaponSlotIndex,
      bool isAlternativeAttack,
      StrikeType strikeType,
      Agent.UsageDirection attackDirection,
      float collisionDistanceOnWeapon,
      float attackProgress,
      bool attackIsParried,
      bool isPassiveUsageHit,
      ref float defenderStunPeriod,
      ref float attackerStunPeriod,
      ref bool crushedThrough)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(attackerAgent) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(defenderAgent) as Agent;
      Agent attackerAgent1 = managedObjectWithId2;
      Agent defenderAgent1 = managedObjectWithId3;
      int num1 = (int) collisionResult;
      int attackerWeaponSlotIndex1 = attackerWeaponSlotIndex;
      int num2 = isAlternativeAttack ? 1 : 0;
      int num3 = (int) strikeType;
      int num4 = (int) attackDirection;
      double num5 = (double) collisionDistanceOnWeapon;
      double num6 = (double) attackProgress;
      int num7 = attackIsParried ? 1 : 0;
      int num8 = isPassiveUsageHit ? 1 : 0;
      ref float local1 = ref defenderStunPeriod;
      ref float local2 = ref attackerStunPeriod;
      ref bool local3 = ref crushedThrough;
      managedObjectWithId1.GetDefendCollisionResults(attackerAgent1, defenderAgent1, (CombatCollisionResult) num1, attackerWeaponSlotIndex1, num2 != 0, (StrikeType) num3, (Agent.UsageDirection) num4, (float) num5, (float) num6, num7 != 0, num8 != 0, ref local1, ref local2, ref local3);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_DebugLogNativeMissionNetworkEvent_delegate))]
    internal static void Mission_DebugLogNativeMissionNetworkEvent(
      int eventEnum,
      IntPtr eventName,
      int bitCount)
    {
      string stringAnsi = Marshal.PtrToStringAnsi(eventName);
      Mission.DebugLogNativeMissionNetworkEvent(eventEnum, stringAnsi, bitCount);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnAgentAddedAsCorpse_delegate))]
    internal static void Mission_OnAgentAddedAsCorpse(int thisPointer, int affectedAgent) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).OnAgentAddedAsCorpse(DotNetObject.GetManagedObjectWithId(affectedAgent) as Agent);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnAgentDeleted_delegate))]
    internal static void Mission_OnAgentDeleted(int thisPointer, int affectedAgent) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).OnAgentDeleted(DotNetObject.GetManagedObjectWithId(affectedAgent) as Agent);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnAgentRemoved_delegate))]
    internal static void Mission_OnAgentRemoved(
      int thisPointer,
      int affectedAgent,
      int affectorAgent,
      AgentState agentState,
      KillingBlow killingBlow)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(affectedAgent) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(affectorAgent) as Agent;
      Agent affectedAgent1 = managedObjectWithId2;
      Agent affectorAgent1 = managedObjectWithId3;
      int num = (int) agentState;
      KillingBlow killingBlow1 = killingBlow;
      managedObjectWithId1.OnAgentRemoved(affectedAgent1, affectorAgent1, (AgentState) num, killingBlow1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnAgentHit_delegate))]
    internal static float Mission_OnAgentHit(
      int thisPointer,
      int affectedAgent,
      int affectorAgent,
      int affectorWeaponSlotOrMissileIndex,
      bool isMissile,
      bool isBlocked,
      int damage,
      float movementSpeedDamageModifier,
      float hitDistance,
      AgentAttackType attackType,
      BoneBodyPartType victimHitBodyPart)
    {
      Mission managedObjectWithId1 = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Agent managedObjectWithId2 = DotNetObject.GetManagedObjectWithId(affectedAgent) as Agent;
      Agent managedObjectWithId3 = DotNetObject.GetManagedObjectWithId(affectorAgent) as Agent;
      Agent affectedAgent1 = managedObjectWithId2;
      Agent affectorAgent1 = managedObjectWithId3;
      int affectorWeaponSlotOrMissileIndex1 = affectorWeaponSlotOrMissileIndex;
      int num1 = isMissile ? 1 : 0;
      int num2 = isBlocked ? 1 : 0;
      int damage1 = damage;
      double num3 = (double) movementSpeedDamageModifier;
      double num4 = (double) hitDistance;
      int num5 = (int) attackType;
      int num6 = (int) victimHitBodyPart;
      return managedObjectWithId1.OnAgentHit(affectedAgent1, affectorAgent1, affectorWeaponSlotOrMissileIndex1, num1 != 0, num2 != 0, damage1, (float) num3, (float) num4, (AgentAttackType) num5, (BoneBodyPartType) num6);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_SpawnWeaponAsDropFromAgent_delegate))]
    internal static void Mission_SpawnWeaponAsDropFromAgent(
      int thisPointer,
      int agent,
      EquipmentIndex equipmentIndex,
      ref Vec3 velocity,
      ref Vec3 angularVelocity,
      Mission.WeaponSpawnFlags spawnFlags)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).SpawnWeaponAsDropFromAgent(DotNetObject.GetManagedObjectWithId(agent) as Agent, equipmentIndex, ref velocity, ref angularVelocity, spawnFlags);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnPreTick_delegate))]
    internal static void Mission_OnPreTick(int thisPointer, float dt) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).OnPreTick(dt);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_ApplySkeletonScaleToAllEquippedItems_delegate))]
    internal static void Mission_ApplySkeletonScaleToAllEquippedItems(
      int thisPointer,
      IntPtr itemName)
    {
      (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).ApplySkeletonScaleToAllEquippedItems(Marshal.PtrToStringAnsi(itemName));
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_ResetMission_delegate))]
    internal static void Mission_ResetMission(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Mission).ResetMission();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Mission_OnSceneCreated_delegate))]
    internal static void Mission_OnSceneCreated(int thisPointer, NativeObjectPointer scene)
    {
      Mission managedObjectWithId = DotNetObject.GetManagedObjectWithId(thisPointer) as Mission;
      Scene scene1 = (Scene) null;
      if (scene.Pointer != UIntPtr.Zero)
        scene1 = new Scene(scene.Pointer);
      Scene scene2 = scene1;
      managedObjectWithId.OnSceneCreated(scene2);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBEditor_SetEditorScene_delegate))]
    internal static void MBEditor_SetEditorScene(NativeObjectPointer scene)
    {
      Scene scene1 = (Scene) null;
      if (scene.Pointer != UIntPtr.Zero)
        scene1 = new Scene(scene.Pointer);
      MBEditor.SetEditorScene(scene1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBEditor_CloseEditorScene_delegate))]
    internal static void MBEditor_CloseEditorScene() => MBEditor.CloseEditorScene();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBEditor_DestroyEditor_delegate))]
    internal static void MBEditor_DestroyEditor(NativeObjectPointer scene)
    {
      Scene scene1 = (Scene) null;
      if (scene.Pointer != UIntPtr.Zero)
        scene1 = new Scene(scene.Pointer);
      MBEditor.DestroyEditor(scene1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_GetServerId_delegate))]
    internal static string MBMultiplayerData_GetServerId() => MBMultiplayerData.GetServerId();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_GetServerName_delegate))]
    internal static string MBMultiplayerData_GetServerName() => MBMultiplayerData.GetServerName();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_GetGameModule_delegate))]
    internal static string MBMultiplayerData_GetGameModule() => MBMultiplayerData.GetGameModule();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_GetGameType_delegate))]
    internal static string MBMultiplayerData_GetGameType() => MBMultiplayerData.GetGameType();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_GetMap_delegate))]
    internal static string MBMultiplayerData_GetMap() => MBMultiplayerData.GetMap();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_GetCurrentPlayerCount_delegate))]
    internal static int MBMultiplayerData_GetCurrentPlayerCount() => MBMultiplayerData.GetCurrentPlayerCount();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_GetPlayerCountLimit_delegate))]
    internal static int MBMultiplayerData_GetPlayerCountLimit() => MBMultiplayerData.GetPlayerCountLimit();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.MBMultiplayerData_UpdateGameServerInfo_delegate))]
    internal static void MBMultiplayerData_UpdateGameServerInfo(
      IntPtr id,
      IntPtr gameServer,
      IntPtr gameModule,
      IntPtr gameType,
      IntPtr map,
      int currentPlayerCount,
      int maxPlayerCount,
      IntPtr address,
      int port)
    {
      string stringAnsi1 = Marshal.PtrToStringAnsi(id);
      string stringAnsi2 = Marshal.PtrToStringAnsi(gameServer);
      string stringAnsi3 = Marshal.PtrToStringAnsi(gameModule);
      string stringAnsi4 = Marshal.PtrToStringAnsi(gameType);
      string stringAnsi5 = Marshal.PtrToStringAnsi(map);
      string stringAnsi6 = Marshal.PtrToStringAnsi(address);
      string gameServer1 = stringAnsi2;
      string gameModule1 = stringAnsi3;
      string gameType1 = stringAnsi4;
      string map1 = stringAnsi5;
      int currentPlayerCount1 = currentPlayerCount;
      int maxPlayerCount1 = maxPlayerCount;
      string address1 = stringAnsi6;
      int port1 = port;
      MBMultiplayerData.UpdateGameServerInfo(stringAnsi1, gameServer1, gameModule1, gameType1, map1, currentPlayerCount1, maxPlayerCount1, address1, port1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_Initialize_delegate))]
    internal static void Module_Initialize(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).Initialize();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_RunTest_delegate))]
    internal static void Module_RunTest(int thisPointer, IntPtr commandLine) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).RunTest(Marshal.PtrToStringAnsi(commandLine));

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_TickTest_delegate))]
    internal static void Module_TickTest(int thisPointer, float dt) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).TickTest(dt);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_OnDumpCreated_delegate))]
    internal static void Module_OnDumpCreated(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).OnDumpCreated();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_OnDumpCreationStarted_delegate))]
    internal static void Module_OnDumpCreationStarted(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).OnDumpCreationStarted();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_GetMetaMeshPackageMapping_delegate))]
    internal static string Module_GetMetaMeshPackageMapping(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).GetMetaMeshPackageMapping();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_GetItemMeshNames_delegate))]
    internal static string Module_GetItemMeshNames(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).GetItemMeshNames();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_GetHorseMaterialNames_delegate))]
    internal static string Module_GetHorseMaterialNames(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).GetHorseMaterialNames();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_SetEditorScreenAsRootScreen_delegate))]
    internal static bool Module_SetEditorScreenAsRootScreen(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).SetEditorScreenAsRootScreen();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_GetMissionControllerClassNames_delegate))]
    internal static string Module_GetMissionControllerClassNames(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).GetMissionControllerClassNames();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_MBThrowException_delegate))]
    internal static void Module_MBThrowException() => Module.MBThrowException();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_OnEnterEditMode_delegate))]
    internal static void Module_OnEnterEditMode(int thisPointer, bool isFirstTime) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).OnEnterEditMode(isFirstTime);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_GetInstance_delegate))]
    internal static int Module_GetInstance() => Module.GetInstance().GetManagedId();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_SetLoadingFinished_delegate))]
    internal static void Module_SetLoadingFinished(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).SetLoadingFinished();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_OnCloseSceneEditorPresentation_delegate))]
    internal static void Module_OnCloseSceneEditorPresentation(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).OnCloseSceneEditorPresentation();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_OnSceneEditorModeOver_delegate))]
    internal static void Module_OnSceneEditorModeOver(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).OnSceneEditorModeOver();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_OnSkinsXMLHasChanged_delegate))]
    internal static void Module_OnSkinsXMLHasChanged(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).OnSkinsXMLHasChanged();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_OnImguiProfilerTick_delegate))]
    internal static void Module_OnImguiProfilerTick(int thisPointer) => (DotNetObject.GetManagedObjectWithId(thisPointer) as Module).OnImguiProfilerTick();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_CreateProcessedSkinsXMLForNative_delegate))]
    internal static string Module_CreateProcessedSkinsXMLForNative(out string baseSkinsXmlPath) => Module.CreateProcessedSkinsXMLForNative(out baseSkinsXmlPath);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_CreateProcessedActionSetsXMLForNative_delegate))]
    internal static string Module_CreateProcessedActionSetsXMLForNative() => Module.CreateProcessedActionSetsXMLForNative();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_CreateProcessedActionTypesXMLForNative_delegate))]
    internal static string Module_CreateProcessedActionTypesXMLForNative() => Module.CreateProcessedActionTypesXMLForNative();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_CreateProcessedAnimationsXMLForNative_delegate))]
    internal static string Module_CreateProcessedAnimationsXMLForNative(
      out string animationsXmlPaths)
    {
      return Module.CreateProcessedAnimationsXMLForNative(out animationsXmlPaths);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_CreateProcessedModuleDataXMLForNative_delegate))]
    internal static string Module_CreateProcessedModuleDataXMLForNative(IntPtr xmlType) => Module.CreateProcessedModuleDataXMLForNative(Marshal.PtrToStringAnsi(xmlType));

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_StartMissionForEditor_delegate))]
    internal static void Module_StartMissionForEditor(
      int thisPointer,
      IntPtr missionName,
      IntPtr sceneName,
      IntPtr levels)
    {
      Module managedObjectWithId = DotNetObject.GetManagedObjectWithId(thisPointer) as Module;
      string stringAnsi1 = Marshal.PtrToStringAnsi(missionName);
      string stringAnsi2 = Marshal.PtrToStringAnsi(sceneName);
      string stringAnsi3 = Marshal.PtrToStringAnsi(levels);
      string missionName1 = stringAnsi1;
      string sceneName1 = stringAnsi2;
      string levels1 = stringAnsi3;
      managedObjectWithId.StartMissionForEditor(missionName1, sceneName1, levels1);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.Module_StartMissionForReplayEditor_delegate))]
    internal static void Module_StartMissionForReplayEditor(
      int thisPointer,
      IntPtr missionName,
      IntPtr sceneName,
      IntPtr levels,
      IntPtr fileName,
      bool record,
      float startTime,
      float endTime)
    {
      Module managedObjectWithId = DotNetObject.GetManagedObjectWithId(thisPointer) as Module;
      string stringAnsi1 = Marshal.PtrToStringAnsi(missionName);
      string stringAnsi2 = Marshal.PtrToStringAnsi(sceneName);
      string stringAnsi3 = Marshal.PtrToStringAnsi(levels);
      string stringAnsi4 = Marshal.PtrToStringAnsi(fileName);
      string missionName1 = stringAnsi1;
      string sceneName1 = stringAnsi2;
      string levels1 = stringAnsi3;
      string fileName1 = stringAnsi4;
      int num1 = record ? 1 : 0;
      double num2 = (double) startTime;
      double num3 = (double) endTime;
      managedObjectWithId.StartMissionForReplayEditor(missionName1, sceneName1, levels1, fileName1, num1 != 0, (float) num2, (float) num3);
    }

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.GameNetwork_HandleRemovePlayer_delegate))]
    internal static void GameNetwork_HandleRemovePlayer(int peer, bool isTimedOut) => GameNetwork.HandleRemovePlayer(DotNetObject.GetManagedObjectWithId(peer) as MBNetworkPeer, isTimedOut);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.GameNetwork_HandleDisconnect_delegate))]
    internal static void GameNetwork_HandleDisconnect() => GameNetwork.HandleDisconnect();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.GameNetwork_HandleNetworkPacketAsServer_delegate))]
    internal static bool GameNetwork_HandleNetworkPacketAsServer(int networkPeer) => GameNetwork.HandleNetworkPacketAsServer(DotNetObject.GetManagedObjectWithId(networkPeer) as MBNetworkPeer);

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.GameNetwork_HandleConsoleCommand_delegate))]
    internal static void GameNetwork_HandleConsoleCommand(IntPtr command) => GameNetwork.HandleConsoleCommand(Marshal.PtrToStringAnsi(command));

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.GameNetwork_HandleNetworkPacketAsClient_delegate))]
    internal static bool GameNetwork_HandleNetworkPacketAsClient() => GameNetwork.HandleNetworkPacketAsClient();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.GameNetwork_SyncRelevantGameOptionsToServer_delegate))]
    internal static void GameNetwork_SyncRelevantGameOptionsToServer() => GameNetwork.SyncRelevantGameOptionsToServer();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.ManagedOptions_GetConfigCount_delegate))]
    internal static int ManagedOptions_GetConfigCount() => ManagedOptions.GetConfigCount();

    [MonoPInvokeCallback(typeof (CoreCallbacksGenerated.ManagedOptions_GetConfigValue_delegate))]
    internal static float ManagedOptions_GetConfigValue(int type) => ManagedOptions.GetConfigValue(type);

    internal delegate void Agent_OnMount_delegate(int thisPointer, int mount);

    internal delegate void Agent_OnDismount_delegate(int thisPointer, int mount);

    internal delegate void Agent_OnAgentAlarmedStateChanged_delegate(
      int thisPointer,
      Agent.AIStateFlag flag);

    [return: MarshalAs(UnmanagedType.U1)]
    internal delegate bool Agent_IsInSameFormationWith_delegate(int thisPointer, int otherAgent);

    internal delegate int Agent_GetFormationUnitSpacing_delegate(int thisPointer);

    internal delegate string Agent_GetSoundAndCollisionInfoClassName_delegate(int thisPointer);

    internal delegate void Agent_UpdateAgentStats_delegate(int thisPointer);

    internal delegate void Agent_SetAgentAIPerformingRetreatBehavior_delegate(
      int thisPointer,
      [MarshalAs(UnmanagedType.U1)] bool isAgentAIPerformingRetreatBehavior);

    internal delegate void Agent_OnRetreating_delegate(int thisPointer);

    internal delegate float Agent_GetMissileRangeWithHeightDifferenceAux_delegate(
      int thisPointer,
      float targetZ);

    internal delegate void Agent_OnWieldedItemIndexChange_delegate(
      int thisPointer,
      [MarshalAs(UnmanagedType.U1)] bool isOffHand,
      [MarshalAs(UnmanagedType.U1)] bool isWieldedInstantly,
      [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn);

    internal delegate void Agent_OnRemoveWeapon_delegate(int thisPointer, EquipmentIndex slotIndex);

    internal delegate void Agent_OnWeaponUsageIndexChange_delegate(
      int thisPointer,
      EquipmentIndex slotIndex,
      int usageIndex);

    internal delegate void Agent_OnWeaponSwitchingToAlternativeStart_delegate(
      int thisPointer,
      EquipmentIndex slotIndex,
      int usageIndex);

    internal delegate void Agent_OnWeaponReloadPhaseChange_delegate(
      int thisPointer,
      EquipmentIndex slotIndex,
      short reloadPhase);

    internal delegate void Agent_OnWeaponAmountChange_delegate(
      int thisPointer,
      EquipmentIndex slotIndex,
      short amount);

    internal delegate void Agent_OnWeaponAmmoReload_delegate(
      int thisPointer,
      EquipmentIndex slotIndex,
      EquipmentIndex ammoSlotIndex,
      short totalAmmo);

    internal delegate void Agent_OnWeaponAmmoConsume_delegate(
      int thisPointer,
      EquipmentIndex slotIndex,
      short totalAmmo);

    internal delegate void Agent_OnShieldDamaged_delegate(
      int thisPointer,
      EquipmentIndex slotIndex,
      int inflictedDamage);

    internal delegate void Agent_OnWeaponAmmoRemoved_delegate(
      int thisPointer,
      EquipmentIndex slotIndex);

    internal delegate void Agent_UpdateMountAgentCache_delegate(int thisPointer, int newMountAgent);

    internal delegate void Agent_UpdateRiderAgentCache_delegate(int thisPointer, int newRiderAgent);

    internal delegate void BannerlordTableauManager_RequestCharacterTableauSetup_delegate(
      int characterCodeId,
      NativeObjectPointer scene,
      NativeObjectPointer poseEntity);

    internal delegate void BannerlordTableauManager_RegisterCharacterTableauScene_delegate(
      NativeObjectPointer scene,
      int type);

    internal delegate Vec3 WeaponComponentMissionExtensions_CalculateCenterOfMass_delegate(
      NativeObjectPointer body);

    internal delegate void CoreManaged_Start_delegate();

    internal delegate void CoreManaged_CheckSharedStrctureSizes_delegate();

    internal delegate void CoreManaged_Initialize_delegate();

    internal delegate void CoreManaged_Finalize_delegate();

    internal delegate void CoreManaged_CheckSharedStructureSizes_delegate();

    internal delegate void CoreManaged_EngineApiMethodInterfaceInitializer_delegate(
      int id,
      IntPtr pointer);

    internal delegate void CoreManaged_FillEngineApiPointers_delegate();

    internal delegate void Mission_EndMission_delegate(int thisPointer);

    internal delegate void Mission_OnAgentShootMissile_delegate(
      int thisPointer,
      int shooterAgent,
      EquipmentIndex weaponIndex,
      Vec3 position,
      Vec3 velocity,
      Mat3 orientation,
      [MarshalAs(UnmanagedType.U1)] bool hasRigidBody,
      [MarshalAs(UnmanagedType.U1)] bool isPrimaryWeaponShot,
      int forcedMissileIndex);

    internal delegate AgentState Mission_GetAgentState_delegate(
      int thisPointer,
      int affectorAgent,
      int agent,
      DamageTypes damageType);

    [return: MarshalAs(UnmanagedType.U1)]
    internal delegate bool Mission_CanGiveDamageToAgentShield_delegate(
      int thisPointer,
      int attacker,
      int defender);

    internal delegate void Mission_MeleeHitCallback_delegate(
      int thisPointer,
      ref AttackCollisionData collisionData,
      int attacker,
      int victim,
      NativeObjectPointer realHitEntity,
      ref float inOutMomentumRemaining,
      ref MeleeCollisionReaction colReaction,
      CrushThroughState crushThroughState,
      Vec3 blowDir,
      Vec3 swingDir,
      ref HitParticleResultData hitParticleResultData,
      [MarshalAs(UnmanagedType.U1)] bool crushedThroughWithoutAgentCollision);

    internal delegate void Mission_MissileAreaDamageCallback_delegate(
      int thisPointer,
      ref AttackCollisionData collisionDataInput,
      ref Blow blowInput,
      int alreadyDamagedAgent,
      int shooterAgent,
      [MarshalAs(UnmanagedType.U1)] bool isBigExplosion);

    internal delegate void Mission_OnMissileRemoved_delegate(int thisPointer, int missileIndex);

    [return: MarshalAs(UnmanagedType.U1)]
    internal delegate bool Mission_MissileHitCallback_delegate(
      int thisPointer,
      out int hitParticleIndex,
      ref AttackCollisionData collisionData,
      Vec3 missileStartingPosition,
      Vec3 missilePosition,
      Vec3 missileAngularVelocity,
      Vec3 movementVelocity,
      MatrixFrame attachGlobalFrame,
      MatrixFrame affectedShieldGlobalFrame,
      int numDamagedAgents,
      int attacker,
      int victim,
      NativeObjectPointer hitEntity);

    internal delegate void Mission_ChargeDamageCallback_delegate(
      int thisPointer,
      ref AttackCollisionData collisionData,
      Blow blow,
      int attacker,
      int victim);

    internal delegate void Mission_FallDamageCallback_delegate(
      int thisPointer,
      ref AttackCollisionData collisionData,
      Blow b,
      int attacker,
      int victim);

    internal delegate void Mission_GetDefendCollisionResults_delegate(
      int thisPointer,
      int attackerAgent,
      int defenderAgent,
      CombatCollisionResult collisionResult,
      int attackerWeaponSlotIndex,
      [MarshalAs(UnmanagedType.U1)] bool isAlternativeAttack,
      StrikeType strikeType,
      Agent.UsageDirection attackDirection,
      float collisionDistanceOnWeapon,
      float attackProgress,
      [MarshalAs(UnmanagedType.U1)] bool attackIsParried,
      [MarshalAs(UnmanagedType.U1)] bool isPassiveUsageHit,
      ref float defenderStunPeriod,
      ref float attackerStunPeriod,
      [MarshalAs(UnmanagedType.U1)] ref bool crushedThrough);

    internal delegate void Mission_DebugLogNativeMissionNetworkEvent_delegate(
      int eventEnum,
      IntPtr eventName,
      int bitCount);

    internal delegate void Mission_OnAgentAddedAsCorpse_delegate(int thisPointer, int affectedAgent);

    internal delegate void Mission_OnAgentDeleted_delegate(int thisPointer, int affectedAgent);

    internal delegate void Mission_OnAgentRemoved_delegate(
      int thisPointer,
      int affectedAgent,
      int affectorAgent,
      AgentState agentState,
      KillingBlow killingBlow);

    internal delegate float Mission_OnAgentHit_delegate(
      int thisPointer,
      int affectedAgent,
      int affectorAgent,
      int affectorWeaponSlotOrMissileIndex,
      [MarshalAs(UnmanagedType.U1)] bool isMissile,
      [MarshalAs(UnmanagedType.U1)] bool isBlocked,
      int damage,
      float movementSpeedDamageModifier,
      float hitDistance,
      AgentAttackType attackType,
      BoneBodyPartType victimHitBodyPart);

    internal delegate void Mission_SpawnWeaponAsDropFromAgent_delegate(
      int thisPointer,
      int agent,
      EquipmentIndex equipmentIndex,
      ref Vec3 velocity,
      ref Vec3 angularVelocity,
      Mission.WeaponSpawnFlags spawnFlags);

    internal delegate void Mission_OnPreTick_delegate(int thisPointer, float dt);

    internal delegate void Mission_ApplySkeletonScaleToAllEquippedItems_delegate(
      int thisPointer,
      IntPtr itemName);

    internal delegate void Mission_ResetMission_delegate(int thisPointer);

    internal delegate void Mission_OnSceneCreated_delegate(
      int thisPointer,
      NativeObjectPointer scene);

    internal delegate void MBEditor_SetEditorScene_delegate(NativeObjectPointer scene);

    internal delegate void MBEditor_CloseEditorScene_delegate();

    internal delegate void MBEditor_DestroyEditor_delegate(NativeObjectPointer scene);

    internal delegate string MBMultiplayerData_GetServerId_delegate();

    internal delegate string MBMultiplayerData_GetServerName_delegate();

    internal delegate string MBMultiplayerData_GetGameModule_delegate();

    internal delegate string MBMultiplayerData_GetGameType_delegate();

    internal delegate string MBMultiplayerData_GetMap_delegate();

    internal delegate int MBMultiplayerData_GetCurrentPlayerCount_delegate();

    internal delegate int MBMultiplayerData_GetPlayerCountLimit_delegate();

    internal delegate void MBMultiplayerData_UpdateGameServerInfo_delegate(
      IntPtr id,
      IntPtr gameServer,
      IntPtr gameModule,
      IntPtr gameType,
      IntPtr map,
      int currentPlayerCount,
      int maxPlayerCount,
      IntPtr address,
      int port);

    internal delegate void Module_Initialize_delegate(int thisPointer);

    internal delegate void Module_RunTest_delegate(int thisPointer, IntPtr commandLine);

    internal delegate void Module_TickTest_delegate(int thisPointer, float dt);

    internal delegate void Module_OnDumpCreated_delegate(int thisPointer);

    internal delegate void Module_OnDumpCreationStarted_delegate(int thisPointer);

    internal delegate string Module_GetMetaMeshPackageMapping_delegate(int thisPointer);

    internal delegate string Module_GetItemMeshNames_delegate(int thisPointer);

    internal delegate string Module_GetHorseMaterialNames_delegate(int thisPointer);

    [return: MarshalAs(UnmanagedType.U1)]
    internal delegate bool Module_SetEditorScreenAsRootScreen_delegate(int thisPointer);

    internal delegate string Module_GetMissionControllerClassNames_delegate(int thisPointer);

    internal delegate void Module_MBThrowException_delegate();

    internal delegate void Module_OnEnterEditMode_delegate(int thisPointer, [MarshalAs(UnmanagedType.U1)] bool isFirstTime);

    internal delegate int Module_GetInstance_delegate();

    internal delegate void Module_SetLoadingFinished_delegate(int thisPointer);

    internal delegate void Module_OnCloseSceneEditorPresentation_delegate(int thisPointer);

    internal delegate void Module_OnSceneEditorModeOver_delegate(int thisPointer);

    internal delegate void Module_OnSkinsXMLHasChanged_delegate(int thisPointer);

    internal delegate void Module_OnImguiProfilerTick_delegate(int thisPointer);

    internal delegate string Module_CreateProcessedSkinsXMLForNative_delegate(
      out string baseSkinsXmlPath);

    internal delegate string Module_CreateProcessedActionSetsXMLForNative_delegate();

    internal delegate string Module_CreateProcessedActionTypesXMLForNative_delegate();

    internal delegate string Module_CreateProcessedAnimationsXMLForNative_delegate(
      out string animationsXmlPaths);

    internal delegate string Module_CreateProcessedModuleDataXMLForNative_delegate(IntPtr xmlType);

    internal delegate void Module_StartMissionForEditor_delegate(
      int thisPointer,
      IntPtr missionName,
      IntPtr sceneName,
      IntPtr levels);

    internal delegate void Module_StartMissionForReplayEditor_delegate(
      int thisPointer,
      IntPtr missionName,
      IntPtr sceneName,
      IntPtr levels,
      IntPtr fileName,
      [MarshalAs(UnmanagedType.U1)] bool record,
      float startTime,
      float endTime);

    internal delegate void GameNetwork_HandleRemovePlayer_delegate(int peer, [MarshalAs(UnmanagedType.U1)] bool isTimedOut);

    internal delegate void GameNetwork_HandleDisconnect_delegate();

    [return: MarshalAs(UnmanagedType.U1)]
    internal delegate bool GameNetwork_HandleNetworkPacketAsServer_delegate(int networkPeer);

    internal delegate void GameNetwork_HandleConsoleCommand_delegate(IntPtr command);

    [return: MarshalAs(UnmanagedType.U1)]
    internal delegate bool GameNetwork_HandleNetworkPacketAsClient_delegate();

    internal delegate void GameNetwork_SyncRelevantGameOptionsToServer_delegate();

    internal delegate int ManagedOptions_GetConfigCount_delegate();

    internal delegate float ManagedOptions_GetConfigValue_delegate(int type);
  }
}
