// Decompiled with JetBrains decompiler
// Type: TaleWorlds.ObjectSystem.MBObjectBase
// Assembly: TaleWorlds.ObjectSystem, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 525679E6-68C3-48B8-A030-465E146E69EE
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.ObjectSystem.dll

using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.ObjectSystem
{
  [SaveableClass(10026)]
  public class MBObjectBase
  {
    [SaveableProperty(1)]
    public string StringId { get; set; }

    [SaveableProperty(2)]
    public MBGUID Id { get; internal set; }

    [CachedData]
    public bool IsInitialized { get; internal set; }

    public bool IsReady { get; set; }

    [SaveableProperty(3)]
    internal bool IsRegistered { get; set; }

    public MBObjectBase()
    {
    }

    public MBObjectBase(MBObjectBase other) => this.StringId = other.StringId;

    public MBObjectBase(string stringId) => this.StringId = stringId;

    public void AfterInitialized()
    {
      if (!this.IsRegistered)
        return;
      this.IsReady = true;
    }

    public virtual void AfterRegister()
    {
    }

    public virtual void Initialize() => this.IsInitialized = true;

    public virtual void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      this.Initialize();
      this.StringId = node.Attributes["id"].Value;
    }

    public virtual void Deserialize(
      MBObjectManager objectManager,
      XmlNode node,
      Type typeOfGameMenusCallbacks)
    {
      this.Initialize();
      this.StringId = node.Attributes["id"].Value;
    }

    [LoadInitializationCallback]
    private void BeforeLoad(MetaData metaData)
    {
      if (ObsoleteObjectManager.Instance != null)
        this.IsRegistered = ObsoleteObjectManager.Instance.GetObject(this.Id) == this;
      this.OnBeforeLoad();
    }

    protected virtual void OnBeforeLoad()
    {
      if (!this.IsRegistered)
        return;
      MBObjectManager.Instance.TryRegisterObjectWithoutInitialization(this);
      this.IsInitialized = true;
    }

    public virtual TextObject GetName() => new TextObject(this.StringId);

    protected virtual void PreAfterLoad()
    {
    }

    internal void PreAfterLoadInternal() => this.PreAfterLoad();

    protected virtual void AfterLoad()
    {
    }

    internal void AfterLoadInternal() => this.AfterLoad();

    internal static void AutoGeneratedStaticCollectObjectsMBObjectBase(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
    }

    internal static object AutoGeneratedGetMemberValueStringId(object o) => (object) ((MBObjectBase) o).StringId;

    internal static object AutoGeneratedGetMemberValueId(object o) => (object) ((MBObjectBase) o).Id;

    internal static object AutoGeneratedGetMemberValueIsRegistered(object o) => (object) ((MBObjectBase) o).IsRegistered;
  }
}
