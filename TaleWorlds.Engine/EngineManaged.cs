// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Engine.EngineManaged
// Assembly: TaleWorlds.Engine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DD7DC4E8-6EB6-4CB8-8DE1-FC78E45F7FE8
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Engine.dll

using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.DotNet;
using TaleWorlds.Engine.InputSystem;
using TaleWorlds.InputSystem;
using TaleWorlds.Library;
using TaleWorlds.ModuleManager;

namespace TaleWorlds.Engine
{
  public class EngineManaged : IManagedComponent
  {
    private static EngineManaged _instance;
    private static Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();
    private static ICallbackManager _callbackManager;
    private static Delegate PassManagedEngineCallbackMethodPointersMono = (Delegate) null;

    public string ManagedCallbacksDll => ManagedDllFolder.Name + "TaleWorlds.Engine.AutoGenerated.dll";

    public EngineManaged() => EngineManaged._instance = this;

    void IManagedComponent.OnStart()
    {
    }

    void IManagedComponent.OnCustomCallbackMethodPassed(
      string name,
      Delegate method)
    {
      if (!(name == "Engine"))
        return;
      EngineManaged.PassManagedEngineCallbackMethodPointersMono = method;
      this.OnInitialize();
    }

    void IManagedComponent.OnApplicationTick(float dt)
    {
      Input.Update();
      Screen.Update();
    }

    private void OnInitialize()
    {
      System.Type[] types = AssemblyLoader.LoadFrom(this.ManagedCallbacksDll).GetTypes();
      System.Type type1 = (System.Type) null;
      foreach (System.Type type2 in types)
      {
        if (((IEnumerable<System.Type>) type2.GetInterfaces()).Contains<System.Type>(typeof (ICallbackManager)))
        {
          type1 = type2;
          break;
        }
      }
      EngineManaged._callbackManager = type1.GetConstructor(new System.Type[0]).Invoke(new object[0]) as ICallbackManager;
      EngineManaged._callbackManager.Initialize();
      Delegate[] delegates = EngineManaged._callbackManager.GetDelegates();
      for (int index = 0; index < delegates.Length; ++index)
      {
        try
        {
          EngineManaged.PassManagedEngineCallbackMethodPointers(delegates[index]);
        }
        catch (Exception ex)
        {
          EngineManaged.PassManagedEngineCallbackMethodPointers((Delegate) null);
          // ISSUE: variable of a boxed type
          __Boxed<int> local = (ValueType) index;
          Console.WriteLine(ex.ToString() + " " + (object) local);
        }
      }
      EngineApplicationInterface.SetObjects(EngineManaged._callbackManager.GetScriptingInterfaceObjects());
      Input.Initialize((IInputManager) new EngineInputManager(), (IInputContext) null);
    }

    [EngineCallback]
    internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer) => EngineManaged._engineApiPointers.Add(id, pointer);

    [EngineCallback]
    internal static void CheckSharedStructureSizes() => EngineManaged._callbackManager.CheckSharedStructureSizes();

    [EngineCallback]
    internal static void OnConfigChange()
    {
      if (EngineManaged.ConfigChange == null)
        return;
      EngineManaged.ConfigChange();
    }

    public static event Action ConfigChange;

    [EngineCallback]
    internal static void FillEngineApiPointers()
    {
      foreach (KeyValuePair<int, IntPtr> engineApiPointer in EngineManaged._engineApiPointers)
      {
        try
        {
          EngineManaged._callbackManager.SetFunctionPointer(engineApiPointer.Key, engineApiPointer.Value);
        }
        catch (Exception ex)
        {
          Console.WriteLine("error: " + (object) engineApiPointer.Key + " " + (object) ex);
        }
      }
    }

    private static void PassManagedEngineCallbackMethodPointers(Delegate methodDelegate)
    {
      if ((object) EngineManaged.PassManagedEngineCallbackMethodPointersMono == null)
        return;
      EngineManaged.PassManagedEngineCallbackMethodPointersMono.DynamicInvoke((object) methodDelegate);
    }

    [EngineCallback]
    public static string GetVersionStr(string versionGameTypeString)
    {
      ApplicationVersionGameType result;
      return Enum.TryParse<ApplicationVersionGameType>(versionGameTypeString, out result) ? ApplicationVersion.FromParametersFile(result).ToString() : "";
    }

    [EngineCallback]
    public static string GetModulesVersionStr()
    {
      string str = "";
      foreach (ModuleInfo module in ModuleHelper.GetModules())
        str = str + module.Name + "#" + (object) module.Version + "\n";
      return str;
    }
  }
}
