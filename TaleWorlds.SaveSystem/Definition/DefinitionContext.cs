// Decompiled with JetBrains decompiler
// Type: TaleWorlds.SaveSystem.Definition.DefinitionContext
// Assembly: TaleWorlds.SaveSystem, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 786EF53D-D2EC-43A3-8B8C-4717B7406D76
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.SaveSystem.dll

using System;
using System.Collections.Generic;
using System.Reflection;
using TaleWorlds.Library;

namespace TaleWorlds.SaveSystem.Definition
{
  public class DefinitionContext
  {
    private Dictionary<Type, TypeDefinition> _rootClassDefinitions;
    private Dictionary<Type, TypeDefinition> _classDefinitions;
    private Dictionary<SaveId, TypeDefinition> _classDefinitionsWithId;
    private Dictionary<Type, InterfaceDefinition> _interfaceDefinitions;
    private Dictionary<SaveId, InterfaceDefinition> _interfaceDefinitionsWithId;
    private Dictionary<Type, EnumDefinition> _enumDefinitions;
    private Dictionary<SaveId, EnumDefinition> _enumDefinitionsWithId;
    private Dictionary<Type, ContainerDefinition> _containerDefinitions;
    private Dictionary<SaveId, ContainerDefinition> _containerDefinitionsWithId;
    private Dictionary<Type, GenericTypeDefinition> _genericClassDefinitions;
    private Dictionary<Type, TypeDefinition> _structDefinitions;
    private Dictionary<SaveId, TypeDefinition> _structDefinitionsWithId;
    private Dictionary<Type, GenericTypeDefinition> _genericStructDefinitions;
    private Dictionary<Type, BasicTypeDefinition> _basicTypeDefinitions;
    private Dictionary<SaveId, BasicTypeDefinition> _basicTypeDefinitionsWithId;
    private Dictionary<Type, TypeDefinitionBase> _allTypeDefinitions;
    private Dictionary<SaveId, TypeDefinitionBase> _allTypeDefinitionsWithId;
    private List<IAutoGeneratedSaveManager> _autoGeneratedSaveManagers;
    private Assembly[] _assemblies;
    public List<string> _errors;
    private List<SaveableTypeDefiner> _saveableTypeDefiners;

    public bool GotError => this._errors.Count > 0;

    public IEnumerable<string> Errors => (IEnumerable<string>) this._errors.AsReadOnly();

    public DefinitionContext()
    {
      this._errors = new List<string>();
      this._rootClassDefinitions = new Dictionary<Type, TypeDefinition>();
      this._classDefinitions = new Dictionary<Type, TypeDefinition>();
      this._classDefinitionsWithId = new Dictionary<SaveId, TypeDefinition>();
      this._interfaceDefinitions = new Dictionary<Type, InterfaceDefinition>();
      this._interfaceDefinitionsWithId = new Dictionary<SaveId, InterfaceDefinition>();
      this._enumDefinitions = new Dictionary<Type, EnumDefinition>();
      this._enumDefinitionsWithId = new Dictionary<SaveId, EnumDefinition>();
      this._containerDefinitions = new Dictionary<Type, ContainerDefinition>();
      this._containerDefinitionsWithId = new Dictionary<SaveId, ContainerDefinition>();
      this._genericClassDefinitions = new Dictionary<Type, GenericTypeDefinition>();
      this._structDefinitions = new Dictionary<Type, TypeDefinition>();
      this._structDefinitionsWithId = new Dictionary<SaveId, TypeDefinition>();
      this._genericStructDefinitions = new Dictionary<Type, GenericTypeDefinition>();
      this._basicTypeDefinitions = new Dictionary<Type, BasicTypeDefinition>();
      this._basicTypeDefinitionsWithId = new Dictionary<SaveId, BasicTypeDefinition>();
      this._allTypeDefinitions = new Dictionary<Type, TypeDefinitionBase>();
      this._allTypeDefinitionsWithId = new Dictionary<SaveId, TypeDefinitionBase>();
      this._saveableTypeDefiners = new List<SaveableTypeDefiner>();
      this._autoGeneratedSaveManagers = new List<IAutoGeneratedSaveManager>();
    }

    internal void AddRootClassDefinition(TypeDefinition rootClassDefinition)
    {
      this._rootClassDefinitions.Add(rootClassDefinition.Type, rootClassDefinition);
      this._allTypeDefinitions.Add(rootClassDefinition.Type, (TypeDefinitionBase) rootClassDefinition);
      this._allTypeDefinitionsWithId.Add(rootClassDefinition.SaveId, (TypeDefinitionBase) rootClassDefinition);
    }

    internal void AddClassDefinition(TypeDefinition classDefinition)
    {
      this._classDefinitions.Add(classDefinition.Type, classDefinition);
      this._classDefinitionsWithId.Add(classDefinition.SaveId, classDefinition);
      this._allTypeDefinitions.Add(classDefinition.Type, (TypeDefinitionBase) classDefinition);
      this._allTypeDefinitionsWithId.Add(classDefinition.SaveId, (TypeDefinitionBase) classDefinition);
    }

    internal void AddStructDefinition(TypeDefinition structDefinition)
    {
      this._structDefinitions.Add(structDefinition.Type, structDefinition);
      this._structDefinitionsWithId.Add(structDefinition.SaveId, structDefinition);
      this._allTypeDefinitions.Add(structDefinition.Type, (TypeDefinitionBase) structDefinition);
      this._allTypeDefinitionsWithId.Add(structDefinition.SaveId, (TypeDefinitionBase) structDefinition);
    }

    internal void AddInterfaceDefinition(InterfaceDefinition interfaceDefinition)
    {
      this._interfaceDefinitions.Add(interfaceDefinition.Type, interfaceDefinition);
      this._interfaceDefinitionsWithId.Add(interfaceDefinition.SaveId, interfaceDefinition);
      this._allTypeDefinitions.Add(interfaceDefinition.Type, (TypeDefinitionBase) interfaceDefinition);
      this._allTypeDefinitionsWithId.Add(interfaceDefinition.SaveId, (TypeDefinitionBase) interfaceDefinition);
    }

    internal void AddEnumDefinition(EnumDefinition enumDefinition)
    {
      this._enumDefinitions.Add(enumDefinition.Type, enumDefinition);
      this._enumDefinitionsWithId.Add(enumDefinition.SaveId, enumDefinition);
      this._allTypeDefinitions.Add(enumDefinition.Type, (TypeDefinitionBase) enumDefinition);
      this._allTypeDefinitionsWithId.Add(enumDefinition.SaveId, (TypeDefinitionBase) enumDefinition);
    }

    internal void AddContainerDefinition(ContainerDefinition containerDefinition)
    {
      this._containerDefinitions.Add(containerDefinition.Type, containerDefinition);
      this._containerDefinitionsWithId.Add(containerDefinition.SaveId, containerDefinition);
      this._allTypeDefinitions.Add(containerDefinition.Type, (TypeDefinitionBase) containerDefinition);
      this._allTypeDefinitionsWithId.Add(containerDefinition.SaveId, (TypeDefinitionBase) containerDefinition);
    }

    internal void AddBasicTypeDefinition(BasicTypeDefinition basicTypeDefinition)
    {
      this._basicTypeDefinitions.Add(basicTypeDefinition.Type, basicTypeDefinition);
      this._basicTypeDefinitionsWithId.Add(basicTypeDefinition.SaveId, basicTypeDefinition);
      this._allTypeDefinitions.Add(basicTypeDefinition.Type, (TypeDefinitionBase) basicTypeDefinition);
      this._allTypeDefinitionsWithId.Add(basicTypeDefinition.SaveId, (TypeDefinitionBase) basicTypeDefinition);
    }

    private void AddGenericClassDefinition(GenericTypeDefinition genericClassDefinition)
    {
      this._genericClassDefinitions.Add(genericClassDefinition.Type, genericClassDefinition);
      this._allTypeDefinitions.Add(genericClassDefinition.Type, (TypeDefinitionBase) genericClassDefinition);
      this._allTypeDefinitionsWithId.Add(genericClassDefinition.SaveId, (TypeDefinitionBase) genericClassDefinition);
    }

    private void AddGenericStructDefinition(GenericTypeDefinition genericStructDefinition)
    {
      this._genericStructDefinitions.Add(genericStructDefinition.Type, genericStructDefinition);
      this._allTypeDefinitions.Add(genericStructDefinition.Type, (TypeDefinitionBase) genericStructDefinition);
      this._allTypeDefinitionsWithId.Add(genericStructDefinition.SaveId, (TypeDefinitionBase) genericStructDefinition);
    }

    public void FillWithCurrentTypes()
    {
      this._assemblies = this.GetSaveableAssemblies();
      foreach (Assembly assembly in this._assemblies)
        this.CollectTypes(assembly);
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.Initialize(this);
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineBasicTypes();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineClassTypes();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineStructTypes();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineInterfaceTypes();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineEnumTypes();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineRootClassTypes();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineGenericStructDefinitions();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineGenericClassDefinitions();
      foreach (SaveableTypeDefiner saveableTypeDefiner in this._saveableTypeDefiners)
        saveableTypeDefiner.DefineContainerDefinitions();
      foreach (TypeDefinition typeDefinition in this._rootClassDefinitions.Values)
      {
        typeDefinition.CollectInitializationCallbacks();
        typeDefinition.CollectProperties();
        typeDefinition.CollectFields();
      }
      TWParallel.ForEach<TypeDefinition>((IEnumerable<TypeDefinition>) this._classDefinitions.Values, (Action<TypeDefinition>) (classDefinition =>
      {
        classDefinition.CollectInitializationCallbacks();
        classDefinition.CollectProperties();
        classDefinition.CollectFields();
      }));
      foreach (TypeDefinition typeDefinition in this._classDefinitions.Values)
        this._errors.AddRange(typeDefinition.Errors);
      TWParallel.ForEach<TypeDefinition>((IEnumerable<TypeDefinition>) this._structDefinitions.Values, (Action<TypeDefinition>) (structDefinitions =>
      {
        structDefinitions.CollectProperties();
        structDefinitions.CollectFields();
      }));
      foreach (TypeDefinition typeDefinition in this._structDefinitions.Values)
        this._errors.AddRange(typeDefinition.Errors);
      this.FindAutoGeneratedSaveManagers();
      this.InitializeAutoGeneratedSaveManagers();
    }

    private Assembly[] GetSaveableAssemblies()
    {
      List<Assembly> assemblyList = new List<Assembly>();
      Assembly assembly1 = typeof (SaveableRootClassAttribute).Assembly;
      Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
      assemblyList.Add(assembly1);
      foreach (Assembly assembly2 in assemblies)
      {
        if (assembly2 != assembly1)
        {
          foreach (object referencedAssembly in assembly2.GetReferencedAssemblies())
          {
            if (referencedAssembly.ToString() == assembly1.GetName().ToString())
            {
              assemblyList.Add(assembly2);
              break;
            }
          }
        }
      }
      return assemblyList.ToArray();
    }

    private void CollectTypes(Assembly assembly)
    {
      foreach (Type type in assembly.GetTypes())
      {
        if (typeof (SaveableTypeDefiner).IsAssignableFrom(type) && !type.IsAbstract)
          this._saveableTypeDefiners.Add((SaveableTypeDefiner) Activator.CreateInstance(type));
      }
    }

    internal TypeDefinitionBase GetTypeDefinition(Type type)
    {
      TypeDefinitionBase typeDefinitionBase;
      return this._allTypeDefinitions.TryGetValue(type, out typeDefinitionBase) ? typeDefinitionBase : (TypeDefinitionBase) null;
    }

    internal TypeDefinition GetClassDefinition(Type type)
    {
      if (type.IsContainer())
        return (TypeDefinition) null;
      TypeDefinition typeDefinition1;
      if (this._rootClassDefinitions.TryGetValue(type, out typeDefinition1))
        return typeDefinition1;
      GenericTypeDefinition genericTypeDefinition;
      if (this._genericClassDefinitions.TryGetValue(type, out genericTypeDefinition))
        return (TypeDefinition) genericTypeDefinition;
      TypeDefinition typeDefinition2;
      return this._classDefinitions.TryGetValue(type, out typeDefinition2) ? typeDefinition2 : (TypeDefinition) null;
    }

    public TypeDefinitionBase TryGetTypeDefinition(SaveId saveId)
    {
      TypeDefinitionBase typeDefinitionBase;
      if (this._allTypeDefinitionsWithId.TryGetValue(saveId, out typeDefinitionBase))
        return typeDefinitionBase;
      if (saveId is GenericSaveId)
      {
        GenericSaveId saveId1 = (GenericSaveId) saveId;
        if (this.TryGetTypeDefinition(saveId1.BaseId) is TypeDefinition typeDefinition3)
        {
          TypeDefinitionBase[] parameterDefinitions = new TypeDefinitionBase[saveId1.GenericTypeIDs.Length];
          for (int index = 0; index < saveId1.GenericTypeIDs.Length; ++index)
          {
            TypeDefinitionBase typeDefinition = this.TryGetTypeDefinition(saveId1.GenericTypeIDs[index]);
            if (typeDefinition == null)
              return (TypeDefinitionBase) null;
            parameterDefinitions[index] = typeDefinition;
          }
          Type type = this.ConstructTypeFrom(typeDefinition3, parameterDefinitions);
          if (type != (Type) null)
          {
            GenericTypeDefinition genericTypeDefinition = new GenericTypeDefinition(type, saveId1);
            genericTypeDefinition.CollectInitializationCallbacks();
            genericTypeDefinition.CollectFields();
            genericTypeDefinition.CollectProperties();
            if (genericTypeDefinition.IsClassDefinition)
              this.AddGenericClassDefinition(genericTypeDefinition);
            else
              this.AddGenericStructDefinition(genericTypeDefinition);
            return (TypeDefinitionBase) genericTypeDefinition;
          }
        }
      }
      return (TypeDefinitionBase) null;
    }

    internal GenericTypeDefinition ConstructGenericClassDefinition(Type type)
    {
      TypeDefinition classDefinition = this.GetClassDefinition(type.GetGenericTypeDefinition());
      TypeSaveId saveId1 = (TypeSaveId) classDefinition.SaveId;
      SaveId[] saveIds = new SaveId[type.GenericTypeArguments.Length];
      for (int index = 0; index < type.GenericTypeArguments.Length; ++index)
      {
        TypeDefinitionBase typeDefinition = this.GetTypeDefinition(type.GenericTypeArguments[index]);
        saveIds[index] = typeDefinition.SaveId;
      }
      GenericSaveId saveId2 = new GenericSaveId(saveId1, saveIds);
      GenericTypeDefinition genericClassDefinition = new GenericTypeDefinition(type, saveId2);
      foreach (CustomField customField in classDefinition.CustomFields)
        genericClassDefinition.AddCustomField(customField.Name, customField.SaveId);
      genericClassDefinition.CollectInitializationCallbacks();
      genericClassDefinition.CollectFields();
      genericClassDefinition.CollectProperties();
      this.AddGenericClassDefinition(genericClassDefinition);
      return genericClassDefinition;
    }

    internal ContainerDefinition ConstructContainerDefinition(
      Type type,
      Assembly definedAssembly)
    {
      ContainerType containerType;
      type.IsContainer(out containerType);
      SaveId keyId = (SaveId) null;
      SaveId valueId = (SaveId) null;
      switch (containerType)
      {
        case ContainerType.List:
          keyId = this.GetTypeDefinition(type.GenericTypeArguments[0]).SaveId;
          break;
        case ContainerType.Dictionary:
          keyId = this.GetTypeDefinition(type.GenericTypeArguments[0]).SaveId;
          valueId = this.GetTypeDefinition(type.GenericTypeArguments[1]).SaveId;
          break;
        case ContainerType.Array:
          keyId = this.GetTypeDefinition(type.GetElementType()).SaveId;
          break;
        case ContainerType.Queue:
          keyId = this.GetTypeDefinition(type.GenericTypeArguments[0]).SaveId;
          break;
      }
      ContainerSaveId saveId = new ContainerSaveId(containerType, keyId, valueId);
      ContainerDefinition containerDefinition = new ContainerDefinition(type, saveId, definedAssembly);
      this.AddContainerDefinition(containerDefinition);
      return containerDefinition;
    }

    private Type ConstructTypeFrom(
      TypeDefinition baseClassDefinition,
      TypeDefinitionBase[] parameterDefinitions)
    {
      Type type1 = baseClassDefinition.Type;
      Type[] typeArray = new Type[parameterDefinitions.Length];
      for (int index = 0; index < parameterDefinitions.Length; ++index)
      {
        Type type2 = parameterDefinitions[index].Type;
        if (type2 == (Type) null)
          return (Type) null;
        typeArray[index] = type2;
      }
      return type1.MakeGenericType(typeArray);
    }

    internal TypeDefinition GetStructDefinition(Type type)
    {
      GenericTypeDefinition genericTypeDefinition;
      if (this._genericStructDefinitions.TryGetValue(type, out genericTypeDefinition))
        return (TypeDefinition) genericTypeDefinition;
      TypeDefinition typeDefinition;
      return this._structDefinitions.TryGetValue(type, out typeDefinition) ? typeDefinition : (TypeDefinition) null;
    }

    internal InterfaceDefinition GetInterfaceDefinition(Type type)
    {
      InterfaceDefinition interfaceDefinition;
      this._interfaceDefinitions.TryGetValue(type, out interfaceDefinition);
      return interfaceDefinition;
    }

    internal EnumDefinition GetEnumDefinition(Type type)
    {
      EnumDefinition enumDefinition;
      this._enumDefinitions.TryGetValue(type, out enumDefinition);
      return enumDefinition;
    }

    internal ContainerDefinition GetContainerDefinition(Type type)
    {
      ContainerDefinition containerDefinition;
      this._containerDefinitions.TryGetValue(type, out containerDefinition);
      return containerDefinition;
    }

    internal GenericTypeDefinition ConstructGenericStructDefinition(Type type)
    {
      TypeDefinition structDefinition = this.GetStructDefinition(type.GetGenericTypeDefinition());
      TypeSaveId saveId1 = (TypeSaveId) structDefinition.SaveId;
      SaveId[] saveIds = new SaveId[type.GenericTypeArguments.Length];
      for (int index = 0; index < type.GenericTypeArguments.Length; ++index)
      {
        TypeDefinitionBase typeDefinition = this.GetTypeDefinition(type.GenericTypeArguments[index]);
        saveIds[index] = typeDefinition.SaveId;
      }
      GenericSaveId saveId2 = new GenericSaveId(saveId1, saveIds);
      GenericTypeDefinition genericStructDefinition = new GenericTypeDefinition(type, saveId2);
      foreach (CustomField customField in structDefinition.CustomFields)
        genericStructDefinition.AddCustomField(customField.Name, customField.SaveId);
      genericStructDefinition.CollectFields();
      genericStructDefinition.CollectProperties();
      this.AddGenericStructDefinition(genericStructDefinition);
      return genericStructDefinition;
    }

    internal BasicTypeDefinition GetBasicTypeDefinition(Type type)
    {
      BasicTypeDefinition basicTypeDefinition;
      this._basicTypeDefinitions.TryGetValue(type, out basicTypeDefinition);
      return basicTypeDefinition;
    }

    private void FindAutoGeneratedSaveManagers()
    {
      foreach (Assembly assembly in this._assemblies)
      {
        foreach (Type type in assembly.GetTypes())
        {
          if (typeof (IAutoGeneratedSaveManager).IsAssignableFrom(type) && typeof (IAutoGeneratedSaveManager) != type)
            this._autoGeneratedSaveManagers.Add((IAutoGeneratedSaveManager) Activator.CreateInstance(type));
        }
      }
    }

    private void InitializeAutoGeneratedSaveManagers()
    {
      foreach (IAutoGeneratedSaveManager generatedSaveManager in this._autoGeneratedSaveManagers)
        generatedSaveManager.Initialize(this);
    }

    public void GenerateCode(SaveCodeGenerationContext context)
    {
      foreach (TypeDefinition classDefinition in this._classDefinitions.Values)
      {
        Assembly assembly = classDefinition.Type.Assembly;
        context.FindAssemblyInformation(assembly)?.AddClassDefinition(classDefinition);
      }
      foreach (TypeDefinition classDefinition in this._structDefinitions.Values)
      {
        Assembly assembly = classDefinition.Type.Assembly;
        context.FindAssemblyInformation(assembly)?.AddStructDefinition(classDefinition);
      }
      foreach (ContainerDefinition containerDefinition in this._containerDefinitions.Values)
      {
        Type type = containerDefinition.Type;
        Assembly definedAssembly = containerDefinition.DefinedAssembly;
        context.FindAssemblyInformation(definedAssembly)?.AddContainerDefinition(containerDefinition);
      }
      context.FillFiles();
    }
  }
}
