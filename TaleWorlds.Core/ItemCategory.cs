// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.ItemCategory
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(20512)]
  public sealed class ItemCategory : MBObjectBase
  {
    internal static void AutoGeneratedStaticCollectObjectsItemCategory(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => base.AutoGeneratedInstanceCollectObjects(collectedObjects);

    public ItemCategory()
    {
    }

    public bool IsTradeGood { get; private set; }

    public bool IsAnimal { get; private set; }

    public ItemCategory CanSubstitute { get; private set; }

    public float SubstitutionFactor { get; private set; }

    public ItemCategory.Property Properties { get; private set; }

    public ItemCategory(string stringId)
      : base(stringId)
    {
    }

    public ItemCategory InitializeObject(
      bool isTradeGood = false,
      int baseDemand = 0,
      int luxuryDemand = 0,
      ItemCategory.Property properties = ItemCategory.Property.None,
      ItemCategory canSubstitute = null,
      float substitutionFactor = 0.0f,
      bool isAnimal = false)
    {
      this.Initialize();
      this.Properties = properties;
      this.BaseDemand = (float) baseDemand * (1f / 1000f);
      this.LuxuryDemand = (float) luxuryDemand * (1f / 1000f);
      this.IsTradeGood = isTradeGood;
      this.IsAnimal = isAnimal;
      this.CanSubstitute = canSubstitute;
      this.SubstitutionFactor = substitutionFactor;
      this.AfterInitialized();
      return this;
    }

    public override TextObject GetName() => GameTexts.FindText("str_item_category", this.StringId);

    public override string ToString() => this.StringId;

    public static ItemCategory Find(string idString) => ItemCategory.FindFirst((Func<ItemCategory, bool>) (s => s.StringId == idString));

    public static ItemCategory FindFirst(Func<ItemCategory, bool> predicate)
    {
      int count = Game.Current.ItemCategoryList.Count;
      for (int index = 0; index < count; ++index)
      {
        ItemCategory itemCategory = Game.Current.ItemCategoryList[index];
        if (predicate(itemCategory))
          return itemCategory;
      }
      return (ItemCategory) null;
    }

    public static MBReadOnlyList<ItemCategory> All => Game.Current.ItemCategoryList;

    public float BaseDemand { get; private set; }

    public float LuxuryDemand { get; private set; }

    public float AverageValue => (float) ItemObject.All.First<ItemObject>((Func<ItemObject, bool>) (x => x.ItemCategory == this)).Value;

    public enum Property
    {
      None,
      BonusToProduction,
      BonusToFoodStores,
      BonusToProsperity,
      BonusToLoyalty,
      BonusToMilitia,
      BonusToGarrison,
      BonusToTax,
    }
  }
}
