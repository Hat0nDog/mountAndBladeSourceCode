// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.GameText
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10017)]
  public class GameText
  {
    private readonly List<GameText.GameTextVariation> _variationList;

    internal static void AutoGeneratedStaticCollectObjectsGameText(
      object o,
      List<object> collectedObjects)
    {
      ((GameText) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
    }

    public string Id { get; private set; }

    public IEnumerable<GameText.GameTextVariation> Variations => (IEnumerable<GameText.GameTextVariation>) this._variationList;

    public TextObject DefaultText => this._variationList != null && this._variationList.Count > 0 ? this._variationList[0].Text : (TextObject) null;

    internal GameText() => this._variationList = new List<GameText.GameTextVariation>();

    internal GameText(string id)
    {
      this.Id = id;
      this._variationList = new List<GameText.GameTextVariation>();
    }

    internal TextObject GetVariation(string variationId)
    {
      foreach (GameText.GameTextVariation variation in this._variationList)
      {
        if (variation.Id.Equals(variationId))
          return variation.Text;
      }
      return (TextObject) null;
    }

    public void AddVariationWithId(
      string variationId,
      TextObject text,
      List<GameTextManager.ChoiceTag> choiceTags)
    {
      foreach (GameText.GameTextVariation variation in this._variationList)
      {
        if (variation.Id.Equals(variationId) && variation.Text.ToString().Equals(text.ToString()))
          return;
      }
      this._variationList.Add(new GameText.GameTextVariation(variationId, text, choiceTags));
    }

    public void AddVariation(string text, params object[] propertiesAndWeights)
    {
      List<GameTextManager.ChoiceTag> choiceTags = new List<GameTextManager.ChoiceTag>();
      for (int index = 0; index < propertiesAndWeights.Length; index += 2)
      {
        string propertiesAndWeight = (string) propertiesAndWeights[index];
        int int32 = Convert.ToInt32(propertiesAndWeights[index + 1]);
        choiceTags.Add(new GameTextManager.ChoiceTag(propertiesAndWeight, int32));
      }
      this.AddVariationWithId("", new TextObject(text), choiceTags);
    }

    [SaveableStruct(11001)]
    public struct GameTextVariation
    {
      public readonly string Id;
      public readonly TextObject Text;
      public readonly GameTextManager.ChoiceTag[] Tags;

      public static void AutoGeneratedStaticCollectObjectsGameTextVariation(
        object o,
        List<object> collectedObjects)
      {
        ((GameText.GameTextVariation) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
      }

      private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
      {
      }

      internal GameTextVariation(
        string id,
        TextObject text,
        List<GameTextManager.ChoiceTag> choiceTags)
      {
        this.Id = id;
        this.Text = text;
        this.Tags = choiceTags.ToArray();
      }
    }
  }
}
