// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.PropertyOwnerF`1
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10032)]
  public class PropertyOwnerF<T> : MBObjectBase where T : MBObjectBase
  {
    [SaveableField(10)]
    protected Dictionary<T, float> _attributes;

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
      base.AutoGeneratedInstanceCollectObjects(collectedObjects);
      collectedObjects.Add((object) this._attributes);
    }

    public PropertyOwnerF() => this._attributes = new Dictionary<T, float>();

    public PropertyOwnerF(PropertyOwnerF<T> propertyOwner) => this._attributes = new Dictionary<T, float>((IDictionary<T, float>) propertyOwner._attributes);

    public void SetPropertyValue(T attribute, float value) => this._attributes[attribute] = value;

    public float GetPropertyValue(T attribute)
    {
      float num;
      return (object) attribute != null && this._attributes.TryGetValue(attribute, out num) ? num : 0.0f;
    }

    public bool HasProperty(T attribute) => this._attributes.ContainsKey(attribute);

    public void ClearAllProperty() => this._attributes.Clear();

    public void Serialize(XmlWriter writer)
    {
      writer.WriteStartElement("attributes");
      foreach (KeyValuePair<T, float> attribute in this._attributes)
      {
        writer.WriteStartElement("attribute");
        writer.WriteAttributeString("id", attribute.Key.StringId);
        writer.WriteAttributeString("value", attribute.Value.ToString());
        writer.WriteEndElement();
      }
      writer.WriteEndElement();
    }

    public override void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      this.Initialize();
      foreach (XmlNode childNode1 in node.ChildNodes)
      {
        if (childNode1.Name == "attributes")
        {
          foreach (XmlNode childNode2 in childNode1.ChildNodes)
          {
            if (childNode2.Name == "attribute")
            {
              string innerText = childNode2.Attributes["id"].InnerText;
              if (innerText.Substring(0, innerText.IndexOf('.')).Equals("Attrib"))
                this.SetPropertyValue(objectManager.ReadObjectReferenceFromXml("id", typeof (T), childNode2) as T, (float) Convert.ToInt32(childNode2.Attributes["value"].Value));
            }
          }
        }
      }
    }
  }
}
