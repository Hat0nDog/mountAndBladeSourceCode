// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.Timer
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10033)]
  public class Timer
  {
    private float _startTime;
    private float _latestGameTime;
    private bool _autoReset;

    internal static void AutoGeneratedStaticCollectObjectsTimer(
      object o,
      List<object> collectedObjects)
    {
      ((Timer) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
    }

    public float Duration { get; protected set; }

    public Timer(float gameTime, float duration, bool autoReset = true)
    {
      this._startTime = gameTime;
      this._latestGameTime = gameTime;
      this._autoReset = autoReset;
      this.Duration = duration;
    }

    public virtual bool Check(float gameTime)
    {
      this._latestGameTime = gameTime;
      if ((double) this.Duration <= 0.0)
      {
        this.PreviousDeltaTime = this.ElapsedTime();
        this._startTime = gameTime;
        return true;
      }
      bool flag = false;
      if ((double) this.ElapsedTime() >= (double) this.Duration)
      {
        this.PreviousDeltaTime = this.ElapsedTime();
        if (this._autoReset)
        {
          while ((double) this.ElapsedTime() >= (double) this.Duration)
            this._startTime += this.Duration;
        }
        flag = true;
      }
      return flag;
    }

    public float ElapsedTime() => this._latestGameTime - this._startTime;

    public float PreviousDeltaTime { get; private set; }

    public void Reset(float gameTime) => this.Reset(gameTime, this.Duration);

    public void Reset(float gameTime, float newDuration)
    {
      this._startTime = gameTime;
      this._latestGameTime = gameTime;
      this.Duration = newDuration;
    }

    public void AdjustStartTime(float deltaTime) => this._startTime += deltaTime;
  }
}
