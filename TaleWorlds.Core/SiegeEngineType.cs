// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.SiegeEngineType
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
  public sealed class SiegeEngineType : MBObjectBase
  {
    internal static void AutoGeneratedStaticCollectObjectsSiegeEngineType(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => base.AutoGeneratedInstanceCollectObjects(collectedObjects);

    public int Difficulty { get; private set; }

    public int BaseHitPoints { get; private set; }

    public int ToolCost { get; private set; }

    public float HitChance { get; private set; }

    public bool IsAntiPersonnel { get; private set; }

    public float AntiPersonnelHitChance { get; private set; }

    public bool IsConstructible { get; private set; }

    public bool IsRanged { get; private set; }

    public int Damage { get; private set; }

    public int ManDayCost { get; private set; }

    public float CampaignRateOfFirePerDay { get; private set; }

    public float MovementSpeed { get; private set; }

    public float ProjectileSpeed { get; private set; }

    public TextObject Name { get; private set; }

    public TextObject Description { get; private set; }

    public static IEnumerable<SiegeEngineType> All => (IEnumerable<SiegeEngineType>) MBObjectManager.Instance.GetObjectTypeList<SiegeEngineType>();

    public override string ToString() => this.Name.ToString();

    public override void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      base.Deserialize(objectManager, node);
      this.Name = new TextObject(node.Attributes["name"].InnerText);
      this.Description = new TextObject(node.Attributes["description"].InnerText);
      XmlAttribute attribute = node.Attributes["max_hit_points"];
      this.BaseHitPoints = attribute == null ? 1 : Convert.ToInt32(attribute.Value);
      this.Difficulty = Convert.ToInt32(node.Attributes["difficulty"]?.Value);
      this.ToolCost = Convert.ToInt32(node.Attributes["tool_cost"].Value);
      this.HitChance = (float) Convert.ToDouble(node.Attributes["hit_chance"].Value);
      this.IsAntiPersonnel = Convert.ToBoolean(node.Attributes["is_anti_personnel"].Value);
      this.AntiPersonnelHitChance = this.IsAntiPersonnel ? (float) Convert.ToDouble(node.Attributes["anti_personnel_hit_chance"].Value) : 0.0f;
      this.IsConstructible = Convert.ToBoolean(node.Attributes["is_constructible"].Value);
      this.IsRanged = Convert.ToBoolean(node.Attributes["is_ranged"].Value);
      this.Damage = Convert.ToInt32(node.Attributes["damage"].Value);
      this.ManDayCost = Convert.ToInt32(node.Attributes["man_day_cost"].Value);
      this.CampaignRateOfFirePerDay = (float) Convert.ToDouble(node.Attributes["campaign_rate_of_fire_per_day"].Value);
      this.MovementSpeed = (float) Convert.ToDouble(node.Attributes["movement_speed"].Value);
      this.ProjectileSpeed = (float) Convert.ToDouble(node.Attributes["projectile_speed"].Value);
    }
  }
}
