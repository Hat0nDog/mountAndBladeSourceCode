// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.SkillObject
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(20509)]
  public sealed class SkillObject : PropertyObject
  {
    [SaveableField(100)]
    private SkillObject.SkillTypeEnum _skillType;
    [SaveableField(102)]
    private CharacterAttribute _characterAttribute;

    internal static void AutoGeneratedStaticCollectObjectsSkillObject(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
      base.AutoGeneratedInstanceCollectObjects(collectedObjects);
      collectedObjects.Add((object) this._characterAttribute);
    }

    internal static object AutoGeneratedGetMemberValue_skillType(object o) => (object) ((SkillObject) o)._skillType;

    internal static object AutoGeneratedGetMemberValue_characterAttribute(object o) => (object) ((SkillObject) o)._characterAttribute;

    public SkillObject(string stringId)
      : base(stringId)
    {
    }

    public void SetAttribute(CharacterAttribute attribute) => this.CharacterAttribute = attribute;

    public CharacterAttribute CharacterAttribute
    {
      get => this._characterAttribute;
      private set
      {
        this._characterAttribute = value;
        this._characterAttribute.AddSkill(this);
      }
    }

    public CharacterAttributesEnum CharacterAttributesEnum => this._characterAttribute.AttributeEnum;

    public override string ToString() => this.Name.ToString();

    public SkillObject Initialize(
      TextObject name,
      TextObject description,
      SkillObject.SkillTypeEnum skillType)
    {
      this.Initialize(name, description);
      this._skillType = skillType;
      this.AfterInitialized();
      return this;
    }

    public static SkillObject Find(MBGUID id) => SkillObject.FindFirst((Func<SkillObject, bool>) (s => s.Id == id));

    public static SkillObject FindFirst(Func<SkillObject, bool> predicate)
    {
      int count = Game.Current.SkillList.Count;
      for (int index = 0; index < count; ++index)
      {
        SkillObject skill = Game.Current.SkillList[index];
        if (predicate(skill))
          return skill;
      }
      return (SkillObject) null;
    }

    public static MBReadOnlyList<SkillObject> All => Game.Current.SkillList;

    public static int SkillCount => Game.Current.SkillList.Count;

    public bool IsLeaderSkill => this._skillType == SkillObject.SkillTypeEnum.Leader;

    public bool IsPartySkill => this._skillType == SkillObject.SkillTypeEnum.Party;

    public bool IsPersonalSkill => this._skillType == SkillObject.SkillTypeEnum.Personal;

    public CharacterAttributesEnum CharacterAttributeEnum => this._characterAttribute.AttributeEnum;

    public static SkillObject GetSkill(int i) => Game.Current.SkillList[i];

    public TextObject HowToLearnSkillText => GameTexts.FindText("str_how_to_learn_skill", this.StringId) == null ? new TextObject("{=Aj3zqQq4}Not available") : GameTexts.FindText("str_how_to_learn_skill", this.StringId);

    public enum SkillTypeEnum
    {
      Personal,
      Leader,
      Party,
    }
  }
}
