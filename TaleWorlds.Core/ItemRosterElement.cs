// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.ItemRosterElement
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableStruct(20248)]
  public struct ItemRosterElement : ISerializableObject
  {
    private static readonly ItemRosterElement StaticInvalidElement = new ItemRosterElement((ItemObject) null);
    [SaveableField(11)]
    private int _amount;

    public static void AutoGeneratedStaticCollectObjectsItemRosterElement(
      object o,
      List<object> collectedObjects)
    {
      ((ItemRosterElement) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => EquipmentElement.AutoGeneratedStaticCollectObjectsEquipmentElement((object) this.EquipmentElement, collectedObjects);

    internal static object AutoGeneratedGetMemberValueEquipmentElement(object o) => (object) ((ItemRosterElement) o).EquipmentElement;

    internal static object AutoGeneratedGetMemberValue_amount(object o) => (object) ((ItemRosterElement) o)._amount;

    public static ItemRosterElement Invalid => ItemRosterElement.StaticInvalidElement;

    [SaveableProperty(21)]
    public EquipmentElement EquipmentElement { get; private set; }

    public int Amount
    {
      get => this._amount;
      set => this._amount = value >= 0 ? value : throw new MBUnderFlowException("ItemRosterElement::Amount");
    }

    public bool IsEmpty => this.EquipmentElement.Item == null;

    public ItemRosterElement(ItemObject item, int amount = 0, ItemModifier itemModifier = null)
      : this()
    {
      this.EquipmentElement = new EquipmentElement(item, itemModifier);
      this._amount = amount;
    }

    public ItemRosterElement(EquipmentElement equipmentElement, int amount)
    {
      this.EquipmentElement = equipmentElement;
      this._amount = amount;
    }

    public override int GetHashCode() => this.EquipmentElement.GetHashCode();

    public override string ToString() => this.EquipmentElement.Item.ToString() + " x" + this.Amount.ToString();

    public ItemRosterElement(ItemRosterElement itemRosterElement)
    {
      EquipmentElement equipmentElement = itemRosterElement.EquipmentElement;
      ItemObject itemObject = equipmentElement.Item;
      int amount = itemRosterElement.Amount;
      equipmentElement = itemRosterElement.EquipmentElement;
      ItemModifier itemModifier = equipmentElement.ItemModifier;
      this = new ItemRosterElement(itemObject, amount, itemModifier);
    }

    public void Clear()
    {
      this.EquipmentElement.Clear();
      this.Amount = 0;
    }

    public bool IsEqualTo(ItemRosterElement other) => this.EquipmentElement.IsEqualTo(other.EquipmentElement);

    public override bool Equals(object obj) => this.EquipmentElement.Equals(obj);

    public bool Equals(ItemRosterElement other) => this.EquipmentElement.Equals(other);

    public float GetRosterElementWeight() => this.EquipmentElement.GetEquipmentElementWeight() * (float) this.Amount;

    void ISerializableObject.DeserializeFrom(IReader reader)
    {
      this.Amount = reader.ReadInt();
      string objectName = reader.ReadString();
      ItemModifier itemModifier = (ItemModifier) null;
      if (objectName != "")
        itemModifier = Game.Current.ObjectManager.GetObject<ItemModifier>(objectName);
      this.EquipmentElement = new EquipmentElement(MBObjectManager.Instance.GetObject(new MBGUID(reader.ReadUInt())) as ItemObject, itemModifier);
    }

    void ISerializableObject.SerializeTo(IWriter writer)
    {
      writer.WriteInt(this.Amount);
      IWriter writer1 = writer;
      EquipmentElement equipmentElement;
      string str;
      if (this.EquipmentElement.ItemModifier == null)
      {
        str = "";
      }
      else
      {
        equipmentElement = this.EquipmentElement;
        str = equipmentElement.ItemModifier.StringId;
      }
      writer1.WriteString(str);
      IWriter writer2 = writer;
      equipmentElement = this.EquipmentElement;
      ItemObject itemObject = equipmentElement.Item;
      int num = itemObject != null ? (int) itemObject.Id.InternalValue : 0;
      writer2.WriteUInt((uint) num);
    }
  }
}
