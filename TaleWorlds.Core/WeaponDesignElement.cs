// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.WeaponDesignElement
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10034)]
  public class WeaponDesignElement
  {
    [SaveableField(10)]
    private readonly CraftingPiece _craftingPiece;
    [SaveableField(20)]
    public int ScalePercentage;

    internal static void AutoGeneratedStaticCollectObjectsWeaponDesignElement(
      object o,
      List<object> collectedObjects)
    {
      ((WeaponDesignElement) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => collectedObjects.Add((object) this._craftingPiece);

    internal static object AutoGeneratedGetMemberValueScalePercentage(object o) => (object) ((WeaponDesignElement) o).ScalePercentage;

    internal static object AutoGeneratedGetMemberValue_craftingPiece(object o) => (object) ((WeaponDesignElement) o)._craftingPiece;

    public float ScaleFactor => (float) this.ScalePercentage * 0.01f;

    public bool IsPieceScaled => this.ScalePercentage != 100;

    public CraftingPiece CraftingPiece => this._craftingPiece;

    public bool IsValid => this.CraftingPiece.IsValid;

    public float ScaledLength => !this.IsPieceScaled ? this.CraftingPiece.Length : this.CraftingPiece.Length * this.ScaleFactor;

    public float ScaledWeight => !this.IsPieceScaled ? this.CraftingPiece.Weight : this.CraftingPiece.Weight * (this._craftingPiece.FullScale ? this.ScaleFactor * this.ScaleFactor * this.ScaleFactor : this.ScaleFactor);

    public float ScaledCenterOfMass => !this.IsPieceScaled ? this.CraftingPiece.CenterOfMass : this.CraftingPiece.CenterOfMass * this.ScaleFactor;

    public float ScaledDistanceToNextPiece => !this.IsPieceScaled ? this.CraftingPiece.DistanceToNextPiece : this.CraftingPiece.DistanceToNextPiece * this.ScaleFactor;

    public float ScaledDistanceToPreviousPiece => !this.IsPieceScaled ? this.CraftingPiece.DistanceToPreviousPiece : this.CraftingPiece.DistanceToPreviousPiece * this.ScaleFactor;

    public float ScaledBladeLength => !this.IsPieceScaled ? this.CraftingPiece.BladeData.BladeLength : this.CraftingPiece.BladeData.BladeLength * this.ScaleFactor;

    public float ScaledPieceOffset => !this.IsPieceScaled ? this.CraftingPiece.PieceOffset : this.CraftingPiece.PieceOffset * this.ScaleFactor;

    public float ScaledPreviousPieceOffset => !this.IsPieceScaled ? this.CraftingPiece.PreviousPieceOffset : this.CraftingPiece.PreviousPieceOffset * this.ScaleFactor;

    public float ScaledNextPieceOffset => !this.IsPieceScaled ? this.CraftingPiece.NextPieceOffset : this.CraftingPiece.NextPieceOffset * this.ScaleFactor;

    public void SetScale(int scalePercentage) => this.ScalePercentage = scalePercentage;

    private WeaponDesignElement(CraftingPiece craftingPiece, int scalePercentage = 100)
    {
      this._craftingPiece = craftingPiece;
      this.ScalePercentage = scalePercentage;
    }

    public WeaponDesignElement GetCopy() => new WeaponDesignElement(this.CraftingPiece, this.ScalePercentage);

    public static WeaponDesignElement GetInvalidPieceForType(
      CraftingPiece.PieceTypes pieceType)
    {
      return new WeaponDesignElement(CraftingPiece.GetInvalidCraftingPiece(pieceType));
    }

    public static WeaponDesignElement CreateUsablePiece(
      CraftingPiece craftingPiece,
      int scalePercentage = 100)
    {
      return new WeaponDesignElement(craftingPiece, scalePercentage);
    }
  }
}
