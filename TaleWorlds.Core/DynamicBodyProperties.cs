// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.DynamicBodyProperties
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [Serializable]
  public struct DynamicBodyProperties
  {
    public const float MaxAge = 128f;
    [SaveableField(1)]
    public float Age;
    [SaveableField(2)]
    public float Weight;
    [SaveableField(3)]
    public float Build;
    public static readonly DynamicBodyProperties Invalid;
    public static readonly DynamicBodyProperties Default = new DynamicBodyProperties(20f, 0.5f, 0.5f);

    public static void AutoGeneratedStaticCollectObjectsDynamicBodyProperties(
      object o,
      List<object> collectedObjects)
    {
      ((DynamicBodyProperties) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
    }

    internal static object AutoGeneratedGetMemberValueAge(object o) => (object) ((DynamicBodyProperties) o).Age;

    internal static object AutoGeneratedGetMemberValueWeight(object o) => (object) ((DynamicBodyProperties) o).Weight;

    internal static object AutoGeneratedGetMemberValueBuild(object o) => (object) ((DynamicBodyProperties) o).Build;

    public DynamicBodyProperties(float age, float weight, float build)
    {
      this.Age = age;
      this.Weight = weight;
      this.Build = build;
    }

    public static bool operator ==(DynamicBodyProperties a, DynamicBodyProperties b)
    {
      if ((ValueType) a == (ValueType) b)
        return true;
      return (ValueType) a != null && (ValueType) b != null && ((double) a.Age == (double) b.Age && (double) a.Weight == (double) b.Weight) && (double) a.Build == (double) b.Build;
    }

    public static bool operator !=(DynamicBodyProperties a, DynamicBodyProperties b) => !(a == b);

    public bool Equals(DynamicBodyProperties other) => this.Age.Equals(other.Age) && this.Weight.Equals(other.Weight) && this.Build.Equals(other.Build);

    public override bool Equals(object obj) => obj != null && obj is DynamicBodyProperties other && this.Equals(other);

    public override int GetHashCode() => (this.Age.GetHashCode() * 397 ^ this.Weight.GetHashCode()) * 397 ^ this.Build.GetHashCode();

    public override string ToString()
    {
      MBStringBuilder mbStringBuilder = new MBStringBuilder();
      mbStringBuilder.Initialize(150, nameof (ToString));
      mbStringBuilder.Append<string>("age=\"");
      mbStringBuilder.Append<string>(this.Age.ToString("0.##"));
      mbStringBuilder.Append<string>("\" weight=\"");
      mbStringBuilder.Append<string>(this.Weight.ToString("0.####"));
      mbStringBuilder.Append<string>("\" build=\"");
      mbStringBuilder.Append<string>(this.Build.ToString("0.####"));
      mbStringBuilder.Append<string>("\" ");
      return mbStringBuilder.ToStringAndRelease();
    }
  }
}
