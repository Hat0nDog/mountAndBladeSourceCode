// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.HorseComponent
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10020)]
  public class HorseComponent : ItemComponent
  {
    private Monster _horseMonster;
    private string _horseMonsterId;
    public TextObject ModifiedName;
    public List<KeyValuePair<string, bool>> AdditionalMeshesNameList;
    private List<HorseComponent.MaterialProperty> _monsterMaterialNames;

    internal static void AutoGeneratedStaticCollectObjectsHorseComponent(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => base.AutoGeneratedInstanceCollectObjects(collectedObjects);

    public Monster Monster
    {
      get => this._horseMonster ?? (this._horseMonster = MBObjectManager.Instance.GetObject<Monster>(this._horseMonsterId));
      private set
      {
        this._horseMonster = (Monster) null;
        this._horseMonsterId = value.StringId;
      }
    }

    public int Maneuver { get; private set; }

    public int ChargeDamage { get; private set; }

    public int Speed { get; private set; }

    public int BodyLength { get; private set; }

    public int HitPoints => this.Monster.HitPoints;

    public int HitPointBonus { get; private set; }

    public bool IsRideable { get; private set; }

    public bool IsPackAnimal { get; private set; }

    public bool IsMount => this.IsRideable && !this.IsPackAnimal;

    public bool IsLiveStock => !this.IsRideable && !this.IsPackAnimal;

    public ItemModifierGroup ItemModifierGroup { get; private set; }

    public MBReadOnlyList<HorseComponent.MaterialProperty> HorseMaterialNames => this._monsterMaterialNames.GetReadOnlyList<HorseComponent.MaterialProperty>();

    public int MeatCount
    {
      get
      {
        if (this.IsRideable)
          return 3;
        if (this.Speed > 20)
          return 6;
        return this.Speed <= 11 ? 1 : 2;
      }
    }

    public int HideCount
    {
      get
      {
        if (this.IsRideable)
          return 0;
        return this.Speed <= 20 ? 1 : 2;
      }
    }

    public SkeletonScale SkeletonScale { get; private set; }

    public HorseComponent()
    {
      this.Maneuver = 0;
      this.ChargeDamage = 0;
      this.Speed = 0;
      this.BodyLength = 0;
      this.Reset();
      this._monsterMaterialNames = new List<HorseComponent.MaterialProperty>();
      this.AdditionalMeshesNameList = new List<KeyValuePair<string, bool>>();
      this.SkeletonScale = (SkeletonScale) null;
    }

    public override ItemComponent GetCopy() => (ItemComponent) new HorseComponent()
    {
      Maneuver = this.Maneuver,
      ChargeDamage = this.ChargeDamage,
      Speed = this.Speed,
      BodyLength = this.BodyLength
    };

    public override void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      base.Deserialize(objectManager, node);
      this.Maneuver = XmlHelper.ReadInt(node, "maneuver");
      this.ChargeDamage = XmlHelper.ReadInt(node, "charge_damage");
      this.Speed = XmlHelper.ReadInt(node, "speed");
      this.BodyLength = XmlHelper.ReadInt(node, "body_length");
      this.IsRideable = XmlHelper.ReadBool(node, "is_mountable");
      this.IsPackAnimal = XmlHelper.ReadBool(node, "is_pack_animal");
      this.Monster = (Monster) objectManager.ReadObjectReferenceFromXml("monster", typeof (Monster), node);
      this.HitPointBonus = XmlHelper.ReadInt(node, "extra_health");
      string objectName1 = node.Attributes["modifier_group"]?.Value;
      if (objectName1 != null)
        this.ItemModifierGroup = Game.Current.ObjectManager.GetObject<ItemModifierGroup>(objectName1);
      string objectName2 = node.Attributes["skeleton_scale"]?.Value;
      if (objectName2 != null)
        this.SkeletonScale = Game.Current.ObjectManager.GetObject<SkeletonScale>(objectName2);
      foreach (XmlNode childNode1 in node.ChildNodes)
      {
        if (childNode1.Name == "Materials")
        {
          foreach (XmlNode childNode2 in childNode1.ChildNodes)
          {
            if (childNode2.Name == "Material")
            {
              this._monsterMaterialNames.Add(new HorseComponent.MaterialProperty(childNode2.Attributes["name"].Value));
              foreach (XmlNode childNode3 in childNode2.ChildNodes)
              {
                if (childNode3.Name == "MeshMultipliers")
                {
                  foreach (XmlNode childNode4 in childNode3.ChildNodes)
                  {
                    if (childNode4.Name == "MeshMultiplier")
                      this._monsterMaterialNames[this._monsterMaterialNames.Count - 1].MeshMultiplier.Add(new Tuple<uint, float>(childNode4.Attributes["mesh_multiplier"] != null ? Convert.ToUInt32(childNode4.Attributes["mesh_multiplier"].Value, 16) : 0U, childNode4.Attributes["percentage"] != null ? (float) Convert.ToDouble(childNode4.Attributes["percentage"].Value) : 0.0f));
                  }
                }
              }
              this._monsterMaterialNames[this._monsterMaterialNames.Count - 1].MeshMultiplier.Sort((Comparison<Tuple<uint, float>>) ((x, y) => x.Item2.CompareTo(y.Item2)));
            }
          }
        }
        else if (childNode1.Name == "AdditionalMeshes")
        {
          foreach (XmlNode childNode2 in childNode1.ChildNodes)
          {
            if (childNode2.Name == "Mesh" && childNode2.Attributes["name"] != null)
            {
              bool result = false;
              if (childNode2.Attributes["affected_by_cover"] != null)
                result = bool.TryParse(childNode2.Attributes["affected_by_cover"].InnerText, out result);
              this.AdditionalMeshesNameList.Add(new KeyValuePair<string, bool>(childNode2.Attributes["name"].InnerText, result));
            }
          }
        }
      }
    }

    public override void Reset()
    {
      this.HitPointBonus = 0;
      this.ModifiedName = (TextObject) null;
    }

    [SaveableStruct(11002)]
    public struct MaterialProperty
    {
      public List<Tuple<uint, float>> MeshMultiplier;

      public static void AutoGeneratedStaticCollectObjectsMaterialProperty(
        object o,
        List<object> collectedObjects)
      {
        ((HorseComponent.MaterialProperty) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
      }

      private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
      {
      }

      public MaterialProperty(string name)
      {
        this.Name = name;
        this.MeshMultiplier = new List<Tuple<uint, float>>();
      }

      public string Name { get; private set; }
    }
  }
}
