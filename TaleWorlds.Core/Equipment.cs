// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.Equipment
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10008)]
  public class Equipment
  {
    [SaveableField(1)]
    private Equipment.EquipmentType _equipmentType;
    public const int EquipmentSlotLength = 12;
    [SaveableField(2)]
    private readonly EquipmentElement[] _itemSlots;
    public bool SyncEquipments;
    public const string NullCode = "@null";

    internal static void AutoGeneratedStaticCollectObjectsEquipment(
      object o,
      List<object> collectedObjects)
    {
      ((Equipment) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => collectedObjects.Add((object) this._itemSlots);

    internal static object AutoGeneratedGetMemberValue_equipmentType(object o) => (object) ((Equipment) o)._equipmentType;

    internal static object AutoGeneratedGetMemberValue_itemSlots(object o) => (object) ((Equipment) o)._itemSlots;

    public bool IsValid => this._equipmentType != Equipment.EquipmentType.Invalid;

    public bool IsCivilian => this._equipmentType == Equipment.EquipmentType.Civilian;

    public Equipment()
    {
      this._itemSlots = new EquipmentElement[12];
      this._equipmentType = Equipment.EquipmentType.Invalid;
    }

    public Equipment(bool isCivilian)
      : this()
    {
      this._itemSlots = new EquipmentElement[12];
      this._equipmentType = isCivilian ? Equipment.EquipmentType.Civilian : Equipment.EquipmentType.Battle;
    }

    public Equipment(Equipment equipment)
    {
      this._itemSlots = new EquipmentElement[12];
      for (int index = 0; index < 12; ++index)
        this._itemSlots[index] = new EquipmentElement(equipment[index]);
      this._equipmentType = equipment._equipmentType;
    }

    public EquipmentElement this[int index]
    {
      get => this._itemSlots[index];
      set
      {
        Equipment.IsItemFitsToSlot((EquipmentIndex) index, value.Item);
        if (index == 10 && this._itemSlots[index].Item != null && value.Item == null)
          Debug.Print("");
        this._itemSlots[index] = value;
      }
    }

    public EquipmentElement this[EquipmentIndex index]
    {
      get => this._itemSlots[(int) index];
      set => this[(int) index] = value;
    }

    public EquipmentElement Horse => this._itemSlots[10];

    private void SetItem(int index, EquipmentElement element) => this[index] = element;

    public Equipment Clone(bool cloneWithoutWeapons = false)
    {
      Equipment equipment = new Equipment(this.IsCivilian);
      for (int index = 0; index < 12; ++index)
      {
        bool flag = cloneWithoutWeapons && index >= 0 && index < 5;
        equipment.SetItem(index, flag ? EquipmentElement.Invalid : this[index]);
      }
      return equipment;
    }

    public void FillFrom(Equipment sourceEquipment, bool useSourceEquipmentType = true)
    {
      if (useSourceEquipmentType)
        this._equipmentType = sourceEquipment._equipmentType;
      for (int index = 0; index < 12; ++index)
        this[index] = sourceEquipment[index];
    }

    public void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      foreach (XmlNode childNode in node.ChildNodes)
        this.DeserializeNode(objectManager, childNode);
    }

    public void DeserializeNode(MBObjectManager objectManager, XmlNode node)
    {
      if (node.NodeType == XmlNodeType.Comment)
        return;
      XmlAttributeCollection attributes = node.Attributes;
      XmlAttribute xmlAttribute1 = attributes["id"];
      XmlAttribute xmlAttribute2 = attributes["slot"];
      string str;
      if (!xmlAttribute1.Value.Contains("."))
        str = xmlAttribute1.Value;
      else
        str = xmlAttribute1.Value.Split('.')[1];
      string objectName = str;
      EquipmentIndex equipmentIndexName = Equipment.GetEquipmentIndexFromOldEquipmentIndexName(xmlAttribute2.Value);
      ItemObject itemObject = MBObjectManager.Instance.GetObject<ItemObject>(objectName);
      if (!Equipment.IsItemFitsToSlot(equipmentIndexName, itemObject))
        return;
      this[equipmentIndexName] = new EquipmentElement(itemObject);
    }

    public static EquipmentIndex GetEquipmentIndexFromOldEquipmentIndexName(
      string oldEquipmentIndexName)
    {
      return (EquipmentIndex) Enum.Parse(typeof (EquipmentIndex), oldEquipmentIndexName == "Item0" ? "Weapon0" : (oldEquipmentIndexName == "Item1" ? "Weapon1" : (oldEquipmentIndexName == "Item2" ? "Weapon2" : (oldEquipmentIndexName == "Item3" ? "Weapon3" : (oldEquipmentIndexName == "Item4" ? "Weapon4" : oldEquipmentIndexName)))));
    }

    public bool IsEmpty() => ((IEnumerable<EquipmentElement>) this._itemSlots).All<EquipmentElement>((Func<EquipmentElement, bool>) (itemRosterElement => itemRosterElement.Item == null));

    public float GetTotalWeightOfArmor(bool forHuman)
    {
      float num = 0.0f;
      for (EquipmentIndex index = forHuman ? EquipmentIndex.NumAllWeaponSlots : EquipmentIndex.HorseHarness; index < (forHuman ? EquipmentIndex.ArmorItemEndSlot : EquipmentIndex.NumEquipmentSetSlots); ++index)
      {
        EquipmentElement equipmentElement = this[index];
        if (!equipmentElement.IsEmpty)
          num += equipmentElement.GetEquipmentElementWeight();
      }
      return num;
    }

    public float GetTotalWeightOfWeapons()
    {
      float num = 0.0f;
      for (EquipmentIndex index = EquipmentIndex.WeaponItemBeginSlot; index < EquipmentIndex.NumAllWeaponSlots; ++index)
      {
        EquipmentElement equipmentElement = this[index];
        if (!equipmentElement.IsEmpty)
          num += equipmentElement.GetEquipmentElementWeight();
      }
      return num;
    }

    public float GetHeadArmorSum()
    {
      float num = 0.0f;
      for (EquipmentIndex index = EquipmentIndex.NumAllWeaponSlots; index < EquipmentIndex.ArmorItemEndSlot; ++index)
      {
        EquipmentElement equipmentElement = this[index];
        if (equipmentElement.Item != null)
          num += (float) equipmentElement.GetModifiedHeadArmor();
      }
      return num;
    }

    public float GetHumanBodyArmorSum()
    {
      float num = 0.0f;
      for (EquipmentIndex index = EquipmentIndex.NumAllWeaponSlots; index < EquipmentIndex.ArmorItemEndSlot; ++index)
      {
        EquipmentElement equipmentElement = this[index];
        if (equipmentElement.Item != null)
          num += (float) equipmentElement.GetModifiedBodyArmor();
      }
      return num;
    }

    public float GetLegArmorSum()
    {
      float num = 0.0f;
      for (EquipmentIndex index = EquipmentIndex.NumAllWeaponSlots; index < EquipmentIndex.ArmorItemEndSlot; ++index)
      {
        EquipmentElement equipmentElement = this[index];
        if (equipmentElement.Item != null)
          num += (float) equipmentElement.GetModifiedLegArmor();
      }
      return num;
    }

    public float GetArmArmorSum()
    {
      float num = 0.0f;
      for (EquipmentIndex index = EquipmentIndex.NumAllWeaponSlots; index < EquipmentIndex.ArmorItemEndSlot; ++index)
      {
        EquipmentElement equipmentElement = this[index];
        if (equipmentElement.Item != null)
          num += (float) equipmentElement.GetModifiedArmArmor();
      }
      return num;
    }

    public float GetHorseArmorSum()
    {
      float num = 0.0f;
      EquipmentElement equipmentElement = this[EquipmentIndex.HorseHarness];
      if (equipmentElement.Item != null)
        num += (float) equipmentElement.GetModifiedMountBodyArmor();
      return num;
    }

    public ArmorComponent.HairCoverTypes HairCoverType
    {
      get
      {
        ArmorComponent.HairCoverTypes hairCoverTypes = ArmorComponent.HairCoverTypes.None;
        ItemObject itemObject = this[EquipmentIndex.NumAllWeaponSlots].Item;
        if (itemObject != null)
        {
          ArmorComponent armorComponent = itemObject.ArmorComponent;
          hairCoverTypes = armorComponent != null ? armorComponent.HairCoverType : ArmorComponent.HairCoverTypes.None;
        }
        else if (this[EquipmentIndex.Body].Item == null)
          hairCoverTypes = ArmorComponent.HairCoverTypes.Type4;
        return hairCoverTypes;
      }
    }

    public ArmorComponent.BeardCoverTypes BeardCoverType => this[EquipmentIndex.NumAllWeaponSlots].Item?.ArmorComponent?.BeardCoverType ?? ArmorComponent.BeardCoverTypes.None;

    public ArmorComponent.HorseHarnessCoverTypes ManeCoverType => this[EquipmentIndex.HorseHarness].Item?.ArmorComponent?.ManeCoverType ?? ArmorComponent.HorseHarnessCoverTypes.None;

    public string ReinsMeshName => this[EquipmentIndex.HorseHarness].Item?.ArmorComponent?.ReinsMesh ?? "";

    public bool EarsAreHidden => this.HairCoverType != ArmorComponent.HairCoverTypes.None && this.HairCoverType != ArmorComponent.HairCoverTypes.Type1 && this.HairCoverType != ArmorComponent.HairCoverTypes.Type4;

    public ArmorComponent.BodyMeshTypes BodyMeshType => this[EquipmentIndex.Body].Item?.ArmorComponent?.BodyMeshType ?? ArmorComponent.BodyMeshTypes.Normal;

    public ArmorComponent.BodyDeformTypes BodyDeformType => this[EquipmentIndex.Body].Item?.ArmorComponent?.BodyDeformType ?? ArmorComponent.BodyDeformTypes.Medium;

    public Equipment.UnderwearTypes GetUnderwearType(bool isFemale)
    {
      ItemObject itemObject = this[EquipmentIndex.Body].Item;
      return itemObject != null ? (!isFemale || !itemObject.DoesNotHideChest ? Equipment.UnderwearTypes.NoUnderwear : Equipment.UnderwearTypes.OnlyTop) : Equipment.UnderwearTypes.FullUnderwear;
    }

    public bool HasWeapon()
    {
      for (int index = 0; index < 5; ++index)
      {
        EquipmentElement itemSlot = this._itemSlots[index];
        if (!itemSlot.IsEmpty && itemSlot.Item.PrimaryWeapon.WeaponFlags.HasAnyFlag<WeaponFlags>(WeaponFlags.WeaponMask))
          return true;
      }
      return false;
    }

    public static Equipment CreateFromEquipmentCode(string equipmentCode)
    {
      Equipment equipment = new Equipment();
      for (int index = 0; index < 12; ++index)
        equipment[index] = new EquipmentElement();
      string str1 = equipmentCode;
      char[] separator1 = new char[1]{ '+' };
      foreach (string str2 in str1.Split(separator1, StringSplitOptions.RemoveEmptyEntries))
      {
        char[] separator2 = new char[1]{ '-' };
        string[] strArray = str2.Split(separator2, StringSplitOptions.RemoveEmptyEntries);
        int int32 = Convert.ToInt32(strArray[0]);
        string objectName1 = strArray[1];
        if (objectName1 != "@null")
        {
          ItemObject itemObject = MBObjectManager.Instance.GetObject<ItemObject>(objectName1);
          string objectName2 = strArray[2];
          ItemModifier itemModifier = (ItemModifier) null;
          if (objectName2 != "@null")
            itemModifier = MBObjectManager.Instance.GetObject<ItemModifier>(objectName2);
          EquipmentElement equipmentElement = new EquipmentElement(itemObject, itemModifier);
          equipment[int32] = equipmentElement;
        }
      }
      return equipment;
    }

    public string CalculateEquipmentCode()
    {
      MBStringBuilder mbStringBuilder = new MBStringBuilder();
      mbStringBuilder.Initialize(callerMemberName: nameof (CalculateEquipmentCode));
      for (int index = 0; index < 12; ++index)
      {
        EquipmentElement equipmentElement = this[index];
        string str1 = equipmentElement.Item != null ? equipmentElement.Item.StringId : "@null";
        string str2 = equipmentElement.ItemModifier != null ? equipmentElement.ItemModifier.StringId : "@null";
        if (string.IsNullOrEmpty(str1))
          str1 = "@null";
        if (string.IsNullOrEmpty(str2))
          str2 = "@null";
        mbStringBuilder.Append('+');
        mbStringBuilder.Append(index);
        mbStringBuilder.Append('-');
        mbStringBuilder.Append<string>(str1);
        mbStringBuilder.Append('-');
        mbStringBuilder.Append<string>(str2);
      }
      return mbStringBuilder.ToStringAndRelease();
    }

    public void AddEquipmentToSlotWithoutAgent(
      EquipmentIndex equipmentIndex,
      EquipmentElement itemRosterElement)
    {
      this[equipmentIndex] = itemRosterElement;
    }

    public EquipmentElement GetEquipmentFromSlot(EquipmentIndex equipmentIndex) => this[equipmentIndex];

    public static bool IsItemFitsToSlot(EquipmentIndex slotIndex, ItemObject item)
    {
      bool flag = false;
      if (item == null)
      {
        flag = true;
      }
      else
      {
        switch (item.ItemType)
        {
          case ItemObject.ItemTypeEnum.Invalid:
            flag = false;
            break;
          case ItemObject.ItemTypeEnum.Horse:
            flag = slotIndex == EquipmentIndex.ArmorItemEndSlot;
            break;
          case ItemObject.ItemTypeEnum.OneHandedWeapon:
          case ItemObject.ItemTypeEnum.TwoHandedWeapon:
          case ItemObject.ItemTypeEnum.Polearm:
          case ItemObject.ItemTypeEnum.Arrows:
          case ItemObject.ItemTypeEnum.Bolts:
          case ItemObject.ItemTypeEnum.Shield:
          case ItemObject.ItemTypeEnum.Bow:
          case ItemObject.ItemTypeEnum.Crossbow:
          case ItemObject.ItemTypeEnum.Thrown:
          case ItemObject.ItemTypeEnum.Pistol:
          case ItemObject.ItemTypeEnum.Musket:
          case ItemObject.ItemTypeEnum.Bullets:
          case ItemObject.ItemTypeEnum.Banner:
            flag = !item.ItemFlags.HasAnyFlag<ItemFlags>(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction) ? slotIndex == EquipmentIndex.WeaponItemBeginSlot || slotIndex == EquipmentIndex.Weapon1 || slotIndex == EquipmentIndex.Weapon2 || slotIndex == EquipmentIndex.Weapon3 : slotIndex == EquipmentIndex.Weapon4;
            break;
          case ItemObject.ItemTypeEnum.HeadArmor:
            flag = slotIndex == EquipmentIndex.NumAllWeaponSlots;
            break;
          case ItemObject.ItemTypeEnum.BodyArmor:
            flag = slotIndex == EquipmentIndex.Body;
            break;
          case ItemObject.ItemTypeEnum.LegArmor:
            flag = slotIndex == EquipmentIndex.Leg;
            break;
          case ItemObject.ItemTypeEnum.HandArmor:
            flag = slotIndex == EquipmentIndex.Gloves;
            break;
          case ItemObject.ItemTypeEnum.Animal:
            flag = slotIndex == EquipmentIndex.ArmorItemEndSlot;
            break;
          case ItemObject.ItemTypeEnum.Book:
            flag = false;
            break;
          case ItemObject.ItemTypeEnum.Cape:
            flag = slotIndex == EquipmentIndex.Cape;
            break;
          case ItemObject.ItemTypeEnum.HorseHarness:
            flag = slotIndex == EquipmentIndex.HorseHarness;
            break;
        }
      }
      return flag;
    }

    public EquipmentIndex GetWeaponPickUpSlotIndex(
      EquipmentElement itemRosterElement,
      bool isStuckMissile)
    {
      if (itemRosterElement.Item.ItemFlags.HasAnyFlag<ItemFlags>(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
        return EquipmentIndex.Weapon4;
      EquipmentIndex equipmentIndex1 = EquipmentIndex.None;
      if (equipmentIndex1 == EquipmentIndex.None)
      {
        for (EquipmentIndex equipmentIndex2 = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex2 < EquipmentIndex.Weapon4; ++equipmentIndex2)
        {
          if (this[(int) equipmentIndex2].Item == null)
          {
            equipmentIndex1 = equipmentIndex2;
            break;
          }
        }
      }
      return equipmentIndex1;
    }

    public bool IsEquipmentEqualTo(Equipment other)
    {
      if (other == null)
        return false;
      for (int index = 0; index < 12; ++index)
      {
        if (!this[index].IsEqualTo(other[index]))
          return false;
      }
      return this.IsCivilian == other.IsCivilian;
    }

    public static Equipment GetRandomEquipmentElements(
      BasicCharacterObject character,
      bool randomEquipmentModifier,
      bool isCivilianEquipment = false,
      int seed = -1)
    {
      Equipment equipment = new Equipment(isCivilianEquipment);
      List<Equipment> list = character.AllEquipments.Where<Equipment>((Func<Equipment, bool>) (eq => eq.IsCivilian == isCivilianEquipment && !eq.IsEmpty())).ToList<Equipment>();
      if (list.IsEmpty<Equipment>())
        return equipment;
      int count = list.Count;
      Random random = new Random(seed);
      int weaponSetNo1 = MBRandom.RandomInt(count);
      int weaponSetNo2 = MBRandom.RandomInt(count);
      int weaponSetNo3 = MBRandom.RandomInt(count);
      for (int index = 0; index < 12; ++index)
      {
        if (seed != -1)
        {
          weaponSetNo1 = random.Next() % count;
          weaponSetNo2 = random.Next() % count;
          weaponSetNo3 = random.Next() % count;
        }
        switch (index)
        {
          case 0:
          case 1:
            equipment[index] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex) index, weaponSetNo1, randomEquipmentModifier);
            break;
          case 2:
          case 3:
            equipment[index] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex) index, weaponSetNo2, randomEquipmentModifier);
            break;
          default:
            equipment[index] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex) index, weaponSetNo3, randomEquipmentModifier);
            break;
        }
      }
      return equipment;
    }

    public static void SwapWeapons(
      Equipment equipment,
      EquipmentIndex Index1,
      EquipmentIndex Index2)
    {
      EquipmentElement equipmentElement = equipment[Index1];
      equipment[Index1] = equipment[Index2];
      equipment[Index2] = equipmentElement;
    }

    private static EquipmentElement GetRandomizedEquipment(
      List<Equipment> equipmentSets,
      EquipmentIndex weaponSlot,
      int weaponSetNo,
      bool randomEquipmentModifier)
    {
      EquipmentElement equipmentFromSlot = equipmentSets[weaponSetNo].GetEquipmentFromSlot(weaponSlot);
      if (equipmentFromSlot.Item != null & randomEquipmentModifier)
      {
        if (equipmentFromSlot.Item.HasArmorComponent)
          equipmentFromSlot.SetModifier(equipmentFromSlot.Item.ArmorComponent.ItemModifierGroup?.GetRandomItemModifier());
        else if (equipmentFromSlot.Item.HasHorseComponent)
          equipmentFromSlot.SetModifier(equipmentFromSlot.Item.HorseComponent.ItemModifierGroup?.GetRandomItemModifier());
      }
      return equipmentFromSlot;
    }

    public void GetInitialWeaponIndicesToEquip(
      out EquipmentIndex mainHandWeaponIndex,
      out EquipmentIndex offHandWeaponIndex,
      out bool isMainHandNotUsableWithOneHand)
    {
      mainHandWeaponIndex = EquipmentIndex.None;
      offHandWeaponIndex = EquipmentIndex.None;
      isMainHandNotUsableWithOneHand = false;
      EquipmentIndex[] equipmentIndexArray = new EquipmentIndex[5]
      {
        EquipmentIndex.Weapon4,
        EquipmentIndex.WeaponItemBeginSlot,
        EquipmentIndex.Weapon1,
        EquipmentIndex.Weapon2,
        EquipmentIndex.Weapon3
      };
      foreach (EquipmentIndex index in equipmentIndexArray)
      {
        EquipmentElement equipmentElement = this[index];
        if (!equipmentElement.IsEmpty)
        {
          equipmentElement = this[index];
          ItemObject itemObject = equipmentElement.Item;
          if (mainHandWeaponIndex == EquipmentIndex.None && !itemObject.ItemFlags.HasAnyFlag<ItemFlags>(ItemFlags.HeldInOffHand))
          {
            mainHandWeaponIndex = index;
            if (itemObject.PrimaryWeapon.WeaponFlags.HasAnyFlag<WeaponFlags>(WeaponFlags.NotUsableWithOneHand))
              isMainHandNotUsableWithOneHand = true;
          }
          else if (offHandWeaponIndex == EquipmentIndex.None && itemObject.ItemFlags.HasAnyFlag<ItemFlags>(ItemFlags.HeldInOffHand))
          {
            offHandWeaponIndex = index;
            if (itemObject.PrimaryWeapon.WeaponFlags.HasAnyFlag<WeaponFlags>(WeaponFlags.NotUsableWithOneHand))
            {
              mainHandWeaponIndex = EquipmentIndex.None;
              break;
            }
          }
        }
      }
    }

    internal enum EquipmentType
    {
      Invalid = -1, // 0xFFFFFFFF
      Battle = 0,
      Civilian = 1,
    }

    public enum UnderwearTypes
    {
      NoUnderwear,
      FullUnderwear,
      OnlyTop,
    }
  }
}
