// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.ItemModifier
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10022)]
  public sealed class ItemModifier : MBObjectBase
  {
    [SaveableField(0)]
    private static int ConstructionIndexCounter;
    [SaveableField(1)]
    public readonly int ConstructionIndex;
    private int _damage;
    private int _speed;
    private int _missileSpeed;
    private int _armor;
    private short _hitPoints;
    private short _stackCount;
    private float _mountSpeed;
    private float _maneuver;
    private float _chargeDamage;
    private float _mountHitPoints;

    internal static void AutoGeneratedStaticCollectObjectsItemModifier(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => base.AutoGeneratedInstanceCollectObjects(collectedObjects);

    internal static object AutoGeneratedGetMemberValueConstructionIndex(object o) => (object) ((ItemModifier) o).ConstructionIndex;

    public static int GetCountOfItemModifiers() => ItemModifier.ConstructionIndexCounter;

    public TextObject Name { get; private set; }

    public float PriceMultiplier { get; private set; }

    public ItemModifier()
    {
      this.Name = TextObject.Empty;
      this.ConstructionIndex = ItemModifier.ConstructionIndexCounter++;
    }

    public override void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      base.Deserialize(objectManager, node);
      this.Name = new TextObject(XmlHelper.ReadString(node, "name"));
      this._damage = XmlHelper.ReadInt(node, "damage");
      this._speed = XmlHelper.ReadInt(node, "speed");
      this._missileSpeed = XmlHelper.ReadInt(node, "missile_speed");
      this._armor = XmlHelper.ReadInt(node, "armor");
      this._mountSpeed = XmlHelper.ReadFloat(node, "horse_speed");
      this._maneuver = XmlHelper.ReadFloat(node, "maneuver");
      this._chargeDamage = XmlHelper.ReadFloat(node, "charge_damage");
      this._mountHitPoints = XmlHelper.ReadFloat(node, "horse_hit_points");
      this._hitPoints = (short) XmlHelper.ReadInt(node, "hit_points");
      this._stackCount = (short) XmlHelper.ReadInt(node, "stack_count");
      this.PriceMultiplier = XmlHelper.ReadFloat(node, "price_factor", 1f);
    }

    public bool Equals(ItemModifier other) => other != null && this.StringId == other.StringId;

    public override int GetHashCode() => this.StringId.GetDeterministicHashCode();

    private static int ModifyFactor(int baseValue, float factor)
    {
      if (baseValue == 0)
        return 0;
      if (!MBMath.ApproximatelyEquals(factor, 0.0f))
        baseValue = (double) factor <= 1.0 ? MathF.Floor(factor * (float) baseValue) : MathF.Ceiling(factor * (float) baseValue);
      return baseValue;
    }

    public int ModifyDamage(int baseDamage) => baseDamage + this._damage;

    public int ModifySpeed(int baseSpeed) => baseSpeed + this._speed;

    public int ModifyMountSpeed(int baseSpeed) => ItemModifier.ModifyFactor(baseSpeed, this._mountSpeed);

    public int ModifyMountManeuver(int baseManeuver) => ItemModifier.ModifyFactor(baseManeuver, this._maneuver);

    public int ModifyMountCharge(int baseCharge) => ItemModifier.ModifyFactor(baseCharge, this._chargeDamage);

    public int ModifyMountHitPoints(int baseCharge) => ItemModifier.ModifyFactor(baseCharge, this._mountHitPoints);

    public int ModifyMissileSpeed(int baseSpeed) => baseSpeed + this._missileSpeed;

    public int ModifyArmor(int armorValue) => armorValue + this._armor;

    public short ModifyHitPoints(short baseHitPoints) => (short) ((int) baseHitPoints + (int) this._hitPoints);

    public short ModifyStackCount(short baseStackCount) => (short) ((int) baseStackCount + (int) this._stackCount);
  }
}
