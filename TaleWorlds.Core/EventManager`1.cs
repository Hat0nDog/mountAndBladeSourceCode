// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.EventManager`1
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10009)]
  public class EventManager<T>
  {
    private readonly List<EventManager<T>.EventRegistry> _eventRegistries = new List<EventManager<T>.EventRegistry>();

    protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
    }

    public void RunEvent(int eventType, T arguments)
    {
      foreach (EventManager<T>.EventRegistry eventRegistry in this._eventRegistries)
      {
        if (eventRegistry.EventType == eventType)
        {
          eventRegistry.RegisteredDelegates(arguments);
          break;
        }
      }
    }

    public void RegisterToEvent(int eventType, EventManager<T>.DelegateEvent delegateEvent)
    {
      bool flag = false;
      foreach (EventManager<T>.EventRegistry eventRegistry in this._eventRegistries)
      {
        if (eventRegistry.EventType == eventType)
        {
          eventRegistry.RegisterDelegate(delegateEvent);
          flag = true;
          break;
        }
      }
      if (flag)
        return;
      this._eventRegistries.Add(new EventManager<T>.EventRegistry(eventType, delegateEvent));
    }

    public void UnregisterFromEvent(int eventType, EventManager<T>.DelegateEvent delegateEvent)
    {
      bool flag = false;
      for (int index = 0; index < this._eventRegistries.Count; ++index)
      {
        if (this._eventRegistries[index].EventType == eventType)
        {
          if (this._eventRegistries[index].UnregisterDelegate(delegateEvent))
            this._eventRegistries.RemoveAt(index);
          flag = true;
          break;
        }
      }
      if (!flag)
        throw new MBNotFoundException("No delegate to remove could be found.");
    }

    [SaveableClass(10010)]
    public class EventRegistry
    {
      protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
      {
      }

      public int EventType { get; protected set; }

      public EventManager<T>.DelegateEvent RegisteredDelegates { get; protected set; }

      public EventRegistry(int eventType, EventManager<T>.DelegateEvent firstDelegateEvent)
      {
        this.EventType = eventType;
        this.RegisteredDelegates = firstDelegateEvent;
      }

      public void RegisterDelegate(EventManager<T>.DelegateEvent delegateEvent) => this.RegisteredDelegates += delegateEvent;

      public bool UnregisterDelegate(EventManager<T>.DelegateEvent delegateEvent)
      {
        this.RegisteredDelegates -= delegateEvent;
        return this.RegisteredDelegates == null;
      }
    }

    public delegate void DelegateEvent(T arguments);
  }
}
