// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.EquipmentElement
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  public struct EquipmentElement : ISerializableObject
  {
    public static readonly EquipmentElement Invalid = new EquipmentElement((ItemObject) null);

    public static void AutoGeneratedStaticCollectObjectsEquipmentElement(
      object o,
      List<object> collectedObjects)
    {
      ((EquipmentElement) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
      collectedObjects.Add((object) this.Item);
      collectedObjects.Add((object) this.ItemModifier);
    }

    internal static object AutoGeneratedGetMemberValueItem(object o) => (object) ((EquipmentElement) o).Item;

    internal static object AutoGeneratedGetMemberValueItemModifier(object o) => (object) ((EquipmentElement) o).ItemModifier;

    [SaveableProperty(1)]
    public ItemObject Item { get; private set; }

    [SaveableProperty(2)]
    public ItemModifier ItemModifier { get; private set; }

    public bool IsEmpty => this.Item == null;

    public int ItemValue
    {
      get
      {
        int num = 0;
        if (this.Item != null)
        {
          num = this.Item.Value;
          if (this.ItemModifier != null)
            num = MathF.Round((float) num * this.ItemModifier.PriceMultiplier);
        }
        return num;
      }
    }

    public float Weight
    {
      get
      {
        float weight = this.Item.Weight;
        return (double) weight <= 0.0 ? 0.0f : weight;
      }
    }

    public EquipmentElement(ItemObject item, ItemModifier itemModifier = null)
    {
      this.Item = item;
      this.ItemModifier = itemModifier;
    }

    public EquipmentElement(EquipmentElement other)
      : this(other.Item, other.ItemModifier)
    {
    }

    public void SetModifier(ItemModifier itemModifier) => this.ItemModifier = itemModifier;

    public void Clear()
    {
      this.Item = (ItemObject) null;
      this.ItemModifier = (ItemModifier) null;
    }

    public override int GetHashCode()
    {
      int num = 0;
      if (this.Item != null)
        num += this.Item.GetHashCode();
      if (this.ItemModifier != null)
        num += this.ItemModifier.GetHashCode() * 317;
      return num;
    }

    public override string ToString() => this.Item.ToString() ?? "";

    public int GetModifiedHeadArmor()
    {
      int armorValue = 0;
      if (this.Item.HasArmorComponent)
        armorValue = this.Item.ArmorComponent.HeadArmor;
      if (armorValue > 0 && this.ItemModifier != null)
        armorValue = this.ItemModifier.ModifyArmor(armorValue);
      return armorValue <= 0 ? 0 : armorValue;
    }

    public int GetModifiedBodyArmor()
    {
      int armorValue = 0;
      if (this.Item.HasArmorComponent)
      {
        ArmorComponent armorComponent = this.Item.ArmorComponent;
        armorValue = this.Item.ItemType != ItemObject.ItemTypeEnum.HorseHarness ? armorComponent.BodyArmor : 0;
      }
      else if (this.Item.WeaponComponent != null)
        armorValue = this.Item.WeaponComponent.PrimaryWeapon.BodyArmor;
      if (armorValue > 0 && this.ItemModifier != null)
        armorValue = this.ItemModifier.ModifyArmor(armorValue);
      return armorValue <= 0 ? 0 : armorValue;
    }

    public int GetModifiedMountBodyArmor()
    {
      int armorValue = 0;
      if (this.Item.HasArmorComponent)
      {
        ArmorComponent armorComponent = this.Item.ArmorComponent;
        armorValue = this.Item.ItemType == ItemObject.ItemTypeEnum.HorseHarness ? armorComponent.BodyArmor : 0;
      }
      else if (this.Item.WeaponComponent != null)
        armorValue = this.Item.WeaponComponent.PrimaryWeapon.BodyArmor;
      if (armorValue > 0 && this.ItemModifier != null)
        armorValue = this.ItemModifier.ModifyArmor(armorValue);
      return armorValue <= 0 ? 0 : armorValue;
    }

    public int GetModifiedLegArmor()
    {
      int armorValue = 0;
      if (this.Item.HasArmorComponent)
        armorValue = this.Item.ArmorComponent.LegArmor;
      if (armorValue > 0 && this.ItemModifier != null)
        armorValue = this.ItemModifier.ModifyArmor(armorValue);
      return armorValue <= 0 ? 0 : armorValue;
    }

    public int GetModifiedArmArmor()
    {
      int armorValue = 0;
      if (this.Item.HasArmorComponent)
        armorValue = this.Item.ArmorComponent.ArmArmor;
      if (armorValue > 0 && this.ItemModifier != null)
        armorValue = this.ItemModifier.ModifyArmor(armorValue);
      return armorValue <= 0 ? 0 : armorValue;
    }

    public short GetModifiedMaximumHitPointsForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMaximumHitPoints(this.ItemModifier);

    public TextObject GetModifiedItemName()
    {
      if (this.ItemModifier == null)
        return this.Item.Name;
      HorseComponent horseComponent = this.Item.HorseComponent;
      TextObject textObject;
      if (!TextObject.IsNullOrEmpty(horseComponent?.ModifiedName) && this.ItemModifier == null)
      {
        textObject = horseComponent.ModifiedName;
      }
      else
      {
        textObject = this.ItemModifier.Name;
        textObject.SetTextVariable("ITEMNAME", this.Item.Name);
      }
      return textObject;
    }

    public int GetModifiedThrustDamageForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedThrustDamage(this.ItemModifier);

    public int GetModifiedSwingDamageForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedSwingDamage(this.ItemModifier);

    public int GetModifiedMissileDamageForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMissileDamage(this.ItemModifier);

    public int GetModifiedThrustSpeedForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedThrustSpeed(this.ItemModifier);

    public int GetModifiedSwingSpeedForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedSwingSpeed(this.ItemModifier);

    public int GetModifiedMissileSpeedForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMissileSpeed(this.ItemModifier);

    public int GetModifiedHandlingForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedHandling(this.ItemModifier);

    public short GetModifiedStackCountForUsage(int usageIndex) => this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedStackCount(this.ItemModifier);

    public int GetBaseValue()
    {
      int num = this.Item.Value;
      if (this.ItemModifier != null)
        num = (int) ((double) num * (double) this.ItemModifier.PriceMultiplier);
      return num;
    }

    public bool IsEqualTo(EquipmentElement other) => this.Item == other.Item && this.ItemModifier == other.ItemModifier;

    public override bool Equals(object obj) => obj is ItemRosterElement other && this.Equals(other);

    public bool Equals(ItemRosterElement other) => this.Item == other.EquipmentElement.Item && this.ItemModifier == other.EquipmentElement.ItemModifier;

    public float GetEquipmentElementWeight() => this.Item.PrimaryWeapon == null || !this.Item.PrimaryWeapon.IsConsumable ? this.Weight : this.Weight * (float) this.GetModifiedStackCountForUsage(0);

    public int GetModifiedMountManeuver(in EquipmentElement harness)
    {
      if (this.Item == null)
        return 0;
      HorseComponent horseComponent = this.Item.HorseComponent;
      EquipmentElement equipmentElement = harness;
      ArmorComponent armorComponent = equipmentElement.Item?.ArmorComponent;
      int baseManeuver = horseComponent.Maneuver + (armorComponent != null ? armorComponent.ManeuverBonus : 0);
      if (this.ItemModifier != null)
        baseManeuver = this.ItemModifier.ModifyMountManeuver(baseManeuver);
      equipmentElement = harness;
      if (!equipmentElement.IsEmpty)
      {
        equipmentElement = harness;
        if (equipmentElement.ItemModifier != null)
        {
          equipmentElement = harness;
          baseManeuver = equipmentElement.ItemModifier.ModifyMountManeuver(baseManeuver);
        }
      }
      return baseManeuver;
    }

    public int GetModifiedMountSpeed(in EquipmentElement harness)
    {
      if (this.Item == null)
        return 0;
      HorseComponent horseComponent = this.Item.HorseComponent;
      EquipmentElement equipmentElement = harness;
      ArmorComponent armorComponent = equipmentElement.Item?.ArmorComponent;
      int baseSpeed = horseComponent.Speed + (armorComponent != null ? armorComponent.SpeedBonus : 0);
      if (this.ItemModifier != null)
        baseSpeed = this.ItemModifier.ModifyMountSpeed(baseSpeed);
      equipmentElement = harness;
      if (!equipmentElement.IsEmpty)
      {
        equipmentElement = harness;
        if (equipmentElement.ItemModifier != null)
        {
          equipmentElement = harness;
          baseSpeed = equipmentElement.ItemModifier.ModifyMountSpeed(baseSpeed);
        }
      }
      return baseSpeed;
    }

    public int GetModifiedMountCharge(in EquipmentElement harness)
    {
      if (this.Item == null)
        return 0;
      HorseComponent horseComponent = this.Item.HorseComponent;
      EquipmentElement equipmentElement = harness;
      ArmorComponent armorComponent = equipmentElement.Item?.ArmorComponent;
      int baseCharge = horseComponent.ChargeDamage + (armorComponent != null ? armorComponent.ChargeBonus : 0);
      if (this.ItemModifier != null)
        baseCharge = this.ItemModifier.ModifyMountCharge(baseCharge);
      equipmentElement = harness;
      if (!equipmentElement.IsEmpty)
      {
        equipmentElement = harness;
        if (equipmentElement.ItemModifier != null)
        {
          equipmentElement = harness;
          baseCharge = equipmentElement.ItemModifier.ModifyMountCharge(baseCharge);
        }
      }
      return baseCharge;
    }

    public int GetModifiedMountHitPoints()
    {
      if (this.Item == null)
        return 0;
      HorseComponent horseComponent = this.Item.HorseComponent;
      int baseCharge = horseComponent.HitPoints + horseComponent.HitPointBonus;
      if (this.ItemModifier != null)
        baseCharge = this.ItemModifier.ModifyMountHitPoints(baseCharge);
      return baseCharge <= 0 ? 0 : baseCharge;
    }

    void ISerializableObject.DeserializeFrom(IReader reader)
    {
      string objectName = reader.ReadString();
      this.ItemModifier = (ItemModifier) null;
      if (objectName != "")
        this.ItemModifier = Game.Current.ObjectManager.GetObject<ItemModifier>(objectName);
      this.Item = MBObjectManager.Instance.GetObject(new MBGUID(reader.ReadUInt())) as ItemObject;
    }

    void ISerializableObject.SerializeTo(IWriter writer)
    {
      writer.WriteString(this.ItemModifier != null ? this.ItemModifier.StringId : "");
      IWriter writer1 = writer;
      ItemObject itemObject = this.Item;
      int num = itemObject != null ? (int) itemObject.Id.InternalValue : 0;
      writer1.WriteUInt((uint) num);
    }
  }
}
