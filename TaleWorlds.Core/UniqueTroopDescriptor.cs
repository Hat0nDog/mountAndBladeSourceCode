// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.UniqueTroopDescriptor
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableStruct(20675)]
  public struct UniqueTroopDescriptor : 
    IComparable<UniqueTroopDescriptor>,
    IEquatable<UniqueTroopDescriptor>
  {
    private static readonly UniqueTroopDescriptor InvalidDescriptor;

    public static void AutoGeneratedStaticCollectObjectsUniqueTroopDescriptor(
      object o,
      List<object> collectedObjects)
    {
      ((UniqueTroopDescriptor) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
    }

    internal static object AutoGeneratedGetMemberValueUniqueSeed(object o) => (object) ((UniqueTroopDescriptor) o).UniqueSeed;

    public UniqueTroopDescriptor(int uniqueSeed)
      : this()
    {
      this.UniqueSeed = uniqueSeed;
    }

    [SaveableProperty(1)]
    public int UniqueSeed { get; private set; }

    public static UniqueTroopDescriptor Invalid => UniqueTroopDescriptor.InvalidDescriptor;

    public bool IsValid => this.UniqueSeed > 0;

    public int CompareTo(UniqueTroopDescriptor other) => this.UniqueSeed.CompareTo(other.UniqueSeed);

    public int CompareTo(int uniqueSeed) => this.UniqueSeed.CompareTo(uniqueSeed);

    public override string ToString() => this.UniqueSeed.ToString();

    public override bool Equals(object obj) => obj is UniqueTroopDescriptor uniqueTroopDescriptor && uniqueTroopDescriptor.UniqueSeed == this.UniqueSeed;

    public bool Equals(UniqueTroopDescriptor other) => other.UniqueSeed == this.UniqueSeed;

    public override int GetHashCode() => this.UniqueSeed;

    public static bool operator ==(UniqueTroopDescriptor a, UniqueTroopDescriptor b) => a.UniqueSeed == b.UniqueSeed;

    public static bool operator !=(UniqueTroopDescriptor a, UniqueTroopDescriptor b) => !(a == b);
  }
}
