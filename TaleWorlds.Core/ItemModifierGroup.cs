// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.ItemModifierGroup
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10023)]
  public class ItemModifierGroup : MBObjectBase
  {
    public Dictionary<string, ItemModifierProbability> ItemModifiersWithProbability = new Dictionary<string, ItemModifierProbability>();
    private ItemModifier[] _itemModifiers;

    internal static void AutoGeneratedStaticCollectObjectsItemModifierGroup(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => base.AutoGeneratedInstanceCollectObjects(collectedObjects);

    internal static object AutoGeneratedGetMemberValueID(object o) => (object) ((ItemModifierGroup) o).ID;

    [SaveableProperty(0)]
    public string ID { get; private set; }

    public ItemObject.ItemTypeEnum ItemTypeEnum { get; private set; }

    public IReadOnlyList<ItemModifier> ItemModifiers => (IReadOnlyList<ItemModifier>) this._itemModifiers;

    public ItemModifierGroup()
      : base("")
    {
      this.ID = "";
    }

    public ItemModifierGroup(string id)
      : base(id)
    {
      this.ID = id;
    }

    public override void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      base.Deserialize(objectManager, node);
      this.ID = node.Attributes["id"] != null ? node.Attributes["id"].Value : "";
      XmlAttribute attribute = node.Attributes["item_type"];
      if (attribute != null)
        this.ItemTypeEnum = (ItemObject.ItemTypeEnum) Enum.Parse(typeof (ItemObject.ItemTypeEnum), attribute.Value, true);
      this.ItemModifiersWithProbability = new Dictionary<string, ItemModifierProbability>();
      List<ItemModifier> itemModifierList = new List<ItemModifier>();
      foreach (XmlNode childNode in node.ChildNodes)
      {
        ItemModifierProbability modifierProbability = new ItemModifierProbability();
        string key = "";
        if (childNode.Attributes["id"] != null)
        {
          if (childNode.Attributes["id"].Value != "no_modifier")
          {
            modifierProbability.ItemModifier = MBObjectManager.Instance.GetObject<ItemModifier>(childNode.Attributes["id"].Value);
            key = childNode.Attributes["id"].Value;
          }
          else
            modifierProbability.ItemModifier = (ItemModifier) null;
        }
        float result = 0.0f;
        if (childNode.Attributes["probability"] != null)
          float.TryParse(childNode.Attributes["probability"].Value, out result);
        modifierProbability.Probability = result;
        this.ItemModifiersWithProbability.Add(key, modifierProbability);
        if (modifierProbability.ItemModifier != null)
          itemModifierList.Add(modifierProbability.ItemModifier);
      }
      this._itemModifiers = itemModifierList.ToArray();
    }

    public ItemModifier GetRandomItemModifier(float additionalModifierGettingChange = 1f)
    {
      if ((double) MBRandom.RandomFloat < (double) additionalModifierGettingChange)
      {
        float num1 = 1f;
        foreach (ItemModifierProbability modifierProbability in this.ItemModifiersWithProbability.Values)
          num1 += modifierProbability.Probability;
        float num2 = MBRandom.RandomFloat * num1;
        foreach (ItemModifierProbability modifierProbability in this.ItemModifiersWithProbability.Values)
        {
          num2 -= modifierProbability.Probability;
          if ((double) num2 < 0.0)
            return modifierProbability.ItemModifier;
        }
      }
      return (ItemModifier) null;
    }

    public ItemModifier GetItemModifierWithTarget(float targetValue)
    {
      ItemModifier itemModifier = ((IEnumerable<ItemModifier>) this._itemModifiers).MaxBy<ItemModifier, float>((Func<ItemModifier, float>) (modifier => (double) modifier.PriceMultiplier >= (double) targetValue ? targetValue / modifier.PriceMultiplier : modifier.PriceMultiplier / targetValue));
      float num = (double) itemModifier.PriceMultiplier < (double) targetValue ? itemModifier.PriceMultiplier / targetValue : targetValue / itemModifier.PriceMultiplier;
      return (1.0 < (double) targetValue ? 1.0 / (double) targetValue : (double) targetValue) > (double) num ? (ItemModifier) null : itemModifier;
    }

    private static float GetProb(ItemModifier mod, float targetQuality)
    {
      if (mod == null)
        return 0.0f;
      float num = mod.PriceMultiplier / targetQuality;
      if ((double) num > 1.0)
        num = 1f / num;
      return num * num;
    }

    public ItemModifier GetRandomModifierWithTarget(float targetQuality = 1f, float variance = 1f)
    {
      float num1 = 0.0f;
      foreach (ItemModifierProbability modifierProbability in this.ItemModifiersWithProbability.Values)
        num1 += ItemModifierGroup.GetProb(modifierProbability.ItemModifier, targetQuality);
      float num2 = MBRandom.RandomFloat * num1;
      foreach (ItemModifierProbability modifierProbability in this.ItemModifiersWithProbability.Values)
      {
        float prob = ItemModifierGroup.GetProb(modifierProbability.ItemModifier, targetQuality);
        num2 -= prob;
        if ((double) num2 < -1.0000000116861E-07)
          return modifierProbability.ItemModifier;
      }
      return (ItemModifier) null;
    }
  }
}
