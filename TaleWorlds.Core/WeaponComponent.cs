// Decompiled with JetBrains decompiler
// Type: TaleWorlds.Core.WeaponComponent
// Assembly: TaleWorlds.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 43F7B45C-9AE1-4715-A37B-2364840F62AF
// Assembly location: E:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.Core.dll

using System.Collections.Generic;
using System.Xml;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
  [SaveableClass(10035)]
  public class WeaponComponent : ItemComponent
  {
    private List<WeaponComponentData> _weaponList = new List<WeaponComponentData>();

    internal static void AutoGeneratedStaticCollectObjectsWeaponComponent(
      object o,
      List<object> collectedObjects)
    {
      ((MBObjectBase) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects) => base.AutoGeneratedInstanceCollectObjects(collectedObjects);

    public WeaponComponentData PrimaryWeapon => this._weaponList[0];

    public ItemModifierGroup ItemModifierGroup { get; private set; }

    public IReadOnlyList<WeaponComponentData> Weapons => (IReadOnlyList<WeaponComponentData>) this._weaponList;

    public void AddWeapon(
      WeaponComponentData weaponComponentData,
      ItemModifierGroup itemModifierGroup)
    {
      this.ItemModifierGroup = itemModifierGroup;
      this._weaponList.Add(weaponComponentData);
    }

    public override ItemComponent GetCopy() => (ItemComponent) new WeaponComponent(this.Item);

    public WeaponComponent(ItemObject item) => this.Item = item;

    public ItemObject.ItemTypeEnum GetItemType() => WeaponComponentData.GetItemTypeFromWeaponClass(this._weaponList[0].WeaponClass);

    public override void Deserialize(MBObjectManager objectManager, XmlNode node)
    {
      base.Deserialize(objectManager, node);
      string objectName = node.Attributes["item_modifier_group"] != null ? node.Attributes["item_modifier_group"].Value : (string) null;
      if (objectName != null)
        this.ItemModifierGroup = Game.Current.ObjectManager.GetObject<ItemModifierGroup>(objectName);
      WeaponComponentData weaponComponentData = new WeaponComponentData(this.Item);
      weaponComponentData.Deserialize(this.Item, node);
      this._weaponList.Add(weaponComponentData);
    }
  }
}
